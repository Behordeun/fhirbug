import os
import unittest
import pymodm
import pymongo
from fhirbug.config import settings, import_models
from .generate_examples import generate_examples, clean_examples

GENERATE_FIXTURES = int(os.environ.get("GENERATE_FIXTURES", True))

CONFIG = {
    "DEBUG": True,
    "MODELS_PATH": "examples.pymodm_autogenerated.mappings",
    "DB_BACKEND": "pymodm",
    "PYMODM_CONFIG": {"URI": "mongodb://localhost:27017/fhirbug_mongo_test"},
}

examples = clean_examples(False)


def setup_module():
    settings._reset()
    settings.configure(CONFIG)
    pymodm.connect(settings.PYMODM_CONFIG["URI"])

    # Clear the database
    if GENERATE_FIXTURES:
        server, db_name = settings.PYMODM_CONFIG["URI"].rsplit("/", 1)
        client = pymongo.MongoClient(server)
        client.drop_database(db_name)
        generate_examples(False)
    else:
        print("Skipping Fixtures")


class TestBundles(unittest.TestCase):
    def setUp(self):
        from fhirbug.server.requesthandlers import GetRequestHandler

        self.handler = GetRequestHandler()

    def test_404(self):
        """ 404
        """
        url = "does-not-exist"
        res, status = self.handler.handle(url)
        self.assertEqual(status, 404)
        self.assertEqual(res["resourceType"], "OperationOutcome")

    def test_patients_bundle(self):
        """ GET /Patient/
        """
        url = "Patient"
        res, status = self.handler.handle(url)

        self.assertEqual(status, 200)
        self.assertEqual(len(examples["Patient"]), res["total"])
        self.assertEqual(
            res["link"],
            [{"relation": "next", "url": "Patient/?_count=20&search-offset=21"}],
        )

    def test_query_limits(self):
        """ Bundle limits
        """
        url = "Procedure?_count=7&search-offset=12"
        res, status = self.handler.handle(url)

        self.assertEqual(status, 200)
        self.assertEqual(len(res["entry"]), 7)
        self.assertEqual(
            res["link"],
            [
                {"relation": "next", "url": "Procedure/?_count=7&search-offset=19"},
                {"relation": "previous", "url": "Procedure/?_count=7&search-offset=5"},
            ],
        )

    def test_get_one(self):
        """ GET a single resource
        """

        id = examples["Practitioner"][0]["id"]
        url = f"Practitioner/{id}"
        res, status = self.handler.handle(url)

        self.assertEqual(status, 200)
        self.assertEqual(res["id"], id)


def teardown_module():
    settings._reset()
    pass
