# Automatically Generated for use with the fhirbug pymodm demo server

from bson.objectid import ObjectId
from pymodm import fields, MongoModel, EmbeddedMongoModel, ListField
from fhirbug.models.attributes import Attribute, ReferenceAttribute, EmbeddedAttribute, DateAttribute
from fhirbug.db.backends.pymodm.attributes import ObjectIdReferenceAttribute
from fhirbug.db.backends.pymodm.models import FhirBaseModel
from fhirbug.db.backends.pymodm.searches import StringSearch, NumericSearch


class Extension(FhirBaseModel, MongoModel):
    class FhirMap:
        pass


class Account(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    coverage = fields.EmbeddedDocumentListField("AccountCoverage", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    guarantor = fields.EmbeddedDocumentListField("AccountGuarantor", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    owner = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    partOf = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    servicePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        coverage = EmbeddedAttribute(type="AccountCoverage", getter="coverage", setter="coverage", searcher=StringSearch("coverage"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        guarantor = EmbeddedAttribute(type="AccountGuarantor", getter="guarantor", setter="guarantor", searcher=StringSearch("guarantor"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        owner = EmbeddedAttribute(type="FHIRReference", getter="owner", setter="owner", searcher=StringSearch("owner"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        servicePeriod = EmbeddedAttribute(type="Period", getter="servicePeriod", setter="servicePeriod", searcher=StringSearch("servicePeriod"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class AccountCoverage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    coverage = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    priority = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        coverage = EmbeddedAttribute(type="FHIRReference", getter="coverage", setter="coverage", searcher=StringSearch("coverage"))
        priority = Attribute(getter="priority", setter="priority", searcher=NumericSearch("priority"))

class AccountGuarantor(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    onHold = fields.BooleanField(blank=True, required=False)
    party = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        onHold = Attribute(getter="onHold", setter="onHold", searcher=StringSearch("onHold"))
        party = EmbeddedAttribute(type="FHIRReference", getter="party", setter="party", searcher=StringSearch("party"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))

class ActivityDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    author = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    doNotPerform = fields.BooleanField(blank=True, required=False)
    dosage = fields.EmbeddedDocumentListField("Dosage", blank=True, required=False)
    dynamicValue = fields.EmbeddedDocumentListField("ActivityDefinitionDynamicValue", blank=True, required=False)
    editor = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    endorser = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    intent = fields.CharField(blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    kind = fields.CharField(blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    library = fields.ListField(fields.CharField(), blank=True, required=False)
    location = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    observationRequirement = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    observationResultRequirement = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    participant = fields.EmbeddedDocumentListField("ActivityDefinitionParticipant", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    productCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    productReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    profile = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    reviewer = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    specimenRequirement = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subjectCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subjectReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    subtitle = fields.CharField(blank=True, required=False)
    timingAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    timingDateTime = fields.DateTimeField(blank=True, required=False)
    timingDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    timingPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    timingRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    timingTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    transform = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    usage = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        author = EmbeddedAttribute(type="ContactDetail", getter="author", setter="author", searcher=StringSearch("author"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        doNotPerform = Attribute(getter="doNotPerform", setter="doNotPerform", searcher=StringSearch("doNotPerform"))
        dosage = EmbeddedAttribute(type="Dosage", getter="dosage", setter="dosage", searcher=StringSearch("dosage"))
        dynamicValue = EmbeddedAttribute(type="ActivityDefinitionDynamicValue", getter="dynamicValue", setter="dynamicValue", searcher=StringSearch("dynamicValue"))
        editor = EmbeddedAttribute(type="ContactDetail", getter="editor", setter="editor", searcher=StringSearch("editor"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        endorser = EmbeddedAttribute(type="ContactDetail", getter="endorser", setter="endorser", searcher=StringSearch("endorser"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        intent = Attribute(getter="intent", setter="intent", searcher=StringSearch("intent"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))
        lastReviewDate = DateAttribute("lastReviewDate")
        library = Attribute(getter="library", setter="library", searcher=StringSearch("library"))
        location = EmbeddedAttribute(type="FHIRReference", getter="location", setter="location", searcher=StringSearch("location"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        observationRequirement = EmbeddedAttribute(type="FHIRReference", getter="observationRequirement", setter="observationRequirement", searcher=StringSearch("observationRequirement"))
        observationResultRequirement = EmbeddedAttribute(type="FHIRReference", getter="observationResultRequirement", setter="observationResultRequirement", searcher=StringSearch("observationResultRequirement"))
        participant = EmbeddedAttribute(type="ActivityDefinitionParticipant", getter="participant", setter="participant", searcher=StringSearch("participant"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        productCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="productCodeableConcept", setter="productCodeableConcept", searcher=StringSearch("productCodeableConcept"))
        productReference = EmbeddedAttribute(type="FHIRReference", getter="productReference", setter="productReference", searcher=StringSearch("productReference"))
        profile = Attribute(getter="profile", setter="profile", searcher=StringSearch("profile"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        reviewer = EmbeddedAttribute(type="ContactDetail", getter="reviewer", setter="reviewer", searcher=StringSearch("reviewer"))
        specimenRequirement = EmbeddedAttribute(type="FHIRReference", getter="specimenRequirement", setter="specimenRequirement", searcher=StringSearch("specimenRequirement"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subjectCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="subjectCodeableConcept", setter="subjectCodeableConcept", searcher=StringSearch("subjectCodeableConcept"))
        subjectReference = EmbeddedAttribute(type="FHIRReference", getter="subjectReference", setter="subjectReference", searcher=StringSearch("subjectReference"))
        subtitle = Attribute(getter="subtitle", setter="subtitle", searcher=StringSearch("subtitle"))
        timingAge = EmbeddedAttribute(type="Age", getter="timingAge", setter="timingAge", searcher=StringSearch("timingAge"))
        timingDateTime = DateAttribute("timingDateTime")
        timingDuration = EmbeddedAttribute(type="Duration", getter="timingDuration", setter="timingDuration", searcher=StringSearch("timingDuration"))
        timingPeriod = EmbeddedAttribute(type="Period", getter="timingPeriod", setter="timingPeriod", searcher=StringSearch("timingPeriod"))
        timingRange = EmbeddedAttribute(type="Range", getter="timingRange", setter="timingRange", searcher=StringSearch("timingRange"))
        timingTiming = EmbeddedAttribute(type="Timing", getter="timingTiming", setter="timingTiming", searcher=StringSearch("timingTiming"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        transform = Attribute(getter="transform", setter="transform", searcher=StringSearch("transform"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        usage = Attribute(getter="usage", setter="usage", searcher=StringSearch("usage"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ActivityDefinitionDynamicValue(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    expression = fields.EmbeddedDocumentField("Expression", blank=False, required=True)
    path = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        expression = EmbeddedAttribute(type="Expression", getter="expression", setter="expression", searcher=StringSearch("expression"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))

class ActivityDefinitionParticipant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class Address(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    city = fields.CharField(blank=True, required=False)
    country = fields.CharField(blank=True, required=False)
    district = fields.CharField(blank=True, required=False)
    line = fields.ListField(fields.CharField(), blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    postalCode = fields.CharField(blank=True, required=False)
    state = fields.CharField(blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    use = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        city = Attribute(getter="city", setter="city", searcher=StringSearch("city"))
        country = Attribute(getter="country", setter="country", searcher=StringSearch("country"))
        district = Attribute(getter="district", setter="district", searcher=StringSearch("district"))
        line = Attribute(getter="line", setter="line", searcher=StringSearch("line"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        postalCode = Attribute(getter="postalCode", setter="postalCode", searcher=StringSearch("postalCode"))
        state = Attribute(getter="state", setter="state", searcher=StringSearch("state"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))

class AdverseEvent(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    actuality = fields.CharField(blank=False, required=True)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    contributor = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    detected = fields.DateTimeField(blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    event = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    location = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    recordedDate = fields.DateTimeField(blank=True, required=False)
    recorder = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    referenceDocument = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    resultingCondition = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    seriousness = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    severity = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    study = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    subjectMedicalHistory = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    suspectEntity = fields.EmbeddedDocumentListField("AdverseEventSuspectEntity", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        actuality = Attribute(getter="actuality", setter="actuality", searcher=StringSearch("actuality"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        contributor = EmbeddedAttribute(type="FHIRReference", getter="contributor", setter="contributor", searcher=StringSearch("contributor"))
        date = DateAttribute("date")
        detected = DateAttribute("detected")
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        event = EmbeddedAttribute(type="CodeableConcept", getter="event", setter="event", searcher=StringSearch("event"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        location = EmbeddedAttribute(type="FHIRReference", getter="location", setter="location", searcher=StringSearch("location"))
        outcome = EmbeddedAttribute(type="CodeableConcept", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        recordedDate = DateAttribute("recordedDate")
        recorder = EmbeddedAttribute(type="FHIRReference", getter="recorder", setter="recorder", searcher=StringSearch("recorder"))
        referenceDocument = EmbeddedAttribute(type="FHIRReference", getter="referenceDocument", setter="referenceDocument", searcher=StringSearch("referenceDocument"))
        resultingCondition = EmbeddedAttribute(type="FHIRReference", getter="resultingCondition", setter="resultingCondition", searcher=StringSearch("resultingCondition"))
        seriousness = EmbeddedAttribute(type="CodeableConcept", getter="seriousness", setter="seriousness", searcher=StringSearch("seriousness"))
        severity = EmbeddedAttribute(type="CodeableConcept", getter="severity", setter="severity", searcher=StringSearch("severity"))
        study = EmbeddedAttribute(type="FHIRReference", getter="study", setter="study", searcher=StringSearch("study"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        subjectMedicalHistory = EmbeddedAttribute(type="FHIRReference", getter="subjectMedicalHistory", setter="subjectMedicalHistory", searcher=StringSearch("subjectMedicalHistory"))
        suspectEntity = EmbeddedAttribute(type="AdverseEventSuspectEntity", getter="suspectEntity", setter="suspectEntity", searcher=StringSearch("suspectEntity"))

class AdverseEventSuspectEntity(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    causality = fields.EmbeddedDocumentListField("AdverseEventSuspectEntityCausality", blank=True, required=False)
    instance = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        causality = EmbeddedAttribute(type="AdverseEventSuspectEntityCausality", getter="causality", setter="causality", searcher=StringSearch("causality"))
        instance = EmbeddedAttribute(type="FHIRReference", getter="instance", setter="instance", searcher=StringSearch("instance"))

class AdverseEventSuspectEntityCausality(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    assessment = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    author = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    method = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    productRelatedness = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        assessment = EmbeddedAttribute(type="CodeableConcept", getter="assessment", setter="assessment", searcher=StringSearch("assessment"))
        author = EmbeddedAttribute(type="FHIRReference", getter="author", setter="author", searcher=StringSearch("author"))
        method = EmbeddedAttribute(type="CodeableConcept", getter="method", setter="method", searcher=StringSearch("method"))
        productRelatedness = Attribute(getter="productRelatedness", setter="productRelatedness", searcher=StringSearch("productRelatedness"))

class Age(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    comparator = fields.CharField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    unit = fields.CharField(blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comparator = Attribute(getter="comparator", setter="comparator", searcher=StringSearch("comparator"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        unit = Attribute(getter="unit", setter="unit", searcher=StringSearch("unit"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class AllergyIntolerance(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    asserter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    category = fields.ListField(fields.CharField(), blank=True, required=False)
    clinicalStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    criticality = fields.CharField(blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    lastOccurrence = fields.DateTimeField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    onsetAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    onsetDateTime = fields.DateTimeField(blank=True, required=False)
    onsetPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    onsetRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    onsetString = fields.CharField(blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    reaction = fields.EmbeddedDocumentListField("AllergyIntoleranceReaction", blank=True, required=False)
    recordedDate = fields.DateTimeField(blank=True, required=False)
    recorder = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    verificationStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        asserter = EmbeddedAttribute(type="FHIRReference", getter="asserter", setter="asserter", searcher=StringSearch("asserter"))
        category = Attribute(getter="category", setter="category", searcher=StringSearch("category"))
        clinicalStatus = EmbeddedAttribute(type="CodeableConcept", getter="clinicalStatus", setter="clinicalStatus", searcher=StringSearch("clinicalStatus"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        criticality = Attribute(getter="criticality", setter="criticality", searcher=StringSearch("criticality"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        lastOccurrence = DateAttribute("lastOccurrence")
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        onsetAge = EmbeddedAttribute(type="Age", getter="onsetAge", setter="onsetAge", searcher=StringSearch("onsetAge"))
        onsetDateTime = DateAttribute("onsetDateTime")
        onsetPeriod = EmbeddedAttribute(type="Period", getter="onsetPeriod", setter="onsetPeriod", searcher=StringSearch("onsetPeriod"))
        onsetRange = EmbeddedAttribute(type="Range", getter="onsetRange", setter="onsetRange", searcher=StringSearch("onsetRange"))
        onsetString = Attribute(getter="onsetString", setter="onsetString", searcher=StringSearch("onsetString"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        reaction = EmbeddedAttribute(type="AllergyIntoleranceReaction", getter="reaction", setter="reaction", searcher=StringSearch("reaction"))
        recordedDate = DateAttribute("recordedDate")
        recorder = EmbeddedAttribute(type="FHIRReference", getter="recorder", setter="recorder", searcher=StringSearch("recorder"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        verificationStatus = EmbeddedAttribute(type="CodeableConcept", getter="verificationStatus", setter="verificationStatus", searcher=StringSearch("verificationStatus"))

class AllergyIntoleranceReaction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    exposureRoute = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    manifestation = fields.EmbeddedDocumentListField("CodeableConcept", blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    onset = fields.DateTimeField(blank=True, required=False)
    severity = fields.CharField(blank=True, required=False)
    substance = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        exposureRoute = EmbeddedAttribute(type="CodeableConcept", getter="exposureRoute", setter="exposureRoute", searcher=StringSearch("exposureRoute"))
        manifestation = EmbeddedAttribute(type="CodeableConcept", getter="manifestation", setter="manifestation", searcher=StringSearch("manifestation"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        onset = DateAttribute("onset")
        severity = Attribute(getter="severity", setter="severity", searcher=StringSearch("severity"))
        substance = EmbeddedAttribute(type="CodeableConcept", getter="substance", setter="substance", searcher=StringSearch("substance"))

class Annotation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    authorReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    authorString = fields.CharField(blank=True, required=False)
    text = fields.CharField(blank=False, required=True)
    time = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        authorReference = EmbeddedAttribute(type="FHIRReference", getter="authorReference", setter="authorReference", searcher=StringSearch("authorReference"))
        authorString = Attribute(getter="authorString", setter="authorString", searcher=StringSearch("authorString"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        time = DateAttribute("time")

class Appointment(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    appointmentType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    cancelationReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    end = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    minutesDuration = fields.IntegerField(blank=True, required=False)
    participant = fields.EmbeddedDocumentListField("AppointmentParticipant", blank=False, required=True)
    patientInstruction = fields.CharField(blank=True, required=False)
    priority = fields.IntegerField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    requestedPeriod = fields.EmbeddedDocumentListField("Period", blank=True, required=False)
    serviceCategory = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    serviceType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    slot = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    specialty = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    start = fields.DateTimeField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    supportingInformation = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        appointmentType = EmbeddedAttribute(type="CodeableConcept", getter="appointmentType", setter="appointmentType", searcher=StringSearch("appointmentType"))
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        cancelationReason = EmbeddedAttribute(type="CodeableConcept", getter="cancelationReason", setter="cancelationReason", searcher=StringSearch("cancelationReason"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        created = DateAttribute("created")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        end = DateAttribute("end")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        minutesDuration = Attribute(getter="minutesDuration", setter="minutesDuration", searcher=NumericSearch("minutesDuration"))
        participant = EmbeddedAttribute(type="AppointmentParticipant", getter="participant", setter="participant", searcher=StringSearch("participant"))
        patientInstruction = Attribute(getter="patientInstruction", setter="patientInstruction", searcher=StringSearch("patientInstruction"))
        priority = Attribute(getter="priority", setter="priority", searcher=NumericSearch("priority"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        requestedPeriod = EmbeddedAttribute(type="Period", getter="requestedPeriod", setter="requestedPeriod", searcher=StringSearch("requestedPeriod"))
        serviceCategory = EmbeddedAttribute(type="CodeableConcept", getter="serviceCategory", setter="serviceCategory", searcher=StringSearch("serviceCategory"))
        serviceType = EmbeddedAttribute(type="CodeableConcept", getter="serviceType", setter="serviceType", searcher=StringSearch("serviceType"))
        slot = EmbeddedAttribute(type="FHIRReference", getter="slot", setter="slot", searcher=StringSearch("slot"))
        specialty = EmbeddedAttribute(type="CodeableConcept", getter="specialty", setter="specialty", searcher=StringSearch("specialty"))
        start = DateAttribute("start")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        supportingInformation = EmbeddedAttribute(type="FHIRReference", getter="supportingInformation", setter="supportingInformation", searcher=StringSearch("supportingInformation"))

class AppointmentParticipant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    required = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = EmbeddedAttribute(type="FHIRReference", getter="actor", setter="actor", searcher=StringSearch("actor"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        required = Attribute(getter="required", setter="required", searcher=StringSearch("required"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class AppointmentResponse(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    actor = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    appointment = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    comment = fields.CharField(blank=True, required=False)
    end = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    participantStatus = fields.CharField(blank=False, required=True)
    participantType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    start = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        actor = EmbeddedAttribute(type="FHIRReference", getter="actor", setter="actor", searcher=StringSearch("actor"))
        appointment = EmbeddedAttribute(type="FHIRReference", getter="appointment", setter="appointment", searcher=StringSearch("appointment"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        end = DateAttribute("end")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        participantStatus = Attribute(getter="participantStatus", setter="participantStatus", searcher=StringSearch("participantStatus"))
        participantType = EmbeddedAttribute(type="CodeableConcept", getter="participantType", setter="participantType", searcher=StringSearch("participantType"))
        start = DateAttribute("start")

class Attachment(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    contentType = fields.CharField(blank=True, required=False)
    creation = fields.DateTimeField(blank=True, required=False)
    data = fields.CharField(blank=True, required=False)
    hash = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    size = fields.IntegerField(blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        contentType = Attribute(getter="contentType", setter="contentType", searcher=StringSearch("contentType"))
        creation = DateAttribute("creation")
        data = Attribute(getter="data", setter="data", searcher=StringSearch("data"))
        hash = Attribute(getter="hash", setter="hash", searcher=StringSearch("hash"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        size = Attribute(getter="size", setter="size", searcher=NumericSearch("size"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class AuditEvent(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    action = fields.CharField(blank=True, required=False)
    agent = fields.EmbeddedDocumentListField("AuditEventAgent", blank=False, required=True)
    entity = fields.EmbeddedDocumentListField("AuditEventEntity", blank=True, required=False)
    outcome = fields.CharField(blank=True, required=False)
    outcomeDesc = fields.CharField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    purposeOfEvent = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    recorded = fields.DateTimeField(blank=False, required=True)
    source = fields.EmbeddedDocumentField("AuditEventSource", blank=False, required=True)
    subtype = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    type = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        action = Attribute(getter="action", setter="action", searcher=StringSearch("action"))
        agent = EmbeddedAttribute(type="AuditEventAgent", getter="agent", setter="agent", searcher=StringSearch("agent"))
        entity = EmbeddedAttribute(type="AuditEventEntity", getter="entity", setter="entity", searcher=StringSearch("entity"))
        outcome = Attribute(getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        outcomeDesc = Attribute(getter="outcomeDesc", setter="outcomeDesc", searcher=StringSearch("outcomeDesc"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        purposeOfEvent = EmbeddedAttribute(type="CodeableConcept", getter="purposeOfEvent", setter="purposeOfEvent", searcher=StringSearch("purposeOfEvent"))
        recorded = DateAttribute("recorded")
        source = EmbeddedAttribute(type="AuditEventSource", getter="source", setter="source", searcher=StringSearch("source"))
        subtype = EmbeddedAttribute(type="Coding", getter="subtype", setter="subtype", searcher=StringSearch("subtype"))
        type = EmbeddedAttribute(type="Coding", getter="type", setter="type", searcher=StringSearch("type"))

class AuditEventAgent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    altId = fields.CharField(blank=True, required=False)
    location = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    media = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    network = fields.EmbeddedDocumentField("AuditEventAgentNetwork", blank=True, required=False)
    policy = fields.ListField(fields.CharField(), blank=True, required=False)
    purposeOfUse = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    requestor = fields.BooleanField(blank=False, required=True)
    role = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    who = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        altId = Attribute(getter="altId", setter="altId", searcher=StringSearch("altId"))
        location = EmbeddedAttribute(type="FHIRReference", getter="location", setter="location", searcher=StringSearch("location"))
        media = EmbeddedAttribute(type="Coding", getter="media", setter="media", searcher=StringSearch("media"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        network = EmbeddedAttribute(type="AuditEventAgentNetwork", getter="network", setter="network", searcher=StringSearch("network"))
        policy = Attribute(getter="policy", setter="policy", searcher=StringSearch("policy"))
        purposeOfUse = EmbeddedAttribute(type="CodeableConcept", getter="purposeOfUse", setter="purposeOfUse", searcher=StringSearch("purposeOfUse"))
        requestor = Attribute(getter="requestor", setter="requestor", searcher=StringSearch("requestor"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        who = EmbeddedAttribute(type="FHIRReference", getter="who", setter="who", searcher=StringSearch("who"))

class AuditEventAgentNetwork(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    address = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        address = Attribute(getter="address", setter="address", searcher=StringSearch("address"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class AuditEventEntity(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    detail = fields.EmbeddedDocumentListField("AuditEventEntityDetail", blank=True, required=False)
    lifecycle = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    query = fields.CharField(blank=True, required=False)
    role = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    securityLabel = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    type = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    what = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        detail = EmbeddedAttribute(type="AuditEventEntityDetail", getter="detail", setter="detail", searcher=StringSearch("detail"))
        lifecycle = EmbeddedAttribute(type="Coding", getter="lifecycle", setter="lifecycle", searcher=StringSearch("lifecycle"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        query = Attribute(getter="query", setter="query", searcher=StringSearch("query"))
        role = EmbeddedAttribute(type="Coding", getter="role", setter="role", searcher=StringSearch("role"))
        securityLabel = EmbeddedAttribute(type="Coding", getter="securityLabel", setter="securityLabel", searcher=StringSearch("securityLabel"))
        type = EmbeddedAttribute(type="Coding", getter="type", setter="type", searcher=StringSearch("type"))
        what = EmbeddedAttribute(type="FHIRReference", getter="what", setter="what", searcher=StringSearch("what"))

class AuditEventEntityDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    valueBase64Binary = fields.CharField(blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        valueBase64Binary = Attribute(getter="valueBase64Binary", setter="valueBase64Binary", searcher=StringSearch("valueBase64Binary"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))

class AuditEventSource(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    observer = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    site = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        observer = EmbeddedAttribute(type="FHIRReference", getter="observer", setter="observer", searcher=StringSearch("observer"))
        site = Attribute(getter="site", setter="site", searcher=StringSearch("site"))
        type = EmbeddedAttribute(type="Coding", getter="type", setter="type", searcher=StringSearch("type"))

class BackboneElement(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))

class Basic(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    author = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    created = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        author = EmbeddedAttribute(type="FHIRReference", getter="author", setter="author", searcher=StringSearch("author"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        created = DateAttribute("created")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))

class Binary(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    contentType = fields.CharField(blank=False, required=True)
    data = fields.CharField(blank=True, required=False)
    securityContext = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        contentType = Attribute(getter="contentType", setter="contentType", searcher=StringSearch("contentType"))
        data = Attribute(getter="data", setter="data", searcher=StringSearch("data"))
        securityContext = EmbeddedAttribute(type="FHIRReference", getter="securityContext", setter="securityContext", searcher=StringSearch("securityContext"))

class BiologicallyDerivedProduct(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    collection = fields.EmbeddedDocumentField("BiologicallyDerivedProductCollection", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    manipulation = fields.EmbeddedDocumentField("BiologicallyDerivedProductManipulation", blank=True, required=False)
    parent = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    processing = fields.EmbeddedDocumentListField("BiologicallyDerivedProductProcessing", blank=True, required=False)
    productCategory = fields.CharField(blank=True, required=False)
    productCode = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    quantity = fields.IntegerField(blank=True, required=False)
    request = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    storage = fields.EmbeddedDocumentListField("BiologicallyDerivedProductStorage", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        collection = EmbeddedAttribute(type="BiologicallyDerivedProductCollection", getter="collection", setter="collection", searcher=StringSearch("collection"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        manipulation = EmbeddedAttribute(type="BiologicallyDerivedProductManipulation", getter="manipulation", setter="manipulation", searcher=StringSearch("manipulation"))
        parent = EmbeddedAttribute(type="FHIRReference", getter="parent", setter="parent", searcher=StringSearch("parent"))
        processing = EmbeddedAttribute(type="BiologicallyDerivedProductProcessing", getter="processing", setter="processing", searcher=StringSearch("processing"))
        productCategory = Attribute(getter="productCategory", setter="productCategory", searcher=StringSearch("productCategory"))
        productCode = EmbeddedAttribute(type="CodeableConcept", getter="productCode", setter="productCode", searcher=StringSearch("productCode"))
        quantity = Attribute(getter="quantity", setter="quantity", searcher=NumericSearch("quantity"))
        request = EmbeddedAttribute(type="FHIRReference", getter="request", setter="request", searcher=StringSearch("request"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        storage = EmbeddedAttribute(type="BiologicallyDerivedProductStorage", getter="storage", setter="storage", searcher=StringSearch("storage"))

class BiologicallyDerivedProductCollection(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    collectedDateTime = fields.DateTimeField(blank=True, required=False)
    collectedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    collector = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    source = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        collectedDateTime = DateAttribute("collectedDateTime")
        collectedPeriod = EmbeddedAttribute(type="Period", getter="collectedPeriod", setter="collectedPeriod", searcher=StringSearch("collectedPeriod"))
        collector = EmbeddedAttribute(type="FHIRReference", getter="collector", setter="collector", searcher=StringSearch("collector"))
        source = EmbeddedAttribute(type="FHIRReference", getter="source", setter="source", searcher=StringSearch("source"))

class BiologicallyDerivedProductManipulation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    timeDateTime = fields.DateTimeField(blank=True, required=False)
    timePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        timeDateTime = DateAttribute("timeDateTime")
        timePeriod = EmbeddedAttribute(type="Period", getter="timePeriod", setter="timePeriod", searcher=StringSearch("timePeriod"))

class BiologicallyDerivedProductProcessing(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    additive = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    procedure = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    timeDateTime = fields.DateTimeField(blank=True, required=False)
    timePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        additive = EmbeddedAttribute(type="FHIRReference", getter="additive", setter="additive", searcher=StringSearch("additive"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        procedure = EmbeddedAttribute(type="CodeableConcept", getter="procedure", setter="procedure", searcher=StringSearch("procedure"))
        timeDateTime = DateAttribute("timeDateTime")
        timePeriod = EmbeddedAttribute(type="Period", getter="timePeriod", setter="timePeriod", searcher=StringSearch("timePeriod"))

class BiologicallyDerivedProductStorage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    duration = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    scale = fields.CharField(blank=True, required=False)
    temperature = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        duration = EmbeddedAttribute(type="Period", getter="duration", setter="duration", searcher=StringSearch("duration"))
        scale = Attribute(getter="scale", setter="scale", searcher=StringSearch("scale"))
        temperature = Attribute(getter="temperature", setter="temperature", searcher=NumericSearch("temperature"))

class BodySite(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    image = fields.EmbeddedDocumentListField("Attachment", blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    qualifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        image = EmbeddedAttribute(type="Attachment", getter="image", setter="image", searcher=StringSearch("image"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        qualifier = EmbeddedAttribute(type="CodeableConcept", getter="qualifier", setter="qualifier", searcher=StringSearch("qualifier"))

class BodyStructure(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    image = fields.EmbeddedDocumentListField("Attachment", blank=True, required=False)
    location = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    locationQualifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    morphology = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        image = EmbeddedAttribute(type="Attachment", getter="image", setter="image", searcher=StringSearch("image"))
        location = EmbeddedAttribute(type="CodeableConcept", getter="location", setter="location", searcher=StringSearch("location"))
        locationQualifier = EmbeddedAttribute(type="CodeableConcept", getter="locationQualifier", setter="locationQualifier", searcher=StringSearch("locationQualifier"))
        morphology = EmbeddedAttribute(type="CodeableConcept", getter="morphology", setter="morphology", searcher=StringSearch("morphology"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))

class Bundle(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    entry = fields.EmbeddedDocumentListField("BundleEntry", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    link = fields.EmbeddedDocumentListField("BundleLink", blank=True, required=False)
    signature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    timestamp = fields.DateTimeField(blank=True, required=False)
    total = fields.IntegerField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        entry = EmbeddedAttribute(type="BundleEntry", getter="entry", setter="entry", searcher=StringSearch("entry"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        link = EmbeddedAttribute(type="BundleLink", getter="link", setter="link", searcher=StringSearch("link"))
        signature = EmbeddedAttribute(type="Signature", getter="signature", setter="signature", searcher=StringSearch("signature"))
        timestamp = DateAttribute("timestamp")
        total = Attribute(getter="total", setter="total", searcher=NumericSearch("total"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class BundleEntry(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    fullUrl = fields.CharField(blank=True, required=False)
    link = fields.EmbeddedDocumentListField("BundleLink", blank=True, required=False)
    request = fields.EmbeddedDocumentField("BundleEntryRequest", blank=True, required=False)
    resource = fields.EmbeddedDocumentField("Resource", blank=True, required=False)
    response = fields.EmbeddedDocumentField("BundleEntryResponse", blank=True, required=False)
    search = fields.EmbeddedDocumentField("BundleEntrySearch", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        fullUrl = Attribute(getter="fullUrl", setter="fullUrl", searcher=StringSearch("fullUrl"))
        link = EmbeddedAttribute(type="BundleLink", getter="link", setter="link", searcher=StringSearch("link"))
        request = EmbeddedAttribute(type="BundleEntryRequest", getter="request", setter="request", searcher=StringSearch("request"))
        resource = EmbeddedAttribute(type="Resource", getter="resource", setter="resource", searcher=StringSearch("resource"))
        response = EmbeddedAttribute(type="BundleEntryResponse", getter="response", setter="response", searcher=StringSearch("response"))
        search = EmbeddedAttribute(type="BundleEntrySearch", getter="search", setter="search", searcher=StringSearch("search"))

class BundleEntryRequest(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    ifMatch = fields.CharField(blank=True, required=False)
    ifModifiedSince = fields.DateTimeField(blank=True, required=False)
    ifNoneExist = fields.CharField(blank=True, required=False)
    ifNoneMatch = fields.CharField(blank=True, required=False)
    method = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        ifMatch = Attribute(getter="ifMatch", setter="ifMatch", searcher=StringSearch("ifMatch"))
        ifModifiedSince = DateAttribute("ifModifiedSince")
        ifNoneExist = Attribute(getter="ifNoneExist", setter="ifNoneExist", searcher=StringSearch("ifNoneExist"))
        ifNoneMatch = Attribute(getter="ifNoneMatch", setter="ifNoneMatch", searcher=StringSearch("ifNoneMatch"))
        method = Attribute(getter="method", setter="method", searcher=StringSearch("method"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class BundleEntryResponse(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    etag = fields.CharField(blank=True, required=False)
    lastModified = fields.DateTimeField(blank=True, required=False)
    location = fields.CharField(blank=True, required=False)
    outcome = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        etag = Attribute(getter="etag", setter="etag", searcher=StringSearch("etag"))
        lastModified = DateAttribute("lastModified")
        location = Attribute(getter="location", setter="location", searcher=StringSearch("location"))
        outcome = Attribute(getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class BundleEntrySearch(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    mode = fields.CharField(blank=True, required=False)
    score = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        score = Attribute(getter="score", setter="score", searcher=NumericSearch("score"))

class BundleLink(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    relation = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        relation = Attribute(getter="relation", setter="relation", searcher=StringSearch("relation"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class CapabilityStatement(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    document = fields.EmbeddedDocumentListField("CapabilityStatementDocument", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    fhirVersion = fields.CharField(blank=False, required=True)
    format = fields.ListField(fields.CharField(), blank=False, required=True)
    implementation = fields.EmbeddedDocumentField("CapabilityStatementImplementation", blank=True, required=False)
    implementationGuide = fields.ListField(fields.CharField(), blank=True, required=False)
    imports = fields.ListField(fields.CharField(), blank=True, required=False)
    instantiates = fields.ListField(fields.CharField(), blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    kind = fields.CharField(blank=False, required=True)
    messaging = fields.EmbeddedDocumentListField("CapabilityStatementMessaging", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    patchFormat = fields.ListField(fields.CharField(), blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    rest = fields.EmbeddedDocumentListField("CapabilityStatementRest", blank=True, required=False)
    software = fields.EmbeddedDocumentField("CapabilityStatementSoftware", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        document = EmbeddedAttribute(type="CapabilityStatementDocument", getter="document", setter="document", searcher=StringSearch("document"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        fhirVersion = Attribute(getter="fhirVersion", setter="fhirVersion", searcher=StringSearch("fhirVersion"))
        format = Attribute(getter="format", setter="format", searcher=StringSearch("format"))
        implementation = EmbeddedAttribute(type="CapabilityStatementImplementation", getter="implementation", setter="implementation", searcher=StringSearch("implementation"))
        implementationGuide = Attribute(getter="implementationGuide", setter="implementationGuide", searcher=StringSearch("implementationGuide"))
        imports = Attribute(getter="imports", setter="imports", searcher=StringSearch("imports"))
        instantiates = Attribute(getter="instantiates", setter="instantiates", searcher=StringSearch("instantiates"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))
        messaging = EmbeddedAttribute(type="CapabilityStatementMessaging", getter="messaging", setter="messaging", searcher=StringSearch("messaging"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        patchFormat = Attribute(getter="patchFormat", setter="patchFormat", searcher=StringSearch("patchFormat"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        rest = EmbeddedAttribute(type="CapabilityStatementRest", getter="rest", setter="rest", searcher=StringSearch("rest"))
        software = EmbeddedAttribute(type="CapabilityStatementSoftware", getter="software", setter="software", searcher=StringSearch("software"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class CapabilityStatementDocument(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    mode = fields.CharField(blank=False, required=True)
    profile = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        profile = Attribute(getter="profile", setter="profile", searcher=StringSearch("profile"))

class CapabilityStatementImplementation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    custodian = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    description = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        custodian = EmbeddedAttribute(type="FHIRReference", getter="custodian", setter="custodian", searcher=StringSearch("custodian"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class CapabilityStatementMessaging(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    endpoint = fields.EmbeddedDocumentListField("CapabilityStatementMessagingEndpoint", blank=True, required=False)
    reliableCache = fields.IntegerField(blank=True, required=False)
    supportedMessage = fields.EmbeddedDocumentListField("CapabilityStatementMessagingSupportedMessage", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        endpoint = EmbeddedAttribute(type="CapabilityStatementMessagingEndpoint", getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        reliableCache = Attribute(getter="reliableCache", setter="reliableCache", searcher=NumericSearch("reliableCache"))
        supportedMessage = EmbeddedAttribute(type="CapabilityStatementMessagingSupportedMessage", getter="supportedMessage", setter="supportedMessage", searcher=StringSearch("supportedMessage"))

class CapabilityStatementMessagingEndpoint(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    address = fields.CharField(blank=False, required=True)
    protocol = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        address = Attribute(getter="address", setter="address", searcher=StringSearch("address"))
        protocol = EmbeddedAttribute(type="Coding", getter="protocol", setter="protocol", searcher=StringSearch("protocol"))

class CapabilityStatementMessagingSupportedMessage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    definition = fields.CharField(blank=False, required=True)
    mode = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))

class CapabilityStatementRest(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    compartment = fields.ListField(fields.CharField(), blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    interaction = fields.EmbeddedDocumentListField("CapabilityStatementRestInteraction", blank=True, required=False)
    mode = fields.CharField(blank=False, required=True)
    operation = fields.EmbeddedDocumentListField("CapabilityStatementRestResourceOperation", blank=True, required=False)
    resource = fields.EmbeddedDocumentListField("CapabilityStatementRestResource", blank=True, required=False)
    searchParam = fields.EmbeddedDocumentListField("CapabilityStatementRestResourceSearchParam", blank=True, required=False)
    security = fields.EmbeddedDocumentField("CapabilityStatementRestSecurity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        compartment = Attribute(getter="compartment", setter="compartment", searcher=StringSearch("compartment"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        interaction = EmbeddedAttribute(type="CapabilityStatementRestInteraction", getter="interaction", setter="interaction", searcher=StringSearch("interaction"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        operation = EmbeddedAttribute(type="CapabilityStatementRestResourceOperation", getter="operation", setter="operation", searcher=StringSearch("operation"))
        resource = EmbeddedAttribute(type="CapabilityStatementRestResource", getter="resource", setter="resource", searcher=StringSearch("resource"))
        searchParam = EmbeddedAttribute(type="CapabilityStatementRestResourceSearchParam", getter="searchParam", setter="searchParam", searcher=StringSearch("searchParam"))
        security = EmbeddedAttribute(type="CapabilityStatementRestSecurity", getter="security", setter="security", searcher=StringSearch("security"))

class CapabilityStatementRestInteraction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    documentation = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))

class CapabilityStatementRestResource(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    conditionalCreate = fields.BooleanField(blank=True, required=False)
    conditionalDelete = fields.CharField(blank=True, required=False)
    conditionalRead = fields.CharField(blank=True, required=False)
    conditionalUpdate = fields.BooleanField(blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    interaction = fields.EmbeddedDocumentListField("CapabilityStatementRestResourceInteraction", blank=True, required=False)
    operation = fields.EmbeddedDocumentListField("CapabilityStatementRestResourceOperation", blank=True, required=False)
    profile = fields.CharField(blank=True, required=False)
    readHistory = fields.BooleanField(blank=True, required=False)
    referencePolicy = fields.ListField(fields.CharField(), blank=True, required=False)
    searchInclude = fields.ListField(fields.CharField(), blank=True, required=False)
    searchParam = fields.EmbeddedDocumentListField("CapabilityStatementRestResourceSearchParam", blank=True, required=False)
    searchRevInclude = fields.ListField(fields.CharField(), blank=True, required=False)
    supportedProfile = fields.ListField(fields.CharField(), blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    updateCreate = fields.BooleanField(blank=True, required=False)
    versioning = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        conditionalCreate = Attribute(getter="conditionalCreate", setter="conditionalCreate", searcher=StringSearch("conditionalCreate"))
        conditionalDelete = Attribute(getter="conditionalDelete", setter="conditionalDelete", searcher=StringSearch("conditionalDelete"))
        conditionalRead = Attribute(getter="conditionalRead", setter="conditionalRead", searcher=StringSearch("conditionalRead"))
        conditionalUpdate = Attribute(getter="conditionalUpdate", setter="conditionalUpdate", searcher=StringSearch("conditionalUpdate"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        interaction = EmbeddedAttribute(type="CapabilityStatementRestResourceInteraction", getter="interaction", setter="interaction", searcher=StringSearch("interaction"))
        operation = EmbeddedAttribute(type="CapabilityStatementRestResourceOperation", getter="operation", setter="operation", searcher=StringSearch("operation"))
        profile = Attribute(getter="profile", setter="profile", searcher=StringSearch("profile"))
        readHistory = Attribute(getter="readHistory", setter="readHistory", searcher=StringSearch("readHistory"))
        referencePolicy = Attribute(getter="referencePolicy", setter="referencePolicy", searcher=StringSearch("referencePolicy"))
        searchInclude = Attribute(getter="searchInclude", setter="searchInclude", searcher=StringSearch("searchInclude"))
        searchParam = EmbeddedAttribute(type="CapabilityStatementRestResourceSearchParam", getter="searchParam", setter="searchParam", searcher=StringSearch("searchParam"))
        searchRevInclude = Attribute(getter="searchRevInclude", setter="searchRevInclude", searcher=StringSearch("searchRevInclude"))
        supportedProfile = Attribute(getter="supportedProfile", setter="supportedProfile", searcher=StringSearch("supportedProfile"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        updateCreate = Attribute(getter="updateCreate", setter="updateCreate", searcher=StringSearch("updateCreate"))
        versioning = Attribute(getter="versioning", setter="versioning", searcher=StringSearch("versioning"))

class CapabilityStatementRestResourceInteraction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    documentation = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))

class CapabilityStatementRestResourceOperation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    definition = fields.CharField(blank=False, required=True)
    documentation = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))

class CapabilityStatementRestResourceSearchParam(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    definition = fields.CharField(blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class CapabilityStatementRestSecurity(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    cors = fields.BooleanField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    service = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        cors = Attribute(getter="cors", setter="cors", searcher=StringSearch("cors"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        service = EmbeddedAttribute(type="CodeableConcept", getter="service", setter="service", searcher=StringSearch("service"))

class CapabilityStatementSoftware(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    releaseDate = fields.DateTimeField(blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        releaseDate = DateAttribute("releaseDate")
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class CarePlan(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    activity = fields.EmbeddedDocumentListField("CarePlanActivity", blank=True, required=False)
    addresses = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    author = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    careTeam = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    contributor = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    goal = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    instantiatesCanonical = fields.ListField(fields.CharField(), blank=True, required=False)
    instantiatesUri = fields.ListField(fields.CharField(), blank=True, required=False)
    intent = fields.CharField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    partOf = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    replaces = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    supportingInfo = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        activity = EmbeddedAttribute(type="CarePlanActivity", getter="activity", setter="activity", searcher=StringSearch("activity"))
        addresses = EmbeddedAttribute(type="FHIRReference", getter="addresses", setter="addresses", searcher=StringSearch("addresses"))
        author = EmbeddedAttribute(type="FHIRReference", getter="author", setter="author", searcher=StringSearch("author"))
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        careTeam = EmbeddedAttribute(type="FHIRReference", getter="careTeam", setter="careTeam", searcher=StringSearch("careTeam"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        contributor = EmbeddedAttribute(type="FHIRReference", getter="contributor", setter="contributor", searcher=StringSearch("contributor"))
        created = DateAttribute("created")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        goal = EmbeddedAttribute(type="FHIRReference", getter="goal", setter="goal", searcher=StringSearch("goal"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        instantiatesCanonical = Attribute(getter="instantiatesCanonical", setter="instantiatesCanonical", searcher=StringSearch("instantiatesCanonical"))
        instantiatesUri = Attribute(getter="instantiatesUri", setter="instantiatesUri", searcher=StringSearch("instantiatesUri"))
        intent = Attribute(getter="intent", setter="intent", searcher=StringSearch("intent"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        replaces = EmbeddedAttribute(type="FHIRReference", getter="replaces", setter="replaces", searcher=StringSearch("replaces"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        supportingInfo = EmbeddedAttribute(type="FHIRReference", getter="supportingInfo", setter="supportingInfo", searcher=StringSearch("supportingInfo"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))

class CarePlanActivity(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    detail = fields.EmbeddedDocumentField("CarePlanActivityDetail", blank=True, required=False)
    outcomeCodeableConcept = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    outcomeReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    progress = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    reference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        detail = EmbeddedAttribute(type="CarePlanActivityDetail", getter="detail", setter="detail", searcher=StringSearch("detail"))
        outcomeCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="outcomeCodeableConcept", setter="outcomeCodeableConcept", searcher=StringSearch("outcomeCodeableConcept"))
        outcomeReference = EmbeddedAttribute(type="FHIRReference", getter="outcomeReference", setter="outcomeReference", searcher=StringSearch("outcomeReference"))
        progress = EmbeddedAttribute(type="Annotation", getter="progress", setter="progress", searcher=StringSearch("progress"))
        reference = EmbeddedAttribute(type="FHIRReference", getter="reference", setter="reference", searcher=StringSearch("reference"))

class CarePlanActivityDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    dailyAmount = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    doNotPerform = fields.BooleanField(blank=True, required=False)
    goal = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    instantiatesCanonical = fields.ListField(fields.CharField(), blank=True, required=False)
    instantiatesUri = fields.ListField(fields.CharField(), blank=True, required=False)
    kind = fields.CharField(blank=True, required=False)
    location = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    performer = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    productCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    productReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    scheduledPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    scheduledString = fields.CharField(blank=True, required=False)
    scheduledTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        dailyAmount = EmbeddedAttribute(type="Quantity", getter="dailyAmount", setter="dailyAmount", searcher=StringSearch("dailyAmount"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        doNotPerform = Attribute(getter="doNotPerform", setter="doNotPerform", searcher=StringSearch("doNotPerform"))
        goal = EmbeddedAttribute(type="FHIRReference", getter="goal", setter="goal", searcher=StringSearch("goal"))
        instantiatesCanonical = Attribute(getter="instantiatesCanonical", setter="instantiatesCanonical", searcher=StringSearch("instantiatesCanonical"))
        instantiatesUri = Attribute(getter="instantiatesUri", setter="instantiatesUri", searcher=StringSearch("instantiatesUri"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))
        location = EmbeddedAttribute(type="FHIRReference", getter="location", setter="location", searcher=StringSearch("location"))
        performer = EmbeddedAttribute(type="FHIRReference", getter="performer", setter="performer", searcher=StringSearch("performer"))
        productCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="productCodeableConcept", setter="productCodeableConcept", searcher=StringSearch("productCodeableConcept"))
        productReference = EmbeddedAttribute(type="FHIRReference", getter="productReference", setter="productReference", searcher=StringSearch("productReference"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        scheduledPeriod = EmbeddedAttribute(type="Period", getter="scheduledPeriod", setter="scheduledPeriod", searcher=StringSearch("scheduledPeriod"))
        scheduledString = Attribute(getter="scheduledString", setter="scheduledString", searcher=StringSearch("scheduledString"))
        scheduledTiming = EmbeddedAttribute(type="Timing", getter="scheduledTiming", setter="scheduledTiming", searcher=StringSearch("scheduledTiming"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusReason = EmbeddedAttribute(type="CodeableConcept", getter="statusReason", setter="statusReason", searcher=StringSearch("statusReason"))

class CareTeam(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    managingOrganization = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    participant = fields.EmbeddedDocumentListField("CareTeamParticipant", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        managingOrganization = EmbeddedAttribute(type="FHIRReference", getter="managingOrganization", setter="managingOrganization", searcher=StringSearch("managingOrganization"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        participant = EmbeddedAttribute(type="CareTeamParticipant", getter="participant", setter="participant", searcher=StringSearch("participant"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class CareTeamParticipant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    member = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    onBehalfOf = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    role = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        member = EmbeddedAttribute(type="FHIRReference", getter="member", setter="member", searcher=StringSearch("member"))
        onBehalfOf = EmbeddedAttribute(type="FHIRReference", getter="onBehalfOf", setter="onBehalfOf", searcher=StringSearch("onBehalfOf"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class CatalogEntry(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    additionalCharacteristic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    additionalClassification = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    additionalIdentifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    classification = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    lastUpdated = fields.DateTimeField(blank=True, required=False)
    orderable = fields.BooleanField(blank=False, required=True)
    referencedItem = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    relatedEntry = fields.EmbeddedDocumentListField("CatalogEntryRelatedEntry", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    validTo = fields.DateTimeField(blank=True, required=False)
    validityPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        additionalCharacteristic = EmbeddedAttribute(type="CodeableConcept", getter="additionalCharacteristic", setter="additionalCharacteristic", searcher=StringSearch("additionalCharacteristic"))
        additionalClassification = EmbeddedAttribute(type="CodeableConcept", getter="additionalClassification", setter="additionalClassification", searcher=StringSearch("additionalClassification"))
        additionalIdentifier = EmbeddedAttribute(type="Identifier", getter="additionalIdentifier", setter="additionalIdentifier", searcher=StringSearch("additionalIdentifier"))
        classification = EmbeddedAttribute(type="CodeableConcept", getter="classification", setter="classification", searcher=StringSearch("classification"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        lastUpdated = DateAttribute("lastUpdated")
        orderable = Attribute(getter="orderable", setter="orderable", searcher=StringSearch("orderable"))
        referencedItem = EmbeddedAttribute(type="FHIRReference", getter="referencedItem", setter="referencedItem", searcher=StringSearch("referencedItem"))
        relatedEntry = EmbeddedAttribute(type="CatalogEntryRelatedEntry", getter="relatedEntry", setter="relatedEntry", searcher=StringSearch("relatedEntry"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        validTo = DateAttribute("validTo")
        validityPeriod = EmbeddedAttribute(type="Period", getter="validityPeriod", setter="validityPeriod", searcher=StringSearch("validityPeriod"))

class CatalogEntryRelatedEntry(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    item = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    relationtype = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        item = EmbeddedAttribute(type="FHIRReference", getter="item", setter="item", searcher=StringSearch("item"))
        relationtype = Attribute(getter="relationtype", setter="relationtype", searcher=StringSearch("relationtype"))

class ChargeItem(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    account = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    bodysite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    context = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    costCenter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    definitionCanonical = fields.ListField(fields.CharField(), blank=True, required=False)
    definitionUri = fields.ListField(fields.CharField(), blank=True, required=False)
    enteredDate = fields.DateTimeField(blank=True, required=False)
    enterer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    factorOverride = fields.FloatField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    occurrenceTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    overrideReason = fields.CharField(blank=True, required=False)
    partOf = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    performer = fields.EmbeddedDocumentListField("ChargeItemPerformer", blank=True, required=False)
    performingOrganization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    priceOverride = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    productCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    productReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    reason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    requestingOrganization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    service = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    supportingInformation = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        account = EmbeddedAttribute(type="FHIRReference", getter="account", setter="account", searcher=StringSearch("account"))
        bodysite = EmbeddedAttribute(type="CodeableConcept", getter="bodysite", setter="bodysite", searcher=StringSearch("bodysite"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        context = EmbeddedAttribute(type="FHIRReference", getter="context", setter="context", searcher=StringSearch("context"))
        costCenter = EmbeddedAttribute(type="FHIRReference", getter="costCenter", setter="costCenter", searcher=StringSearch("costCenter"))
        definitionCanonical = Attribute(getter="definitionCanonical", setter="definitionCanonical", searcher=StringSearch("definitionCanonical"))
        definitionUri = Attribute(getter="definitionUri", setter="definitionUri", searcher=StringSearch("definitionUri"))
        enteredDate = DateAttribute("enteredDate")
        enterer = EmbeddedAttribute(type="FHIRReference", getter="enterer", setter="enterer", searcher=StringSearch("enterer"))
        factorOverride = Attribute(getter="factorOverride", setter="factorOverride", searcher=NumericSearch("factorOverride"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        occurrenceTiming = EmbeddedAttribute(type="Timing", getter="occurrenceTiming", setter="occurrenceTiming", searcher=StringSearch("occurrenceTiming"))
        overrideReason = Attribute(getter="overrideReason", setter="overrideReason", searcher=StringSearch("overrideReason"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        performer = EmbeddedAttribute(type="ChargeItemPerformer", getter="performer", setter="performer", searcher=StringSearch("performer"))
        performingOrganization = EmbeddedAttribute(type="FHIRReference", getter="performingOrganization", setter="performingOrganization", searcher=StringSearch("performingOrganization"))
        priceOverride = EmbeddedAttribute(type="Money", getter="priceOverride", setter="priceOverride", searcher=StringSearch("priceOverride"))
        productCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="productCodeableConcept", setter="productCodeableConcept", searcher=StringSearch("productCodeableConcept"))
        productReference = EmbeddedAttribute(type="FHIRReference", getter="productReference", setter="productReference", searcher=StringSearch("productReference"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        requestingOrganization = EmbeddedAttribute(type="FHIRReference", getter="requestingOrganization", setter="requestingOrganization", searcher=StringSearch("requestingOrganization"))
        service = EmbeddedAttribute(type="FHIRReference", getter="service", setter="service", searcher=StringSearch("service"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        supportingInformation = EmbeddedAttribute(type="FHIRReference", getter="supportingInformation", setter="supportingInformation", searcher=StringSearch("supportingInformation"))

class ChargeItemDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    applicability = fields.EmbeddedDocumentListField("ChargeItemDefinitionApplicability", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    derivedFromUri = fields.ListField(fields.CharField(), blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    instance = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    partOf = fields.ListField(fields.CharField(), blank=True, required=False)
    propertyGroup = fields.EmbeddedDocumentListField("ChargeItemDefinitionPropertyGroup", blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    replaces = fields.ListField(fields.CharField(), blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=False, required=True)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        applicability = EmbeddedAttribute(type="ChargeItemDefinitionApplicability", getter="applicability", setter="applicability", searcher=StringSearch("applicability"))
        approvalDate = DateAttribute("approvalDate")
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        derivedFromUri = Attribute(getter="derivedFromUri", setter="derivedFromUri", searcher=StringSearch("derivedFromUri"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        instance = EmbeddedAttribute(type="FHIRReference", getter="instance", setter="instance", searcher=StringSearch("instance"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        partOf = Attribute(getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        propertyGroup = EmbeddedAttribute(type="ChargeItemDefinitionPropertyGroup", getter="propertyGroup", setter="propertyGroup", searcher=StringSearch("propertyGroup"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        replaces = Attribute(getter="replaces", setter="replaces", searcher=StringSearch("replaces"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ChargeItemDefinitionApplicability(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    expression = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))

class ChargeItemDefinitionPropertyGroup(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    applicability = fields.EmbeddedDocumentListField("ChargeItemDefinitionApplicability", blank=True, required=False)
    priceComponent = fields.EmbeddedDocumentListField("ChargeItemDefinitionPropertyGroupPriceComponent", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        applicability = EmbeddedAttribute(type="ChargeItemDefinitionApplicability", getter="applicability", setter="applicability", searcher=StringSearch("applicability"))
        priceComponent = EmbeddedAttribute(type="ChargeItemDefinitionPropertyGroupPriceComponent", getter="priceComponent", setter="priceComponent", searcher=StringSearch("priceComponent"))

class ChargeItemDefinitionPropertyGroupPriceComponent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="Money", getter="amount", setter="amount", searcher=StringSearch("amount"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class ChargeItemPerformer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    function = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = EmbeddedAttribute(type="FHIRReference", getter="actor", setter="actor", searcher=StringSearch("actor"))
        function = EmbeddedAttribute(type="CodeableConcept", getter="function", setter="function", searcher=StringSearch("function"))

class Claim(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    accident = fields.EmbeddedDocumentField("ClaimAccident", blank=True, required=False)
    billablePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    careTeam = fields.EmbeddedDocumentListField("ClaimCareTeam", blank=True, required=False)
    created = fields.DateTimeField(blank=False, required=True)
    diagnosis = fields.EmbeddedDocumentListField("ClaimDiagnosis", blank=True, required=False)
    enterer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    facility = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    fundsReserve = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    insurance = fields.EmbeddedDocumentListField("ClaimInsurance", blank=False, required=True)
    insurer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    item = fields.EmbeddedDocumentListField("ClaimItem", blank=True, required=False)
    originalPrescription = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    payee = fields.EmbeddedDocumentField("ClaimPayee", blank=True, required=False)
    prescription = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    priority = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    procedure = fields.EmbeddedDocumentListField("ClaimProcedure", blank=True, required=False)
    provider = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    referral = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    related = fields.EmbeddedDocumentListField("ClaimRelated", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    supportingInfo = fields.EmbeddedDocumentListField("ClaimSupportingInfo", blank=True, required=False)
    total = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    use = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        accident = EmbeddedAttribute(type="ClaimAccident", getter="accident", setter="accident", searcher=StringSearch("accident"))
        billablePeriod = EmbeddedAttribute(type="Period", getter="billablePeriod", setter="billablePeriod", searcher=StringSearch("billablePeriod"))
        careTeam = EmbeddedAttribute(type="ClaimCareTeam", getter="careTeam", setter="careTeam", searcher=StringSearch("careTeam"))
        created = DateAttribute("created")
        diagnosis = EmbeddedAttribute(type="ClaimDiagnosis", getter="diagnosis", setter="diagnosis", searcher=StringSearch("diagnosis"))
        enterer = EmbeddedAttribute(type="FHIRReference", getter="enterer", setter="enterer", searcher=StringSearch("enterer"))
        facility = EmbeddedAttribute(type="FHIRReference", getter="facility", setter="facility", searcher=StringSearch("facility"))
        fundsReserve = EmbeddedAttribute(type="CodeableConcept", getter="fundsReserve", setter="fundsReserve", searcher=StringSearch("fundsReserve"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        insurance = EmbeddedAttribute(type="ClaimInsurance", getter="insurance", setter="insurance", searcher=StringSearch("insurance"))
        insurer = EmbeddedAttribute(type="FHIRReference", getter="insurer", setter="insurer", searcher=StringSearch("insurer"))
        item = EmbeddedAttribute(type="ClaimItem", getter="item", setter="item", searcher=StringSearch("item"))
        originalPrescription = EmbeddedAttribute(type="FHIRReference", getter="originalPrescription", setter="originalPrescription", searcher=StringSearch("originalPrescription"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        payee = EmbeddedAttribute(type="ClaimPayee", getter="payee", setter="payee", searcher=StringSearch("payee"))
        prescription = EmbeddedAttribute(type="FHIRReference", getter="prescription", setter="prescription", searcher=StringSearch("prescription"))
        priority = EmbeddedAttribute(type="CodeableConcept", getter="priority", setter="priority", searcher=StringSearch("priority"))
        procedure = EmbeddedAttribute(type="ClaimProcedure", getter="procedure", setter="procedure", searcher=StringSearch("procedure"))
        provider = EmbeddedAttribute(type="FHIRReference", getter="provider", setter="provider", searcher=StringSearch("provider"))
        referral = EmbeddedAttribute(type="FHIRReference", getter="referral", setter="referral", searcher=StringSearch("referral"))
        related = EmbeddedAttribute(type="ClaimRelated", getter="related", setter="related", searcher=StringSearch("related"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subType = EmbeddedAttribute(type="CodeableConcept", getter="subType", setter="subType", searcher=StringSearch("subType"))
        supportingInfo = EmbeddedAttribute(type="ClaimSupportingInfo", getter="supportingInfo", setter="supportingInfo", searcher=StringSearch("supportingInfo"))
        total = EmbeddedAttribute(type="Money", getter="total", setter="total", searcher=StringSearch("total"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))

class ClaimAccident(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    date = fields.DateTimeField(blank=False, required=True)
    locationAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    locationReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        date = DateAttribute("date")
        locationAddress = EmbeddedAttribute(type="Address", getter="locationAddress", setter="locationAddress", searcher=StringSearch("locationAddress"))
        locationReference = EmbeddedAttribute(type="FHIRReference", getter="locationReference", setter="locationReference", searcher=StringSearch("locationReference"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ClaimCareTeam(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    provider = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    qualification = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    responsible = fields.BooleanField(blank=True, required=False)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        provider = EmbeddedAttribute(type="FHIRReference", getter="provider", setter="provider", searcher=StringSearch("provider"))
        qualification = EmbeddedAttribute(type="CodeableConcept", getter="qualification", setter="qualification", searcher=StringSearch("qualification"))
        responsible = Attribute(getter="responsible", setter="responsible", searcher=StringSearch("responsible"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))

class ClaimDiagnosis(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    diagnosisCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    diagnosisReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    onAdmission = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    packageCode = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        diagnosisCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="diagnosisCodeableConcept", setter="diagnosisCodeableConcept", searcher=StringSearch("diagnosisCodeableConcept"))
        diagnosisReference = EmbeddedAttribute(type="FHIRReference", getter="diagnosisReference", setter="diagnosisReference", searcher=StringSearch("diagnosisReference"))
        onAdmission = EmbeddedAttribute(type="CodeableConcept", getter="onAdmission", setter="onAdmission", searcher=StringSearch("onAdmission"))
        packageCode = EmbeddedAttribute(type="CodeableConcept", getter="packageCode", setter="packageCode", searcher=StringSearch("packageCode"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ClaimInsurance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    businessArrangement = fields.CharField(blank=True, required=False)
    claimResponse = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    coverage = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    focal = fields.BooleanField(blank=False, required=True)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    preAuthRef = fields.ListField(fields.CharField(), blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        businessArrangement = Attribute(getter="businessArrangement", setter="businessArrangement", searcher=StringSearch("businessArrangement"))
        claimResponse = EmbeddedAttribute(type="FHIRReference", getter="claimResponse", setter="claimResponse", searcher=StringSearch("claimResponse"))
        coverage = EmbeddedAttribute(type="FHIRReference", getter="coverage", setter="coverage", searcher=StringSearch("coverage"))
        focal = Attribute(getter="focal", setter="focal", searcher=StringSearch("focal"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        preAuthRef = Attribute(getter="preAuthRef", setter="preAuthRef", searcher=StringSearch("preAuthRef"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))

class ClaimItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    careTeamSequence = fields.ListField(fields.IntegerField(), blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    detail = fields.EmbeddedDocumentListField("ClaimItemDetail", blank=True, required=False)
    diagnosisSequence = fields.ListField(fields.IntegerField(), blank=True, required=False)
    encounter = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    informationSequence = fields.ListField(fields.IntegerField(), blank=True, required=False)
    locationAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    locationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    locationReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    procedureSequence = fields.ListField(fields.IntegerField(), blank=True, required=False)
    productOrService = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    programCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    revenue = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    servicedDate = fields.DateTimeField(blank=True, required=False)
    servicedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    subSite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    udi = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        careTeamSequence = Attribute(getter="careTeamSequence", setter="careTeamSequence", searcher=NumericSearch("careTeamSequence"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        detail = EmbeddedAttribute(type="ClaimItemDetail", getter="detail", setter="detail", searcher=StringSearch("detail"))
        diagnosisSequence = Attribute(getter="diagnosisSequence", setter="diagnosisSequence", searcher=NumericSearch("diagnosisSequence"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        informationSequence = Attribute(getter="informationSequence", setter="informationSequence", searcher=NumericSearch("informationSequence"))
        locationAddress = EmbeddedAttribute(type="Address", getter="locationAddress", setter="locationAddress", searcher=StringSearch("locationAddress"))
        locationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="locationCodeableConcept", setter="locationCodeableConcept", searcher=StringSearch("locationCodeableConcept"))
        locationReference = EmbeddedAttribute(type="FHIRReference", getter="locationReference", setter="locationReference", searcher=StringSearch("locationReference"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        procedureSequence = Attribute(getter="procedureSequence", setter="procedureSequence", searcher=NumericSearch("procedureSequence"))
        productOrService = EmbeddedAttribute(type="CodeableConcept", getter="productOrService", setter="productOrService", searcher=StringSearch("productOrService"))
        programCode = EmbeddedAttribute(type="CodeableConcept", getter="programCode", setter="programCode", searcher=StringSearch("programCode"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        revenue = EmbeddedAttribute(type="CodeableConcept", getter="revenue", setter="revenue", searcher=StringSearch("revenue"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        servicedDate = DateAttribute("servicedDate")
        servicedPeriod = EmbeddedAttribute(type="Period", getter="servicedPeriod", setter="servicedPeriod", searcher=StringSearch("servicedPeriod"))
        subSite = EmbeddedAttribute(type="CodeableConcept", getter="subSite", setter="subSite", searcher=StringSearch("subSite"))
        udi = EmbeddedAttribute(type="FHIRReference", getter="udi", setter="udi", searcher=StringSearch("udi"))
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ClaimItemDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    productOrService = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    programCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    revenue = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    subDetail = fields.EmbeddedDocumentListField("ClaimItemDetailSubDetail", blank=True, required=False)
    udi = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        productOrService = EmbeddedAttribute(type="CodeableConcept", getter="productOrService", setter="productOrService", searcher=StringSearch("productOrService"))
        programCode = EmbeddedAttribute(type="CodeableConcept", getter="programCode", setter="programCode", searcher=StringSearch("programCode"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        revenue = EmbeddedAttribute(type="CodeableConcept", getter="revenue", setter="revenue", searcher=StringSearch("revenue"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        subDetail = EmbeddedAttribute(type="ClaimItemDetailSubDetail", getter="subDetail", setter="subDetail", searcher=StringSearch("subDetail"))
        udi = EmbeddedAttribute(type="FHIRReference", getter="udi", setter="udi", searcher=StringSearch("udi"))
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ClaimItemDetailSubDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    productOrService = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    programCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    revenue = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    udi = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        productOrService = EmbeddedAttribute(type="CodeableConcept", getter="productOrService", setter="productOrService", searcher=StringSearch("productOrService"))
        programCode = EmbeddedAttribute(type="CodeableConcept", getter="programCode", setter="programCode", searcher=StringSearch("programCode"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        revenue = EmbeddedAttribute(type="CodeableConcept", getter="revenue", setter="revenue", searcher=StringSearch("revenue"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        udi = EmbeddedAttribute(type="FHIRReference", getter="udi", setter="udi", searcher=StringSearch("udi"))
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ClaimPayee(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    party = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        party = EmbeddedAttribute(type="FHIRReference", getter="party", setter="party", searcher=StringSearch("party"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ClaimProcedure(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    procedureCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    procedureReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    udi = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        date = DateAttribute("date")
        procedureCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="procedureCodeableConcept", setter="procedureCodeableConcept", searcher=StringSearch("procedureCodeableConcept"))
        procedureReference = EmbeddedAttribute(type="FHIRReference", getter="procedureReference", setter="procedureReference", searcher=StringSearch("procedureReference"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        udi = EmbeddedAttribute(type="FHIRReference", getter="udi", setter="udi", searcher=StringSearch("udi"))

class ClaimRelated(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    claim = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    reference = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    relationship = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        claim = EmbeddedAttribute(type="FHIRReference", getter="claim", setter="claim", searcher=StringSearch("claim"))
        reference = EmbeddedAttribute(type="Identifier", getter="reference", setter="reference", searcher=StringSearch("reference"))
        relationship = EmbeddedAttribute(type="CodeableConcept", getter="relationship", setter="relationship", searcher=StringSearch("relationship"))

class ClaimResponse(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    addItem = fields.EmbeddedDocumentListField("ClaimResponseAddItem", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ClaimResponseItemAdjudication", blank=True, required=False)
    communicationRequest = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    created = fields.DateTimeField(blank=False, required=True)
    disposition = fields.CharField(blank=True, required=False)
    error = fields.EmbeddedDocumentListField("ClaimResponseError", blank=True, required=False)
    form = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    formCode = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    fundsReserve = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    insurance = fields.EmbeddedDocumentListField("ClaimResponseInsurance", blank=True, required=False)
    insurer = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    item = fields.EmbeddedDocumentListField("ClaimResponseItem", blank=True, required=False)
    outcome = fields.CharField(blank=False, required=True)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    payeeType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    payment = fields.EmbeddedDocumentField("ClaimResponsePayment", blank=True, required=False)
    preAuthPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    preAuthRef = fields.CharField(blank=True, required=False)
    processNote = fields.EmbeddedDocumentListField("ClaimResponseProcessNote", blank=True, required=False)
    request = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    requestor = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    total = fields.EmbeddedDocumentListField("ClaimResponseTotal", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    use = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        addItem = EmbeddedAttribute(type="ClaimResponseAddItem", getter="addItem", setter="addItem", searcher=StringSearch("addItem"))
        adjudication = EmbeddedAttribute(type="ClaimResponseItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        communicationRequest = EmbeddedAttribute(type="FHIRReference", getter="communicationRequest", setter="communicationRequest", searcher=StringSearch("communicationRequest"))
        created = DateAttribute("created")
        disposition = Attribute(getter="disposition", setter="disposition", searcher=StringSearch("disposition"))
        error = EmbeddedAttribute(type="ClaimResponseError", getter="error", setter="error", searcher=StringSearch("error"))
        form = EmbeddedAttribute(type="Attachment", getter="form", setter="form", searcher=StringSearch("form"))
        formCode = EmbeddedAttribute(type="CodeableConcept", getter="formCode", setter="formCode", searcher=StringSearch("formCode"))
        fundsReserve = EmbeddedAttribute(type="CodeableConcept", getter="fundsReserve", setter="fundsReserve", searcher=StringSearch("fundsReserve"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        insurance = EmbeddedAttribute(type="ClaimResponseInsurance", getter="insurance", setter="insurance", searcher=StringSearch("insurance"))
        insurer = EmbeddedAttribute(type="FHIRReference", getter="insurer", setter="insurer", searcher=StringSearch("insurer"))
        item = EmbeddedAttribute(type="ClaimResponseItem", getter="item", setter="item", searcher=StringSearch("item"))
        outcome = Attribute(getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        payeeType = EmbeddedAttribute(type="CodeableConcept", getter="payeeType", setter="payeeType", searcher=StringSearch("payeeType"))
        payment = EmbeddedAttribute(type="ClaimResponsePayment", getter="payment", setter="payment", searcher=StringSearch("payment"))
        preAuthPeriod = EmbeddedAttribute(type="Period", getter="preAuthPeriod", setter="preAuthPeriod", searcher=StringSearch("preAuthPeriod"))
        preAuthRef = Attribute(getter="preAuthRef", setter="preAuthRef", searcher=StringSearch("preAuthRef"))
        processNote = EmbeddedAttribute(type="ClaimResponseProcessNote", getter="processNote", setter="processNote", searcher=StringSearch("processNote"))
        request = EmbeddedAttribute(type="FHIRReference", getter="request", setter="request", searcher=StringSearch("request"))
        requestor = EmbeddedAttribute(type="FHIRReference", getter="requestor", setter="requestor", searcher=StringSearch("requestor"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subType = EmbeddedAttribute(type="CodeableConcept", getter="subType", setter="subType", searcher=StringSearch("subType"))
        total = EmbeddedAttribute(type="ClaimResponseTotal", getter="total", setter="total", searcher=StringSearch("total"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))

class ClaimResponseAddItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ClaimResponseItemAdjudication", blank=False, required=True)
    bodySite = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    detail = fields.EmbeddedDocumentListField("ClaimResponseAddItemDetail", blank=True, required=False)
    detailSequence = fields.ListField(fields.IntegerField(), blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    itemSequence = fields.ListField(fields.IntegerField(), blank=True, required=False)
    locationAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    locationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    locationReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    productOrService = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    programCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    provider = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    servicedDate = fields.DateTimeField(blank=True, required=False)
    servicedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    subSite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    subdetailSequence = fields.ListField(fields.IntegerField(), blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ClaimResponseItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        detail = EmbeddedAttribute(type="ClaimResponseAddItemDetail", getter="detail", setter="detail", searcher=StringSearch("detail"))
        detailSequence = Attribute(getter="detailSequence", setter="detailSequence", searcher=NumericSearch("detailSequence"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        itemSequence = Attribute(getter="itemSequence", setter="itemSequence", searcher=NumericSearch("itemSequence"))
        locationAddress = EmbeddedAttribute(type="Address", getter="locationAddress", setter="locationAddress", searcher=StringSearch("locationAddress"))
        locationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="locationCodeableConcept", setter="locationCodeableConcept", searcher=StringSearch("locationCodeableConcept"))
        locationReference = EmbeddedAttribute(type="FHIRReference", getter="locationReference", setter="locationReference", searcher=StringSearch("locationReference"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        productOrService = EmbeddedAttribute(type="CodeableConcept", getter="productOrService", setter="productOrService", searcher=StringSearch("productOrService"))
        programCode = EmbeddedAttribute(type="CodeableConcept", getter="programCode", setter="programCode", searcher=StringSearch("programCode"))
        provider = EmbeddedAttribute(type="FHIRReference", getter="provider", setter="provider", searcher=StringSearch("provider"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        servicedDate = DateAttribute("servicedDate")
        servicedPeriod = EmbeddedAttribute(type="Period", getter="servicedPeriod", setter="servicedPeriod", searcher=StringSearch("servicedPeriod"))
        subSite = EmbeddedAttribute(type="CodeableConcept", getter="subSite", setter="subSite", searcher=StringSearch("subSite"))
        subdetailSequence = Attribute(getter="subdetailSequence", setter="subdetailSequence", searcher=NumericSearch("subdetailSequence"))
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ClaimResponseAddItemDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ClaimResponseItemAdjudication", blank=False, required=True)
    factor = fields.FloatField(blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    productOrService = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    subDetail = fields.EmbeddedDocumentListField("ClaimResponseAddItemDetailSubDetail", blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ClaimResponseItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        productOrService = EmbeddedAttribute(type="CodeableConcept", getter="productOrService", setter="productOrService", searcher=StringSearch("productOrService"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        subDetail = EmbeddedAttribute(type="ClaimResponseAddItemDetailSubDetail", getter="subDetail", setter="subDetail", searcher=StringSearch("subDetail"))
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ClaimResponseAddItemDetailSubDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ClaimResponseItemAdjudication", blank=False, required=True)
    factor = fields.FloatField(blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    productOrService = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ClaimResponseItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        productOrService = EmbeddedAttribute(type="CodeableConcept", getter="productOrService", setter="productOrService", searcher=StringSearch("productOrService"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ClaimResponseError(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    detailSequence = fields.IntegerField(blank=True, required=False)
    itemSequence = fields.IntegerField(blank=True, required=False)
    subDetailSequence = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        detailSequence = Attribute(getter="detailSequence", setter="detailSequence", searcher=NumericSearch("detailSequence"))
        itemSequence = Attribute(getter="itemSequence", setter="itemSequence", searcher=NumericSearch("itemSequence"))
        subDetailSequence = Attribute(getter="subDetailSequence", setter="subDetailSequence", searcher=NumericSearch("subDetailSequence"))

class ClaimResponseInsurance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    businessArrangement = fields.CharField(blank=True, required=False)
    claimResponse = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    coverage = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    focal = fields.BooleanField(blank=False, required=True)
    sequence = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        businessArrangement = Attribute(getter="businessArrangement", setter="businessArrangement", searcher=StringSearch("businessArrangement"))
        claimResponse = EmbeddedAttribute(type="FHIRReference", getter="claimResponse", setter="claimResponse", searcher=StringSearch("claimResponse"))
        coverage = EmbeddedAttribute(type="FHIRReference", getter="coverage", setter="coverage", searcher=StringSearch("coverage"))
        focal = Attribute(getter="focal", setter="focal", searcher=StringSearch("focal"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))

class ClaimResponseItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ClaimResponseItemAdjudication", blank=False, required=True)
    detail = fields.EmbeddedDocumentListField("ClaimResponseItemDetail", blank=True, required=False)
    itemSequence = fields.IntegerField(blank=False, required=True)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ClaimResponseItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        detail = EmbeddedAttribute(type="ClaimResponseItemDetail", getter="detail", setter="detail", searcher=StringSearch("detail"))
        itemSequence = Attribute(getter="itemSequence", setter="itemSequence", searcher=NumericSearch("itemSequence"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))

class ClaimResponseItemAdjudication(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    reason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="Money", getter="amount", setter="amount", searcher=StringSearch("amount"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class ClaimResponseItemDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ClaimResponseItemAdjudication", blank=False, required=True)
    detailSequence = fields.IntegerField(blank=False, required=True)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    subDetail = fields.EmbeddedDocumentListField("ClaimResponseItemDetailSubDetail", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ClaimResponseItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        detailSequence = Attribute(getter="detailSequence", setter="detailSequence", searcher=NumericSearch("detailSequence"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        subDetail = EmbeddedAttribute(type="ClaimResponseItemDetailSubDetail", getter="subDetail", setter="subDetail", searcher=StringSearch("subDetail"))

class ClaimResponseItemDetailSubDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ClaimResponseItemAdjudication", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    subDetailSequence = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ClaimResponseItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        subDetailSequence = Attribute(getter="subDetailSequence", setter="subDetailSequence", searcher=NumericSearch("subDetailSequence"))

class ClaimResponsePayment(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjustment = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    adjustmentReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Money", blank=False, required=True)
    date = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjustment = EmbeddedAttribute(type="Money", getter="adjustment", setter="adjustment", searcher=StringSearch("adjustment"))
        adjustmentReason = EmbeddedAttribute(type="CodeableConcept", getter="adjustmentReason", setter="adjustmentReason", searcher=StringSearch("adjustmentReason"))
        amount = EmbeddedAttribute(type="Money", getter="amount", setter="amount", searcher=StringSearch("amount"))
        date = DateAttribute("date")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ClaimResponseProcessNote(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    language = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    number = fields.IntegerField(blank=True, required=False)
    text = fields.CharField(blank=False, required=True)
    type = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        language = EmbeddedAttribute(type="CodeableConcept", getter="language", setter="language", searcher=StringSearch("language"))
        number = Attribute(getter="number", setter="number", searcher=NumericSearch("number"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class ClaimResponseTotal(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Money", blank=False, required=True)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="Money", getter="amount", setter="amount", searcher=StringSearch("amount"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))

class ClaimSupportingInfo(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    reason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    timingDate = fields.DateTimeField(blank=True, required=False)
    timingPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        timingDate = DateAttribute("timingDate")
        timingPeriod = EmbeddedAttribute(type="Period", getter="timingPeriod", setter="timingPeriod", searcher=StringSearch("timingPeriod"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueReference = EmbeddedAttribute(type="FHIRReference", getter="valueReference", setter="valueReference", searcher=StringSearch("valueReference"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))

class ClinicalImpression(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    assessor = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    effectiveDateTime = fields.DateTimeField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    finding = fields.EmbeddedDocumentListField("ClinicalImpressionFinding", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    investigation = fields.EmbeddedDocumentListField("ClinicalImpressionInvestigation", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    previous = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    problem = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    prognosisCodeableConcept = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    prognosisReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    protocol = fields.ListField(fields.CharField(), blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    summary = fields.CharField(blank=True, required=False)
    supportingInfo = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        assessor = EmbeddedAttribute(type="FHIRReference", getter="assessor", setter="assessor", searcher=StringSearch("assessor"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        effectiveDateTime = DateAttribute("effectiveDateTime")
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        finding = EmbeddedAttribute(type="ClinicalImpressionFinding", getter="finding", setter="finding", searcher=StringSearch("finding"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        investigation = EmbeddedAttribute(type="ClinicalImpressionInvestigation", getter="investigation", setter="investigation", searcher=StringSearch("investigation"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        previous = EmbeddedAttribute(type="FHIRReference", getter="previous", setter="previous", searcher=StringSearch("previous"))
        problem = EmbeddedAttribute(type="FHIRReference", getter="problem", setter="problem", searcher=StringSearch("problem"))
        prognosisCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="prognosisCodeableConcept", setter="prognosisCodeableConcept", searcher=StringSearch("prognosisCodeableConcept"))
        prognosisReference = EmbeddedAttribute(type="FHIRReference", getter="prognosisReference", setter="prognosisReference", searcher=StringSearch("prognosisReference"))
        protocol = Attribute(getter="protocol", setter="protocol", searcher=StringSearch("protocol"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusReason = EmbeddedAttribute(type="CodeableConcept", getter="statusReason", setter="statusReason", searcher=StringSearch("statusReason"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        summary = Attribute(getter="summary", setter="summary", searcher=StringSearch("summary"))
        supportingInfo = EmbeddedAttribute(type="FHIRReference", getter="supportingInfo", setter="supportingInfo", searcher=StringSearch("supportingInfo"))

class ClinicalImpressionFinding(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    basis = fields.CharField(blank=True, required=False)
    itemCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    itemReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        basis = Attribute(getter="basis", setter="basis", searcher=StringSearch("basis"))
        itemCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="itemCodeableConcept", setter="itemCodeableConcept", searcher=StringSearch("itemCodeableConcept"))
        itemReference = EmbeddedAttribute(type="FHIRReference", getter="itemReference", setter="itemReference", searcher=StringSearch("itemReference"))

class ClinicalImpressionInvestigation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    item = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        item = EmbeddedAttribute(type="FHIRReference", getter="item", setter="item", searcher=StringSearch("item"))

class CodeSystem(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    caseSensitive = fields.BooleanField(blank=True, required=False)
    compositional = fields.BooleanField(blank=True, required=False)
    concept = fields.EmbeddedDocumentListField("CodeSystemConcept", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    content = fields.CharField(blank=False, required=True)
    copyright = fields.CharField(blank=True, required=False)
    count = fields.IntegerField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    filter = fields.EmbeddedDocumentListField("CodeSystemFilter", blank=True, required=False)
    hierarchyMeaning = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    property = fields.EmbeddedDocumentListField("CodeSystemProperty", blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    supplements = fields.CharField(blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    valueSet = fields.CharField(blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    versionNeeded = fields.BooleanField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        caseSensitive = Attribute(getter="caseSensitive", setter="caseSensitive", searcher=StringSearch("caseSensitive"))
        compositional = Attribute(getter="compositional", setter="compositional", searcher=StringSearch("compositional"))
        concept = EmbeddedAttribute(type="CodeSystemConcept", getter="concept", setter="concept", searcher=StringSearch("concept"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        content = Attribute(getter="content", setter="content", searcher=StringSearch("content"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        count = Attribute(getter="count", setter="count", searcher=NumericSearch("count"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        filter = EmbeddedAttribute(type="CodeSystemFilter", getter="filter", setter="filter", searcher=StringSearch("filter"))
        hierarchyMeaning = Attribute(getter="hierarchyMeaning", setter="hierarchyMeaning", searcher=StringSearch("hierarchyMeaning"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        property = EmbeddedAttribute(type="CodeSystemProperty", getter="property", setter="property", searcher=StringSearch("property"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        supplements = Attribute(getter="supplements", setter="supplements", searcher=StringSearch("supplements"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        valueSet = Attribute(getter="valueSet", setter="valueSet", searcher=StringSearch("valueSet"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))
        versionNeeded = Attribute(getter="versionNeeded", setter="versionNeeded", searcher=StringSearch("versionNeeded"))

class CodeSystemConcept(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    definition = fields.CharField(blank=True, required=False)
    designation = fields.EmbeddedDocumentListField("CodeSystemConceptDesignation", blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    property = fields.EmbeddedDocumentListField("CodeSystemConceptProperty", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        designation = EmbeddedAttribute(type="CodeSystemConceptDesignation", getter="designation", setter="designation", searcher=StringSearch("designation"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        property = EmbeddedAttribute(type="CodeSystemConceptProperty", getter="property", setter="property", searcher=StringSearch("property"))

class CodeSystemConceptDesignation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    use = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        use = EmbeddedAttribute(type="Coding", getter="use", setter="use", searcher=StringSearch("use"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class CodeSystemConceptProperty(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCode = fields.CharField(blank=True, required=False)
    valueCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valueDecimal = fields.FloatField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCode = Attribute(getter="valueCode", setter="valueCode", searcher=StringSearch("valueCode"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueDateTime = DateAttribute("valueDateTime")
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))

class CodeSystemFilter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    operator = fields.ListField(fields.CharField(), blank=False, required=True)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        operator = Attribute(getter="operator", setter="operator", searcher=StringSearch("operator"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class CodeSystemProperty(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    uri = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        uri = Attribute(getter="uri", setter="uri", searcher=StringSearch("uri"))

class CodeableConcept(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    coding = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        coding = EmbeddedAttribute(type="Coding", getter="coding", setter="coding", searcher=StringSearch("coding"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))

class Coding(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    userSelected = fields.BooleanField(blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        userSelected = Attribute(getter="userSelected", setter="userSelected", searcher=StringSearch("userSelected"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class Communication(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    about = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    inResponseTo = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    instantiatesCanonical = fields.ListField(fields.CharField(), blank=True, required=False)
    instantiatesUri = fields.ListField(fields.CharField(), blank=True, required=False)
    medium = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    partOf = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    payload = fields.EmbeddedDocumentListField("CommunicationPayload", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    received = fields.DateTimeField(blank=True, required=False)
    recipient = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    sender = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    sent = fields.DateTimeField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    topic = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        about = EmbeddedAttribute(type="FHIRReference", getter="about", setter="about", searcher=StringSearch("about"))
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        inResponseTo = EmbeddedAttribute(type="FHIRReference", getter="inResponseTo", setter="inResponseTo", searcher=StringSearch("inResponseTo"))
        instantiatesCanonical = Attribute(getter="instantiatesCanonical", setter="instantiatesCanonical", searcher=StringSearch("instantiatesCanonical"))
        instantiatesUri = Attribute(getter="instantiatesUri", setter="instantiatesUri", searcher=StringSearch("instantiatesUri"))
        medium = EmbeddedAttribute(type="CodeableConcept", getter="medium", setter="medium", searcher=StringSearch("medium"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        payload = EmbeddedAttribute(type="CommunicationPayload", getter="payload", setter="payload", searcher=StringSearch("payload"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        received = DateAttribute("received")
        recipient = EmbeddedAttribute(type="FHIRReference", getter="recipient", setter="recipient", searcher=StringSearch("recipient"))
        sender = EmbeddedAttribute(type="FHIRReference", getter="sender", setter="sender", searcher=StringSearch("sender"))
        sent = DateAttribute("sent")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusReason = EmbeddedAttribute(type="CodeableConcept", getter="statusReason", setter="statusReason", searcher=StringSearch("statusReason"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))

class CommunicationPayload(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    contentAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    contentReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    contentString = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        contentAttachment = EmbeddedAttribute(type="Attachment", getter="contentAttachment", setter="contentAttachment", searcher=StringSearch("contentAttachment"))
        contentReference = EmbeddedAttribute(type="FHIRReference", getter="contentReference", setter="contentReference", searcher=StringSearch("contentReference"))
        contentString = Attribute(getter="contentString", setter="contentString", searcher=StringSearch("contentString"))

class CommunicationRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    about = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    doNotPerform = fields.BooleanField(blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    groupIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    medium = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    payload = fields.EmbeddedDocumentListField("CommunicationRequestPayload", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    recipient = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    replaces = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    requester = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    sender = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        about = EmbeddedAttribute(type="FHIRReference", getter="about", setter="about", searcher=StringSearch("about"))
        authoredOn = DateAttribute("authoredOn")
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        doNotPerform = Attribute(getter="doNotPerform", setter="doNotPerform", searcher=StringSearch("doNotPerform"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        groupIdentifier = EmbeddedAttribute(type="Identifier", getter="groupIdentifier", setter="groupIdentifier", searcher=StringSearch("groupIdentifier"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        medium = EmbeddedAttribute(type="CodeableConcept", getter="medium", setter="medium", searcher=StringSearch("medium"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        payload = EmbeddedAttribute(type="CommunicationRequestPayload", getter="payload", setter="payload", searcher=StringSearch("payload"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        recipient = EmbeddedAttribute(type="FHIRReference", getter="recipient", setter="recipient", searcher=StringSearch("recipient"))
        replaces = EmbeddedAttribute(type="FHIRReference", getter="replaces", setter="replaces", searcher=StringSearch("replaces"))
        requester = EmbeddedAttribute(type="FHIRReference", getter="requester", setter="requester", searcher=StringSearch("requester"))
        sender = EmbeddedAttribute(type="FHIRReference", getter="sender", setter="sender", searcher=StringSearch("sender"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusReason = EmbeddedAttribute(type="CodeableConcept", getter="statusReason", setter="statusReason", searcher=StringSearch("statusReason"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))

class CommunicationRequestPayload(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    contentAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    contentReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    contentString = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        contentAttachment = EmbeddedAttribute(type="Attachment", getter="contentAttachment", setter="contentAttachment", searcher=StringSearch("contentAttachment"))
        contentReference = EmbeddedAttribute(type="FHIRReference", getter="contentReference", setter="contentReference", searcher=StringSearch("contentReference"))
        contentString = Attribute(getter="contentString", setter="contentString", searcher=StringSearch("contentString"))

class CompartmentDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    resource = fields.EmbeddedDocumentListField("CompartmentDefinitionResource", blank=True, required=False)
    search = fields.BooleanField(blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=False, required=True)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        resource = EmbeddedAttribute(type="CompartmentDefinitionResource", getter="resource", setter="resource", searcher=StringSearch("resource"))
        search = Attribute(getter="search", setter="search", searcher=StringSearch("search"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class CompartmentDefinitionResource(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    documentation = fields.CharField(blank=True, required=False)
    param = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        param = Attribute(getter="param", setter="param", searcher=StringSearch("param"))

class Composition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    attester = fields.EmbeddedDocumentListField("CompositionAttester", blank=True, required=False)
    author = fields.EmbeddedDocumentListField("FHIRReference", blank=False, required=True)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    confidentiality = fields.CharField(blank=True, required=False)
    custodian = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    date = fields.DateTimeField(blank=False, required=True)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    event = fields.EmbeddedDocumentListField("CompositionEvent", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    relatesTo = fields.EmbeddedDocumentListField("CompositionRelatesTo", blank=True, required=False)
    section = fields.EmbeddedDocumentListField("CompositionSection", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    title = fields.CharField(blank=False, required=True)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        attester = EmbeddedAttribute(type="CompositionAttester", getter="attester", setter="attester", searcher=StringSearch("attester"))
        author = EmbeddedAttribute(type="FHIRReference", getter="author", setter="author", searcher=StringSearch("author"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        confidentiality = Attribute(getter="confidentiality", setter="confidentiality", searcher=StringSearch("confidentiality"))
        custodian = EmbeddedAttribute(type="FHIRReference", getter="custodian", setter="custodian", searcher=StringSearch("custodian"))
        date = DateAttribute("date")
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        event = EmbeddedAttribute(type="CompositionEvent", getter="event", setter="event", searcher=StringSearch("event"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        relatesTo = EmbeddedAttribute(type="CompositionRelatesTo", getter="relatesTo", setter="relatesTo", searcher=StringSearch("relatesTo"))
        section = EmbeddedAttribute(type="CompositionSection", getter="section", setter="section", searcher=StringSearch("section"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class CompositionAttester(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    mode = fields.CharField(blank=False, required=True)
    party = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    time = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        party = EmbeddedAttribute(type="FHIRReference", getter="party", setter="party", searcher=StringSearch("party"))
        time = DateAttribute("time")

class CompositionEvent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    detail = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        detail = EmbeddedAttribute(type="FHIRReference", getter="detail", setter="detail", searcher=StringSearch("detail"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))

class CompositionRelatesTo(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    targetIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    targetReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        targetIdentifier = EmbeddedAttribute(type="Identifier", getter="targetIdentifier", setter="targetIdentifier", searcher=StringSearch("targetIdentifier"))
        targetReference = EmbeddedAttribute(type="FHIRReference", getter="targetReference", setter="targetReference", searcher=StringSearch("targetReference"))

class CompositionSection(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    author = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    emptyReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    entry = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    focus = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    mode = fields.CharField(blank=True, required=False)
    orderedBy = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        author = EmbeddedAttribute(type="FHIRReference", getter="author", setter="author", searcher=StringSearch("author"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        emptyReason = EmbeddedAttribute(type="CodeableConcept", getter="emptyReason", setter="emptyReason", searcher=StringSearch("emptyReason"))
        entry = EmbeddedAttribute(type="FHIRReference", getter="entry", setter="entry", searcher=StringSearch("entry"))
        focus = EmbeddedAttribute(type="FHIRReference", getter="focus", setter="focus", searcher=StringSearch("focus"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        orderedBy = EmbeddedAttribute(type="CodeableConcept", getter="orderedBy", setter="orderedBy", searcher=StringSearch("orderedBy"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))

class ConceptMap(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    group = fields.EmbeddedDocumentListField("ConceptMapGroup", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    sourceCanonical = fields.CharField(blank=True, required=False)
    sourceUri = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    targetCanonical = fields.CharField(blank=True, required=False)
    targetUri = fields.CharField(blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        group = EmbeddedAttribute(type="ConceptMapGroup", getter="group", setter="group", searcher=StringSearch("group"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        sourceCanonical = Attribute(getter="sourceCanonical", setter="sourceCanonical", searcher=StringSearch("sourceCanonical"))
        sourceUri = Attribute(getter="sourceUri", setter="sourceUri", searcher=StringSearch("sourceUri"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        targetCanonical = Attribute(getter="targetCanonical", setter="targetCanonical", searcher=StringSearch("targetCanonical"))
        targetUri = Attribute(getter="targetUri", setter="targetUri", searcher=StringSearch("targetUri"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ConceptMapGroup(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    element = fields.EmbeddedDocumentListField("ConceptMapGroupElement", blank=False, required=True)
    source = fields.CharField(blank=True, required=False)
    sourceVersion = fields.CharField(blank=True, required=False)
    target = fields.CharField(blank=True, required=False)
    targetVersion = fields.CharField(blank=True, required=False)
    unmapped = fields.EmbeddedDocumentField("ConceptMapGroupUnmapped", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        element = EmbeddedAttribute(type="ConceptMapGroupElement", getter="element", setter="element", searcher=StringSearch("element"))
        source = Attribute(getter="source", setter="source", searcher=StringSearch("source"))
        sourceVersion = Attribute(getter="sourceVersion", setter="sourceVersion", searcher=StringSearch("sourceVersion"))
        target = Attribute(getter="target", setter="target", searcher=StringSearch("target"))
        targetVersion = Attribute(getter="targetVersion", setter="targetVersion", searcher=StringSearch("targetVersion"))
        unmapped = EmbeddedAttribute(type="ConceptMapGroupUnmapped", getter="unmapped", setter="unmapped", searcher=StringSearch("unmapped"))

class ConceptMapGroupElement(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    target = fields.EmbeddedDocumentListField("ConceptMapGroupElementTarget", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        target = EmbeddedAttribute(type="ConceptMapGroupElementTarget", getter="target", setter="target", searcher=StringSearch("target"))

class ConceptMapGroupElementTarget(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    dependsOn = fields.EmbeddedDocumentListField("ConceptMapGroupElementTargetDependsOn", blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    equivalence = fields.CharField(blank=False, required=True)
    product = fields.EmbeddedDocumentListField("ConceptMapGroupElementTargetDependsOn", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        dependsOn = EmbeddedAttribute(type="ConceptMapGroupElementTargetDependsOn", getter="dependsOn", setter="dependsOn", searcher=StringSearch("dependsOn"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        equivalence = Attribute(getter="equivalence", setter="equivalence", searcher=StringSearch("equivalence"))
        product = EmbeddedAttribute(type="ConceptMapGroupElementTargetDependsOn", getter="product", setter="product", searcher=StringSearch("product"))

class ConceptMapGroupElementTargetDependsOn(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    property = fields.CharField(blank=False, required=True)
    system = fields.CharField(blank=True, required=False)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        property = Attribute(getter="property", setter="property", searcher=StringSearch("property"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class ConceptMapGroupUnmapped(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    mode = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class Condition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    abatementAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    abatementDateTime = fields.DateTimeField(blank=True, required=False)
    abatementPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    abatementRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    abatementString = fields.CharField(blank=True, required=False)
    asserter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    clinicalStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    evidence = fields.EmbeddedDocumentListField("ConditionEvidence", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    onsetAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    onsetDateTime = fields.DateTimeField(blank=True, required=False)
    onsetPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    onsetRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    onsetString = fields.CharField(blank=True, required=False)
    recordedDate = fields.DateTimeField(blank=True, required=False)
    recorder = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    severity = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    stage = fields.EmbeddedDocumentListField("ConditionStage", blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    verificationStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        abatementAge = EmbeddedAttribute(type="Age", getter="abatementAge", setter="abatementAge", searcher=StringSearch("abatementAge"))
        abatementDateTime = DateAttribute("abatementDateTime")
        abatementPeriod = EmbeddedAttribute(type="Period", getter="abatementPeriod", setter="abatementPeriod", searcher=StringSearch("abatementPeriod"))
        abatementRange = EmbeddedAttribute(type="Range", getter="abatementRange", setter="abatementRange", searcher=StringSearch("abatementRange"))
        abatementString = Attribute(getter="abatementString", setter="abatementString", searcher=StringSearch("abatementString"))
        asserter = EmbeddedAttribute(type="FHIRReference", getter="asserter", setter="asserter", searcher=StringSearch("asserter"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        clinicalStatus = EmbeddedAttribute(type="CodeableConcept", getter="clinicalStatus", setter="clinicalStatus", searcher=StringSearch("clinicalStatus"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        evidence = EmbeddedAttribute(type="ConditionEvidence", getter="evidence", setter="evidence", searcher=StringSearch("evidence"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        onsetAge = EmbeddedAttribute(type="Age", getter="onsetAge", setter="onsetAge", searcher=StringSearch("onsetAge"))
        onsetDateTime = DateAttribute("onsetDateTime")
        onsetPeriod = EmbeddedAttribute(type="Period", getter="onsetPeriod", setter="onsetPeriod", searcher=StringSearch("onsetPeriod"))
        onsetRange = EmbeddedAttribute(type="Range", getter="onsetRange", setter="onsetRange", searcher=StringSearch("onsetRange"))
        onsetString = Attribute(getter="onsetString", setter="onsetString", searcher=StringSearch("onsetString"))
        recordedDate = DateAttribute("recordedDate")
        recorder = EmbeddedAttribute(type="FHIRReference", getter="recorder", setter="recorder", searcher=StringSearch("recorder"))
        severity = EmbeddedAttribute(type="CodeableConcept", getter="severity", setter="severity", searcher=StringSearch("severity"))
        stage = EmbeddedAttribute(type="ConditionStage", getter="stage", setter="stage", searcher=StringSearch("stage"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        verificationStatus = EmbeddedAttribute(type="CodeableConcept", getter="verificationStatus", setter="verificationStatus", searcher=StringSearch("verificationStatus"))

class ConditionEvidence(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    detail = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        detail = EmbeddedAttribute(type="FHIRReference", getter="detail", setter="detail", searcher=StringSearch("detail"))

class ConditionStage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    assessment = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    summary = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        assessment = EmbeddedAttribute(type="FHIRReference", getter="assessment", setter="assessment", searcher=StringSearch("assessment"))
        summary = EmbeddedAttribute(type="CodeableConcept", getter="summary", setter="summary", searcher=StringSearch("summary"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class Consent(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=False, required=True)
    dateTime = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    organization = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    performer = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    policy = fields.EmbeddedDocumentListField("ConsentPolicy", blank=True, required=False)
    policyRule = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    provision = fields.EmbeddedDocumentField("ConsentProvision", blank=True, required=False)
    scope = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    sourceAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    sourceReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    verification = fields.EmbeddedDocumentListField("ConsentVerification", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        dateTime = DateAttribute("dateTime")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        organization = EmbeddedAttribute(type="FHIRReference", getter="organization", setter="organization", searcher=StringSearch("organization"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        performer = EmbeddedAttribute(type="FHIRReference", getter="performer", setter="performer", searcher=StringSearch("performer"))
        policy = EmbeddedAttribute(type="ConsentPolicy", getter="policy", setter="policy", searcher=StringSearch("policy"))
        policyRule = EmbeddedAttribute(type="CodeableConcept", getter="policyRule", setter="policyRule", searcher=StringSearch("policyRule"))
        provision = EmbeddedAttribute(type="ConsentProvision", getter="provision", setter="provision", searcher=StringSearch("provision"))
        scope = EmbeddedAttribute(type="CodeableConcept", getter="scope", setter="scope", searcher=StringSearch("scope"))
        sourceAttachment = EmbeddedAttribute(type="Attachment", getter="sourceAttachment", setter="sourceAttachment", searcher=StringSearch("sourceAttachment"))
        sourceReference = EmbeddedAttribute(type="FHIRReference", getter="sourceReference", setter="sourceReference", searcher=StringSearch("sourceReference"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        verification = EmbeddedAttribute(type="ConsentVerification", getter="verification", setter="verification", searcher=StringSearch("verification"))

class ConsentPolicy(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    authority = fields.CharField(blank=True, required=False)
    uri = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        authority = Attribute(getter="authority", setter="authority", searcher=StringSearch("authority"))
        uri = Attribute(getter="uri", setter="uri", searcher=StringSearch("uri"))

class ConsentProvision(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    actor = fields.EmbeddedDocumentListField("ConsentProvisionActor", blank=True, required=False)
    class_ = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    code = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    data = fields.EmbeddedDocumentListField("ConsentProvisionData", blank=True, required=False)
    dataPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    purpose = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    securityLabel = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="CodeableConcept", getter="action", setter="action", searcher=StringSearch("action"))
        actor = EmbeddedAttribute(type="ConsentProvisionActor", getter="actor", setter="actor", searcher=StringSearch("actor"))
        class_ = EmbeddedAttribute(type="Coding", getter="class_", setter="class_", searcher=StringSearch("class_"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        data = EmbeddedAttribute(type="ConsentProvisionData", getter="data", setter="data", searcher=StringSearch("data"))
        dataPeriod = EmbeddedAttribute(type="Period", getter="dataPeriod", setter="dataPeriod", searcher=StringSearch("dataPeriod"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        purpose = EmbeddedAttribute(type="Coding", getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        securityLabel = EmbeddedAttribute(type="Coding", getter="securityLabel", setter="securityLabel", searcher=StringSearch("securityLabel"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class ConsentProvisionActor(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    reference = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        reference = EmbeddedAttribute(type="FHIRReference", getter="reference", setter="reference", searcher=StringSearch("reference"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class ConsentProvisionData(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    meaning = fields.CharField(blank=False, required=True)
    reference = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        meaning = Attribute(getter="meaning", setter="meaning", searcher=StringSearch("meaning"))
        reference = EmbeddedAttribute(type="FHIRReference", getter="reference", setter="reference", searcher=StringSearch("reference"))

class ConsentVerification(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    verificationDate = fields.DateTimeField(blank=True, required=False)
    verified = fields.BooleanField(blank=False, required=True)
    verifiedWith = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        verificationDate = DateAttribute("verificationDate")
        verified = Attribute(getter="verified", setter="verified", searcher=StringSearch("verified"))
        verifiedWith = EmbeddedAttribute(type="FHIRReference", getter="verifiedWith", setter="verifiedWith", searcher=StringSearch("verifiedWith"))

class ContactDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class ContactPoint(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    rank = fields.IntegerField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    use = fields.CharField(blank=True, required=False)
    value = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        rank = Attribute(getter="rank", setter="rank", searcher=NumericSearch("rank"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class Contract(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    alias = fields.ListField(fields.CharField(), blank=True, required=False)
    applies = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    author = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    authority = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    contentDefinition = fields.EmbeddedDocumentField("ContractContentDefinition", blank=True, required=False)
    contentDerivative = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    domain = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    expirationType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    friendly = fields.EmbeddedDocumentListField("ContractFriendly", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    instantiatesCanonical = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    instantiatesUri = fields.CharField(blank=True, required=False)
    issued = fields.DateTimeField(blank=True, required=False)
    legal = fields.EmbeddedDocumentListField("ContractLegal", blank=True, required=False)
    legalState = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    legallyBindingAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    legallyBindingReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    relevantHistory = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    rule = fields.EmbeddedDocumentListField("ContractRule", blank=True, required=False)
    scope = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    signer = fields.EmbeddedDocumentListField("ContractSigner", blank=True, required=False)
    site = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    subType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    subject = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    subtitle = fields.CharField(blank=True, required=False)
    supportingInfo = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    term = fields.EmbeddedDocumentListField("ContractTerm", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    topicCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    topicReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        alias = Attribute(getter="alias", setter="alias", searcher=StringSearch("alias"))
        applies = EmbeddedAttribute(type="Period", getter="applies", setter="applies", searcher=StringSearch("applies"))
        author = EmbeddedAttribute(type="FHIRReference", getter="author", setter="author", searcher=StringSearch("author"))
        authority = EmbeddedAttribute(type="FHIRReference", getter="authority", setter="authority", searcher=StringSearch("authority"))
        contentDefinition = EmbeddedAttribute(type="ContractContentDefinition", getter="contentDefinition", setter="contentDefinition", searcher=StringSearch("contentDefinition"))
        contentDerivative = EmbeddedAttribute(type="CodeableConcept", getter="contentDerivative", setter="contentDerivative", searcher=StringSearch("contentDerivative"))
        domain = EmbeddedAttribute(type="FHIRReference", getter="domain", setter="domain", searcher=StringSearch("domain"))
        expirationType = EmbeddedAttribute(type="CodeableConcept", getter="expirationType", setter="expirationType", searcher=StringSearch("expirationType"))
        friendly = EmbeddedAttribute(type="ContractFriendly", getter="friendly", setter="friendly", searcher=StringSearch("friendly"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        instantiatesCanonical = EmbeddedAttribute(type="FHIRReference", getter="instantiatesCanonical", setter="instantiatesCanonical", searcher=StringSearch("instantiatesCanonical"))
        instantiatesUri = Attribute(getter="instantiatesUri", setter="instantiatesUri", searcher=StringSearch("instantiatesUri"))
        issued = DateAttribute("issued")
        legal = EmbeddedAttribute(type="ContractLegal", getter="legal", setter="legal", searcher=StringSearch("legal"))
        legalState = EmbeddedAttribute(type="CodeableConcept", getter="legalState", setter="legalState", searcher=StringSearch("legalState"))
        legallyBindingAttachment = EmbeddedAttribute(type="Attachment", getter="legallyBindingAttachment", setter="legallyBindingAttachment", searcher=StringSearch("legallyBindingAttachment"))
        legallyBindingReference = EmbeddedAttribute(type="FHIRReference", getter="legallyBindingReference", setter="legallyBindingReference", searcher=StringSearch("legallyBindingReference"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        relevantHistory = EmbeddedAttribute(type="FHIRReference", getter="relevantHistory", setter="relevantHistory", searcher=StringSearch("relevantHistory"))
        rule = EmbeddedAttribute(type="ContractRule", getter="rule", setter="rule", searcher=StringSearch("rule"))
        scope = EmbeddedAttribute(type="CodeableConcept", getter="scope", setter="scope", searcher=StringSearch("scope"))
        signer = EmbeddedAttribute(type="ContractSigner", getter="signer", setter="signer", searcher=StringSearch("signer"))
        site = EmbeddedAttribute(type="FHIRReference", getter="site", setter="site", searcher=StringSearch("site"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subType = EmbeddedAttribute(type="CodeableConcept", getter="subType", setter="subType", searcher=StringSearch("subType"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        subtitle = Attribute(getter="subtitle", setter="subtitle", searcher=StringSearch("subtitle"))
        supportingInfo = EmbeddedAttribute(type="FHIRReference", getter="supportingInfo", setter="supportingInfo", searcher=StringSearch("supportingInfo"))
        term = EmbeddedAttribute(type="ContractTerm", getter="term", setter="term", searcher=StringSearch("term"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topicCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="topicCodeableConcept", setter="topicCodeableConcept", searcher=StringSearch("topicCodeableConcept"))
        topicReference = EmbeddedAttribute(type="FHIRReference", getter="topicReference", setter="topicReference", searcher=StringSearch("topicReference"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ContractContentDefinition(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    publicationDate = fields.DateTimeField(blank=True, required=False)
    publicationStatus = fields.CharField(blank=False, required=True)
    publisher = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    subType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        publicationDate = DateAttribute("publicationDate")
        publicationStatus = Attribute(getter="publicationStatus", setter="publicationStatus", searcher=StringSearch("publicationStatus"))
        publisher = EmbeddedAttribute(type="FHIRReference", getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        subType = EmbeddedAttribute(type="CodeableConcept", getter="subType", setter="subType", searcher=StringSearch("subType"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ContractFriendly(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    contentAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    contentReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        contentAttachment = EmbeddedAttribute(type="Attachment", getter="contentAttachment", setter="contentAttachment", searcher=StringSearch("contentAttachment"))
        contentReference = EmbeddedAttribute(type="FHIRReference", getter="contentReference", setter="contentReference", searcher=StringSearch("contentReference"))

class ContractLegal(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    contentAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    contentReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        contentAttachment = EmbeddedAttribute(type="Attachment", getter="contentAttachment", setter="contentAttachment", searcher=StringSearch("contentAttachment"))
        contentReference = EmbeddedAttribute(type="FHIRReference", getter="contentReference", setter="contentReference", searcher=StringSearch("contentReference"))

class ContractRule(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    contentAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    contentReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        contentAttachment = EmbeddedAttribute(type="Attachment", getter="contentAttachment", setter="contentAttachment", searcher=StringSearch("contentAttachment"))
        contentReference = EmbeddedAttribute(type="FHIRReference", getter="contentReference", setter="contentReference", searcher=StringSearch("contentReference"))

class ContractSigner(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    party = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    signature = fields.EmbeddedDocumentListField("Signature", blank=False, required=True)
    type = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        party = EmbeddedAttribute(type="FHIRReference", getter="party", setter="party", searcher=StringSearch("party"))
        signature = EmbeddedAttribute(type="Signature", getter="signature", setter="signature", searcher=StringSearch("signature"))
        type = EmbeddedAttribute(type="Coding", getter="type", setter="type", searcher=StringSearch("type"))

class ContractTerm(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("ContractTermAction", blank=True, required=False)
    applies = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    asset = fields.EmbeddedDocumentListField("ContractTermAsset", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    issued = fields.DateTimeField(blank=True, required=False)
    offer = fields.EmbeddedDocumentField("ContractTermOffer", blank=False, required=True)
    securityLabel = fields.EmbeddedDocumentListField("ContractTermSecurityLabel", blank=True, required=False)
    subType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    topicCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    topicReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="ContractTermAction", getter="action", setter="action", searcher=StringSearch("action"))
        applies = EmbeddedAttribute(type="Period", getter="applies", setter="applies", searcher=StringSearch("applies"))
        asset = EmbeddedAttribute(type="ContractTermAsset", getter="asset", setter="asset", searcher=StringSearch("asset"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        issued = DateAttribute("issued")
        offer = EmbeddedAttribute(type="ContractTermOffer", getter="offer", setter="offer", searcher=StringSearch("offer"))
        securityLabel = EmbeddedAttribute(type="ContractTermSecurityLabel", getter="securityLabel", setter="securityLabel", searcher=StringSearch("securityLabel"))
        subType = EmbeddedAttribute(type="CodeableConcept", getter="subType", setter="subType", searcher=StringSearch("subType"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        topicCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="topicCodeableConcept", setter="topicCodeableConcept", searcher=StringSearch("topicCodeableConcept"))
        topicReference = EmbeddedAttribute(type="FHIRReference", getter="topicReference", setter="topicReference", searcher=StringSearch("topicReference"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ContractTermAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    context = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    contextLinkId = fields.ListField(fields.CharField(), blank=True, required=False)
    doNotPerform = fields.BooleanField(blank=True, required=False)
    intent = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    linkId = fields.ListField(fields.CharField(), blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    occurrenceTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    performer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    performerLinkId = fields.ListField(fields.CharField(), blank=True, required=False)
    performerRole = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    performerType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reason = fields.ListField(fields.CharField(), blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonLinkId = fields.ListField(fields.CharField(), blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    requester = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    requesterLinkId = fields.ListField(fields.CharField(), blank=True, required=False)
    securityLabelNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    status = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    subject = fields.EmbeddedDocumentListField("ContractTermActionSubject", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        context = EmbeddedAttribute(type="FHIRReference", getter="context", setter="context", searcher=StringSearch("context"))
        contextLinkId = Attribute(getter="contextLinkId", setter="contextLinkId", searcher=StringSearch("contextLinkId"))
        doNotPerform = Attribute(getter="doNotPerform", setter="doNotPerform", searcher=StringSearch("doNotPerform"))
        intent = EmbeddedAttribute(type="CodeableConcept", getter="intent", setter="intent", searcher=StringSearch("intent"))
        linkId = Attribute(getter="linkId", setter="linkId", searcher=StringSearch("linkId"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        occurrenceTiming = EmbeddedAttribute(type="Timing", getter="occurrenceTiming", setter="occurrenceTiming", searcher=StringSearch("occurrenceTiming"))
        performer = EmbeddedAttribute(type="FHIRReference", getter="performer", setter="performer", searcher=StringSearch("performer"))
        performerLinkId = Attribute(getter="performerLinkId", setter="performerLinkId", searcher=StringSearch("performerLinkId"))
        performerRole = EmbeddedAttribute(type="CodeableConcept", getter="performerRole", setter="performerRole", searcher=StringSearch("performerRole"))
        performerType = EmbeddedAttribute(type="CodeableConcept", getter="performerType", setter="performerType", searcher=StringSearch("performerType"))
        reason = Attribute(getter="reason", setter="reason", searcher=StringSearch("reason"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonLinkId = Attribute(getter="reasonLinkId", setter="reasonLinkId", searcher=StringSearch("reasonLinkId"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        requester = EmbeddedAttribute(type="FHIRReference", getter="requester", setter="requester", searcher=StringSearch("requester"))
        requesterLinkId = Attribute(getter="requesterLinkId", setter="requesterLinkId", searcher=StringSearch("requesterLinkId"))
        securityLabelNumber = Attribute(getter="securityLabelNumber", setter="securityLabelNumber", searcher=NumericSearch("securityLabelNumber"))
        status = EmbeddedAttribute(type="CodeableConcept", getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="ContractTermActionSubject", getter="subject", setter="subject", searcher=StringSearch("subject"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ContractTermActionSubject(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    reference = fields.EmbeddedDocumentListField("FHIRReference", blank=False, required=True)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        reference = EmbeddedAttribute(type="FHIRReference", getter="reference", setter="reference", searcher=StringSearch("reference"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class ContractTermAsset(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    answer = fields.EmbeddedDocumentListField("ContractTermOfferAnswer", blank=True, required=False)
    condition = fields.CharField(blank=True, required=False)
    context = fields.EmbeddedDocumentListField("ContractTermAssetContext", blank=True, required=False)
    linkId = fields.ListField(fields.CharField(), blank=True, required=False)
    period = fields.EmbeddedDocumentListField("Period", blank=True, required=False)
    periodType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    relationship = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    scope = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    securityLabelNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    subtype = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    typeReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    usePeriod = fields.EmbeddedDocumentListField("Period", blank=True, required=False)
    valuedItem = fields.EmbeddedDocumentListField("ContractTermAssetValuedItem", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        answer = EmbeddedAttribute(type="ContractTermOfferAnswer", getter="answer", setter="answer", searcher=StringSearch("answer"))
        condition = Attribute(getter="condition", setter="condition", searcher=StringSearch("condition"))
        context = EmbeddedAttribute(type="ContractTermAssetContext", getter="context", setter="context", searcher=StringSearch("context"))
        linkId = Attribute(getter="linkId", setter="linkId", searcher=StringSearch("linkId"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        periodType = EmbeddedAttribute(type="CodeableConcept", getter="periodType", setter="periodType", searcher=StringSearch("periodType"))
        relationship = EmbeddedAttribute(type="Coding", getter="relationship", setter="relationship", searcher=StringSearch("relationship"))
        scope = EmbeddedAttribute(type="CodeableConcept", getter="scope", setter="scope", searcher=StringSearch("scope"))
        securityLabelNumber = Attribute(getter="securityLabelNumber", setter="securityLabelNumber", searcher=NumericSearch("securityLabelNumber"))
        subtype = EmbeddedAttribute(type="CodeableConcept", getter="subtype", setter="subtype", searcher=StringSearch("subtype"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        typeReference = EmbeddedAttribute(type="FHIRReference", getter="typeReference", setter="typeReference", searcher=StringSearch("typeReference"))
        usePeriod = EmbeddedAttribute(type="Period", getter="usePeriod", setter="usePeriod", searcher=StringSearch("usePeriod"))
        valuedItem = EmbeddedAttribute(type="ContractTermAssetValuedItem", getter="valuedItem", setter="valuedItem", searcher=StringSearch("valuedItem"))

class ContractTermAssetContext(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        reference = EmbeddedAttribute(type="FHIRReference", getter="reference", setter="reference", searcher=StringSearch("reference"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))

class ContractTermAssetValuedItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    effectiveTime = fields.DateTimeField(blank=True, required=False)
    entityCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    entityReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    linkId = fields.ListField(fields.CharField(), blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    payment = fields.CharField(blank=True, required=False)
    paymentDate = fields.DateTimeField(blank=True, required=False)
    points = fields.FloatField(blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    recipient = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    responsible = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    securityLabelNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        effectiveTime = DateAttribute("effectiveTime")
        entityCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="entityCodeableConcept", setter="entityCodeableConcept", searcher=StringSearch("entityCodeableConcept"))
        entityReference = EmbeddedAttribute(type="FHIRReference", getter="entityReference", setter="entityReference", searcher=StringSearch("entityReference"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        linkId = Attribute(getter="linkId", setter="linkId", searcher=StringSearch("linkId"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        payment = Attribute(getter="payment", setter="payment", searcher=StringSearch("payment"))
        paymentDate = DateAttribute("paymentDate")
        points = Attribute(getter="points", setter="points", searcher=NumericSearch("points"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        recipient = EmbeddedAttribute(type="FHIRReference", getter="recipient", setter="recipient", searcher=StringSearch("recipient"))
        responsible = EmbeddedAttribute(type="FHIRReference", getter="responsible", setter="responsible", searcher=StringSearch("responsible"))
        securityLabelNumber = Attribute(getter="securityLabelNumber", setter="securityLabelNumber", searcher=NumericSearch("securityLabelNumber"))
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ContractTermOffer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    answer = fields.EmbeddedDocumentListField("ContractTermOfferAnswer", blank=True, required=False)
    decision = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    decisionMode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    linkId = fields.ListField(fields.CharField(), blank=True, required=False)
    party = fields.EmbeddedDocumentListField("ContractTermOfferParty", blank=True, required=False)
    securityLabelNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        answer = EmbeddedAttribute(type="ContractTermOfferAnswer", getter="answer", setter="answer", searcher=StringSearch("answer"))
        decision = EmbeddedAttribute(type="CodeableConcept", getter="decision", setter="decision", searcher=StringSearch("decision"))
        decisionMode = EmbeddedAttribute(type="CodeableConcept", getter="decisionMode", setter="decisionMode", searcher=StringSearch("decisionMode"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        linkId = Attribute(getter="linkId", setter="linkId", searcher=StringSearch("linkId"))
        party = EmbeddedAttribute(type="ContractTermOfferParty", getter="party", setter="party", searcher=StringSearch("party"))
        securityLabelNumber = Attribute(getter="securityLabelNumber", setter="securityLabelNumber", searcher=NumericSearch("securityLabelNumber"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        topic = EmbeddedAttribute(type="FHIRReference", getter="topic", setter="topic", searcher=StringSearch("topic"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ContractTermOfferAnswer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    valueDate = fields.DateTimeField(blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valueDecimal = fields.FloatField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueTime = fields.DateTimeField(blank=True, required=False)
    valueUri = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueDate = DateAttribute("valueDate")
        valueDateTime = DateAttribute("valueDateTime")
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueReference = EmbeddedAttribute(type="FHIRReference", getter="valueReference", setter="valueReference", searcher=StringSearch("valueReference"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")
        valueUri = Attribute(getter="valueUri", setter="valueUri", searcher=StringSearch("valueUri"))

class ContractTermOfferParty(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    reference = fields.EmbeddedDocumentListField("FHIRReference", blank=False, required=True)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        reference = EmbeddedAttribute(type="FHIRReference", getter="reference", setter="reference", searcher=StringSearch("reference"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class ContractTermSecurityLabel(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    classification = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    control = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    number = fields.ListField(fields.IntegerField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        category = EmbeddedAttribute(type="Coding", getter="category", setter="category", searcher=StringSearch("category"))
        classification = EmbeddedAttribute(type="Coding", getter="classification", setter="classification", searcher=StringSearch("classification"))
        control = EmbeddedAttribute(type="Coding", getter="control", setter="control", searcher=StringSearch("control"))
        number = Attribute(getter="number", setter="number", searcher=NumericSearch("number"))

class Contributor(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class Count(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    comparator = fields.CharField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    unit = fields.CharField(blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comparator = Attribute(getter="comparator", setter="comparator", searcher=StringSearch("comparator"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        unit = Attribute(getter="unit", setter="unit", searcher=StringSearch("unit"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class Coverage(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    beneficiary = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class_ = fields.EmbeddedDocumentListField("CoverageClass", blank=True, required=False)
    contract = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    costToBeneficiary = fields.EmbeddedDocumentListField("CoverageCostToBeneficiary", blank=True, required=False)
    dependent = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    network = fields.CharField(blank=True, required=False)
    order = fields.IntegerField(blank=True, required=False)
    payor = fields.EmbeddedDocumentListField("FHIRReference", blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    policyHolder = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    relationship = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subrogation = fields.BooleanField(blank=True, required=False)
    subscriber = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    subscriberId = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        beneficiary = EmbeddedAttribute(type="FHIRReference", getter="beneficiary", setter="beneficiary", searcher=StringSearch("beneficiary"))
        class_ = EmbeddedAttribute(type="CoverageClass", getter="class_", setter="class_", searcher=StringSearch("class_"))
        contract = EmbeddedAttribute(type="FHIRReference", getter="contract", setter="contract", searcher=StringSearch("contract"))
        costToBeneficiary = EmbeddedAttribute(type="CoverageCostToBeneficiary", getter="costToBeneficiary", setter="costToBeneficiary", searcher=StringSearch("costToBeneficiary"))
        dependent = Attribute(getter="dependent", setter="dependent", searcher=StringSearch("dependent"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        network = Attribute(getter="network", setter="network", searcher=StringSearch("network"))
        order = Attribute(getter="order", setter="order", searcher=NumericSearch("order"))
        payor = EmbeddedAttribute(type="FHIRReference", getter="payor", setter="payor", searcher=StringSearch("payor"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        policyHolder = EmbeddedAttribute(type="FHIRReference", getter="policyHolder", setter="policyHolder", searcher=StringSearch("policyHolder"))
        relationship = EmbeddedAttribute(type="CodeableConcept", getter="relationship", setter="relationship", searcher=StringSearch("relationship"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subrogation = Attribute(getter="subrogation", setter="subrogation", searcher=StringSearch("subrogation"))
        subscriber = EmbeddedAttribute(type="FHIRReference", getter="subscriber", setter="subscriber", searcher=StringSearch("subscriber"))
        subscriberId = Attribute(getter="subscriberId", setter="subscriberId", searcher=StringSearch("subscriberId"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class CoverageClass(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class CoverageCostToBeneficiary(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    exception = fields.EmbeddedDocumentListField("CoverageCostToBeneficiaryException", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        exception = EmbeddedAttribute(type="CoverageCostToBeneficiaryException", getter="exception", setter="exception", searcher=StringSearch("exception"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        valueMoney = EmbeddedAttribute(type="Money", getter="valueMoney", setter="valueMoney", searcher=StringSearch("valueMoney"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))

class CoverageCostToBeneficiaryException(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class CoverageEligibilityRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    created = fields.DateTimeField(blank=False, required=True)
    enterer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    facility = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    insurance = fields.EmbeddedDocumentListField("CoverageEligibilityRequestInsurance", blank=True, required=False)
    insurer = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    item = fields.EmbeddedDocumentListField("CoverageEligibilityRequestItem", blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    priority = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    provider = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    purpose = fields.ListField(fields.CharField(), blank=False, required=True)
    servicedDate = fields.DateTimeField(blank=True, required=False)
    servicedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    supportingInfo = fields.EmbeddedDocumentListField("CoverageEligibilityRequestSupportingInfo", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        created = DateAttribute("created")
        enterer = EmbeddedAttribute(type="FHIRReference", getter="enterer", setter="enterer", searcher=StringSearch("enterer"))
        facility = EmbeddedAttribute(type="FHIRReference", getter="facility", setter="facility", searcher=StringSearch("facility"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        insurance = EmbeddedAttribute(type="CoverageEligibilityRequestInsurance", getter="insurance", setter="insurance", searcher=StringSearch("insurance"))
        insurer = EmbeddedAttribute(type="FHIRReference", getter="insurer", setter="insurer", searcher=StringSearch("insurer"))
        item = EmbeddedAttribute(type="CoverageEligibilityRequestItem", getter="item", setter="item", searcher=StringSearch("item"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        priority = EmbeddedAttribute(type="CodeableConcept", getter="priority", setter="priority", searcher=StringSearch("priority"))
        provider = EmbeddedAttribute(type="FHIRReference", getter="provider", setter="provider", searcher=StringSearch("provider"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        servicedDate = DateAttribute("servicedDate")
        servicedPeriod = EmbeddedAttribute(type="Period", getter="servicedPeriod", setter="servicedPeriod", searcher=StringSearch("servicedPeriod"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        supportingInfo = EmbeddedAttribute(type="CoverageEligibilityRequestSupportingInfo", getter="supportingInfo", setter="supportingInfo", searcher=StringSearch("supportingInfo"))

class CoverageEligibilityRequestInsurance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    businessArrangement = fields.CharField(blank=True, required=False)
    coverage = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    focal = fields.BooleanField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        businessArrangement = Attribute(getter="businessArrangement", setter="businessArrangement", searcher=StringSearch("businessArrangement"))
        coverage = EmbeddedAttribute(type="FHIRReference", getter="coverage", setter="coverage", searcher=StringSearch("coverage"))
        focal = Attribute(getter="focal", setter="focal", searcher=StringSearch("focal"))

class CoverageEligibilityRequestItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    detail = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    diagnosis = fields.EmbeddedDocumentListField("CoverageEligibilityRequestItemDiagnosis", blank=True, required=False)
    facility = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    productOrService = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    provider = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    supportingInfoSequence = fields.ListField(fields.IntegerField(), blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        detail = EmbeddedAttribute(type="FHIRReference", getter="detail", setter="detail", searcher=StringSearch("detail"))
        diagnosis = EmbeddedAttribute(type="CoverageEligibilityRequestItemDiagnosis", getter="diagnosis", setter="diagnosis", searcher=StringSearch("diagnosis"))
        facility = EmbeddedAttribute(type="FHIRReference", getter="facility", setter="facility", searcher=StringSearch("facility"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        productOrService = EmbeddedAttribute(type="CodeableConcept", getter="productOrService", setter="productOrService", searcher=StringSearch("productOrService"))
        provider = EmbeddedAttribute(type="FHIRReference", getter="provider", setter="provider", searcher=StringSearch("provider"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        supportingInfoSequence = Attribute(getter="supportingInfoSequence", setter="supportingInfoSequence", searcher=NumericSearch("supportingInfoSequence"))
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class CoverageEligibilityRequestItemDiagnosis(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    diagnosisCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    diagnosisReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        diagnosisCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="diagnosisCodeableConcept", setter="diagnosisCodeableConcept", searcher=StringSearch("diagnosisCodeableConcept"))
        diagnosisReference = EmbeddedAttribute(type="FHIRReference", getter="diagnosisReference", setter="diagnosisReference", searcher=StringSearch("diagnosisReference"))

class CoverageEligibilityRequestSupportingInfo(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    appliesToAll = fields.BooleanField(blank=True, required=False)
    information = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    sequence = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        appliesToAll = Attribute(getter="appliesToAll", setter="appliesToAll", searcher=StringSearch("appliesToAll"))
        information = EmbeddedAttribute(type="FHIRReference", getter="information", setter="information", searcher=StringSearch("information"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))

class CoverageEligibilityResponse(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    created = fields.DateTimeField(blank=False, required=True)
    disposition = fields.CharField(blank=True, required=False)
    error = fields.EmbeddedDocumentListField("CoverageEligibilityResponseError", blank=True, required=False)
    form = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    insurance = fields.EmbeddedDocumentListField("CoverageEligibilityResponseInsurance", blank=True, required=False)
    insurer = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    outcome = fields.CharField(blank=False, required=True)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    preAuthRef = fields.CharField(blank=True, required=False)
    purpose = fields.ListField(fields.CharField(), blank=False, required=True)
    request = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    requestor = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    servicedDate = fields.DateTimeField(blank=True, required=False)
    servicedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        created = DateAttribute("created")
        disposition = Attribute(getter="disposition", setter="disposition", searcher=StringSearch("disposition"))
        error = EmbeddedAttribute(type="CoverageEligibilityResponseError", getter="error", setter="error", searcher=StringSearch("error"))
        form = EmbeddedAttribute(type="CodeableConcept", getter="form", setter="form", searcher=StringSearch("form"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        insurance = EmbeddedAttribute(type="CoverageEligibilityResponseInsurance", getter="insurance", setter="insurance", searcher=StringSearch("insurance"))
        insurer = EmbeddedAttribute(type="FHIRReference", getter="insurer", setter="insurer", searcher=StringSearch("insurer"))
        outcome = Attribute(getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        preAuthRef = Attribute(getter="preAuthRef", setter="preAuthRef", searcher=StringSearch("preAuthRef"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        request = EmbeddedAttribute(type="FHIRReference", getter="request", setter="request", searcher=StringSearch("request"))
        requestor = EmbeddedAttribute(type="FHIRReference", getter="requestor", setter="requestor", searcher=StringSearch("requestor"))
        servicedDate = DateAttribute("servicedDate")
        servicedPeriod = EmbeddedAttribute(type="Period", getter="servicedPeriod", setter="servicedPeriod", searcher=StringSearch("servicedPeriod"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class CoverageEligibilityResponseError(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))

class CoverageEligibilityResponseInsurance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    benefitPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    coverage = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    inforce = fields.BooleanField(blank=True, required=False)
    item = fields.EmbeddedDocumentListField("CoverageEligibilityResponseInsuranceItem", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        benefitPeriod = EmbeddedAttribute(type="Period", getter="benefitPeriod", setter="benefitPeriod", searcher=StringSearch("benefitPeriod"))
        coverage = EmbeddedAttribute(type="FHIRReference", getter="coverage", setter="coverage", searcher=StringSearch("coverage"))
        inforce = Attribute(getter="inforce", setter="inforce", searcher=StringSearch("inforce"))
        item = EmbeddedAttribute(type="CoverageEligibilityResponseInsuranceItem", getter="item", setter="item", searcher=StringSearch("item"))

class CoverageEligibilityResponseInsuranceItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    authorizationRequired = fields.BooleanField(blank=True, required=False)
    authorizationSupporting = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    authorizationUrl = fields.CharField(blank=True, required=False)
    benefit = fields.EmbeddedDocumentListField("CoverageEligibilityResponseInsuranceItemBenefit", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    excluded = fields.BooleanField(blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    network = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    productOrService = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    provider = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    term = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    unit = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        authorizationRequired = Attribute(getter="authorizationRequired", setter="authorizationRequired", searcher=StringSearch("authorizationRequired"))
        authorizationSupporting = EmbeddedAttribute(type="CodeableConcept", getter="authorizationSupporting", setter="authorizationSupporting", searcher=StringSearch("authorizationSupporting"))
        authorizationUrl = Attribute(getter="authorizationUrl", setter="authorizationUrl", searcher=StringSearch("authorizationUrl"))
        benefit = EmbeddedAttribute(type="CoverageEligibilityResponseInsuranceItemBenefit", getter="benefit", setter="benefit", searcher=StringSearch("benefit"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        excluded = Attribute(getter="excluded", setter="excluded", searcher=StringSearch("excluded"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        network = EmbeddedAttribute(type="CodeableConcept", getter="network", setter="network", searcher=StringSearch("network"))
        productOrService = EmbeddedAttribute(type="CodeableConcept", getter="productOrService", setter="productOrService", searcher=StringSearch("productOrService"))
        provider = EmbeddedAttribute(type="FHIRReference", getter="provider", setter="provider", searcher=StringSearch("provider"))
        term = EmbeddedAttribute(type="CodeableConcept", getter="term", setter="term", searcher=StringSearch("term"))
        unit = EmbeddedAttribute(type="CodeableConcept", getter="unit", setter="unit", searcher=StringSearch("unit"))

class CoverageEligibilityResponseInsuranceItemBenefit(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    allowedMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    allowedString = fields.CharField(blank=True, required=False)
    allowedUnsignedInt = fields.IntegerField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    usedMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    usedString = fields.CharField(blank=True, required=False)
    usedUnsignedInt = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        allowedMoney = EmbeddedAttribute(type="Money", getter="allowedMoney", setter="allowedMoney", searcher=StringSearch("allowedMoney"))
        allowedString = Attribute(getter="allowedString", setter="allowedString", searcher=StringSearch("allowedString"))
        allowedUnsignedInt = Attribute(getter="allowedUnsignedInt", setter="allowedUnsignedInt", searcher=NumericSearch("allowedUnsignedInt"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        usedMoney = EmbeddedAttribute(type="Money", getter="usedMoney", setter="usedMoney", searcher=StringSearch("usedMoney"))
        usedString = Attribute(getter="usedString", setter="usedString", searcher=StringSearch("usedString"))
        usedUnsignedInt = Attribute(getter="usedUnsignedInt", setter="usedUnsignedInt", searcher=NumericSearch("usedUnsignedInt"))

class DataElement(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    element = fields.EmbeddedDocumentListField("ElementDefinition", blank=False, required=True)
    experimental = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    mapping = fields.EmbeddedDocumentListField("DataElementMapping", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    stringency = fields.CharField(blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        element = EmbeddedAttribute(type="ElementDefinition", getter="element", setter="element", searcher=StringSearch("element"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        mapping = EmbeddedAttribute(type="DataElementMapping", getter="mapping", setter="mapping", searcher=StringSearch("mapping"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        stringency = Attribute(getter="stringency", setter="stringency", searcher=StringSearch("stringency"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class DataElementMapping(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    identity = fields.CharField(blank=False, required=True)
    name = fields.CharField(blank=True, required=False)
    uri = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        identity = Attribute(getter="identity", setter="identity", searcher=StringSearch("identity"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        uri = Attribute(getter="uri", setter="uri", searcher=StringSearch("uri"))

class DataRequirement(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    codeFilter = fields.EmbeddedDocumentListField("DataRequirementCodeFilter", blank=True, required=False)
    dateFilter = fields.EmbeddedDocumentListField("DataRequirementDateFilter", blank=True, required=False)
    limit = fields.IntegerField(blank=True, required=False)
    mustSupport = fields.ListField(fields.CharField(), blank=True, required=False)
    profile = fields.ListField(fields.CharField(), blank=True, required=False)
    sort = fields.EmbeddedDocumentListField("DataRequirementSort", blank=True, required=False)
    subjectCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subjectReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        codeFilter = EmbeddedAttribute(type="DataRequirementCodeFilter", getter="codeFilter", setter="codeFilter", searcher=StringSearch("codeFilter"))
        dateFilter = EmbeddedAttribute(type="DataRequirementDateFilter", getter="dateFilter", setter="dateFilter", searcher=StringSearch("dateFilter"))
        limit = Attribute(getter="limit", setter="limit", searcher=NumericSearch("limit"))
        mustSupport = Attribute(getter="mustSupport", setter="mustSupport", searcher=StringSearch("mustSupport"))
        profile = Attribute(getter="profile", setter="profile", searcher=StringSearch("profile"))
        sort = EmbeddedAttribute(type="DataRequirementSort", getter="sort", setter="sort", searcher=StringSearch("sort"))
        subjectCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="subjectCodeableConcept", setter="subjectCodeableConcept", searcher=StringSearch("subjectCodeableConcept"))
        subjectReference = EmbeddedAttribute(type="FHIRReference", getter="subjectReference", setter="subjectReference", searcher=StringSearch("subjectReference"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class DataRequirementCodeFilter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    path = fields.CharField(blank=True, required=False)
    searchParam = fields.CharField(blank=True, required=False)
    valueSet = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = EmbeddedAttribute(type="Coding", getter="code", setter="code", searcher=StringSearch("code"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))
        searchParam = Attribute(getter="searchParam", setter="searchParam", searcher=StringSearch("searchParam"))
        valueSet = Attribute(getter="valueSet", setter="valueSet", searcher=StringSearch("valueSet"))

class DataRequirementDateFilter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    path = fields.CharField(blank=True, required=False)
    searchParam = fields.CharField(blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valueDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    valuePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))
        searchParam = Attribute(getter="searchParam", setter="searchParam", searcher=StringSearch("searchParam"))
        valueDateTime = DateAttribute("valueDateTime")
        valueDuration = EmbeddedAttribute(type="Duration", getter="valueDuration", setter="valueDuration", searcher=StringSearch("valueDuration"))
        valuePeriod = EmbeddedAttribute(type="Period", getter="valuePeriod", setter="valuePeriod", searcher=StringSearch("valuePeriod"))

class DataRequirementSort(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    direction = fields.CharField(blank=False, required=True)
    path = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        direction = Attribute(getter="direction", setter="direction", searcher=StringSearch("direction"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))

class DetectedIssue(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    author = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    detail = fields.CharField(blank=True, required=False)
    evidence = fields.EmbeddedDocumentListField("DetectedIssueEvidence", blank=True, required=False)
    identifiedDateTime = fields.DateTimeField(blank=True, required=False)
    identifiedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    implicated = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    mitigation = fields.EmbeddedDocumentListField("DetectedIssueMitigation", blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    reference = fields.CharField(blank=True, required=False)
    severity = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        author = EmbeddedAttribute(type="FHIRReference", getter="author", setter="author", searcher=StringSearch("author"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        detail = Attribute(getter="detail", setter="detail", searcher=StringSearch("detail"))
        evidence = EmbeddedAttribute(type="DetectedIssueEvidence", getter="evidence", setter="evidence", searcher=StringSearch("evidence"))
        identifiedDateTime = DateAttribute("identifiedDateTime")
        identifiedPeriod = EmbeddedAttribute(type="Period", getter="identifiedPeriod", setter="identifiedPeriod", searcher=StringSearch("identifiedPeriod"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        implicated = EmbeddedAttribute(type="FHIRReference", getter="implicated", setter="implicated", searcher=StringSearch("implicated"))
        mitigation = EmbeddedAttribute(type="DetectedIssueMitigation", getter="mitigation", setter="mitigation", searcher=StringSearch("mitigation"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        reference = Attribute(getter="reference", setter="reference", searcher=StringSearch("reference"))
        severity = Attribute(getter="severity", setter="severity", searcher=StringSearch("severity"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class DetectedIssueEvidence(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    detail = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        detail = EmbeddedAttribute(type="FHIRReference", getter="detail", setter="detail", searcher=StringSearch("detail"))

class DetectedIssueMitigation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    author = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="CodeableConcept", getter="action", setter="action", searcher=StringSearch("action"))
        author = EmbeddedAttribute(type="FHIRReference", getter="author", setter="author", searcher=StringSearch("author"))
        date = DateAttribute("date")

class Device(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    definition = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    deviceName = fields.EmbeddedDocumentListField("DeviceDeviceName", blank=True, required=False)
    distinctIdentifier = fields.CharField(blank=True, required=False)
    expirationDate = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    location = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    lotNumber = fields.CharField(blank=True, required=False)
    manufactureDate = fields.DateTimeField(blank=True, required=False)
    manufacturer = fields.CharField(blank=True, required=False)
    modelNumber = fields.CharField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    owner = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    parent = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    partNumber = fields.CharField(blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    property = fields.EmbeddedDocumentListField("DeviceProperty", blank=True, required=False)
    safety = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    serialNumber = fields.CharField(blank=True, required=False)
    specialization = fields.EmbeddedDocumentListField("DeviceSpecialization", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    statusReason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    udiCarrier = fields.EmbeddedDocumentListField("DeviceUdiCarrier", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    version = fields.EmbeddedDocumentListField("DeviceVersion", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactPoint", getter="contact", setter="contact", searcher=StringSearch("contact"))
        definition = EmbeddedAttribute(type="FHIRReference", getter="definition", setter="definition", searcher=StringSearch("definition"))
        deviceName = EmbeddedAttribute(type="DeviceDeviceName", getter="deviceName", setter="deviceName", searcher=StringSearch("deviceName"))
        distinctIdentifier = Attribute(getter="distinctIdentifier", setter="distinctIdentifier", searcher=StringSearch("distinctIdentifier"))
        expirationDate = DateAttribute("expirationDate")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        location = EmbeddedAttribute(type="FHIRReference", getter="location", setter="location", searcher=StringSearch("location"))
        lotNumber = Attribute(getter="lotNumber", setter="lotNumber", searcher=StringSearch("lotNumber"))
        manufactureDate = DateAttribute("manufactureDate")
        manufacturer = Attribute(getter="manufacturer", setter="manufacturer", searcher=StringSearch("manufacturer"))
        modelNumber = Attribute(getter="modelNumber", setter="modelNumber", searcher=StringSearch("modelNumber"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        owner = EmbeddedAttribute(type="FHIRReference", getter="owner", setter="owner", searcher=StringSearch("owner"))
        parent = EmbeddedAttribute(type="FHIRReference", getter="parent", setter="parent", searcher=StringSearch("parent"))
        partNumber = Attribute(getter="partNumber", setter="partNumber", searcher=StringSearch("partNumber"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        property = EmbeddedAttribute(type="DeviceProperty", getter="property", setter="property", searcher=StringSearch("property"))
        safety = EmbeddedAttribute(type="CodeableConcept", getter="safety", setter="safety", searcher=StringSearch("safety"))
        serialNumber = Attribute(getter="serialNumber", setter="serialNumber", searcher=StringSearch("serialNumber"))
        specialization = EmbeddedAttribute(type="DeviceSpecialization", getter="specialization", setter="specialization", searcher=StringSearch("specialization"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusReason = EmbeddedAttribute(type="CodeableConcept", getter="statusReason", setter="statusReason", searcher=StringSearch("statusReason"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        udiCarrier = EmbeddedAttribute(type="DeviceUdiCarrier", getter="udiCarrier", setter="udiCarrier", searcher=StringSearch("udiCarrier"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        version = EmbeddedAttribute(type="DeviceVersion", getter="version", setter="version", searcher=StringSearch("version"))

class DeviceComponent(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=False, required=True)
    languageCode = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    lastSystemChange = fields.DateTimeField(blank=True, required=False)
    measurementPrinciple = fields.CharField(blank=True, required=False)
    operationalStatus = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    parameterGroup = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    parent = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    productionSpecification = fields.EmbeddedDocumentListField("DeviceComponentProductionSpecification", blank=True, required=False)
    source = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        languageCode = EmbeddedAttribute(type="CodeableConcept", getter="languageCode", setter="languageCode", searcher=StringSearch("languageCode"))
        lastSystemChange = DateAttribute("lastSystemChange")
        measurementPrinciple = Attribute(getter="measurementPrinciple", setter="measurementPrinciple", searcher=StringSearch("measurementPrinciple"))
        operationalStatus = EmbeddedAttribute(type="CodeableConcept", getter="operationalStatus", setter="operationalStatus", searcher=StringSearch("operationalStatus"))
        parameterGroup = EmbeddedAttribute(type="CodeableConcept", getter="parameterGroup", setter="parameterGroup", searcher=StringSearch("parameterGroup"))
        parent = EmbeddedAttribute(type="FHIRReference", getter="parent", setter="parent", searcher=StringSearch("parent"))
        productionSpecification = EmbeddedAttribute(type="DeviceComponentProductionSpecification", getter="productionSpecification", setter="productionSpecification", searcher=StringSearch("productionSpecification"))
        source = EmbeddedAttribute(type="FHIRReference", getter="source", setter="source", searcher=StringSearch("source"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class DeviceComponentProductionSpecification(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    componentId = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    productionSpec = fields.CharField(blank=True, required=False)
    specType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        componentId = EmbeddedAttribute(type="Identifier", getter="componentId", setter="componentId", searcher=StringSearch("componentId"))
        productionSpec = Attribute(getter="productionSpec", setter="productionSpec", searcher=StringSearch("productionSpec"))
        specType = EmbeddedAttribute(type="CodeableConcept", getter="specType", setter="specType", searcher=StringSearch("specType"))

class DeviceDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    capability = fields.EmbeddedDocumentListField("DeviceDefinitionCapability", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    deviceName = fields.EmbeddedDocumentListField("DeviceDefinitionDeviceName", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    languageCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    manufacturerReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    manufacturerString = fields.CharField(blank=True, required=False)
    material = fields.EmbeddedDocumentListField("DeviceDefinitionMaterial", blank=True, required=False)
    modelNumber = fields.CharField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    onlineInformation = fields.CharField(blank=True, required=False)
    owner = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    parentDevice = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    physicalCharacteristics = fields.EmbeddedDocumentField("ProdCharacteristic", blank=True, required=False)
    property = fields.EmbeddedDocumentListField("DeviceDefinitionProperty", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    safety = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    shelfLifeStorage = fields.EmbeddedDocumentListField("ProductShelfLife", blank=True, required=False)
    specialization = fields.EmbeddedDocumentListField("DeviceDefinitionSpecialization", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    udiDeviceIdentifier = fields.EmbeddedDocumentListField("DeviceDefinitionUdiDeviceIdentifier", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    version = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        capability = EmbeddedAttribute(type="DeviceDefinitionCapability", getter="capability", setter="capability", searcher=StringSearch("capability"))
        contact = EmbeddedAttribute(type="ContactPoint", getter="contact", setter="contact", searcher=StringSearch("contact"))
        deviceName = EmbeddedAttribute(type="DeviceDefinitionDeviceName", getter="deviceName", setter="deviceName", searcher=StringSearch("deviceName"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        languageCode = EmbeddedAttribute(type="CodeableConcept", getter="languageCode", setter="languageCode", searcher=StringSearch("languageCode"))
        manufacturerReference = EmbeddedAttribute(type="FHIRReference", getter="manufacturerReference", setter="manufacturerReference", searcher=StringSearch("manufacturerReference"))
        manufacturerString = Attribute(getter="manufacturerString", setter="manufacturerString", searcher=StringSearch("manufacturerString"))
        material = EmbeddedAttribute(type="DeviceDefinitionMaterial", getter="material", setter="material", searcher=StringSearch("material"))
        modelNumber = Attribute(getter="modelNumber", setter="modelNumber", searcher=StringSearch("modelNumber"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        onlineInformation = Attribute(getter="onlineInformation", setter="onlineInformation", searcher=StringSearch("onlineInformation"))
        owner = EmbeddedAttribute(type="FHIRReference", getter="owner", setter="owner", searcher=StringSearch("owner"))
        parentDevice = EmbeddedAttribute(type="FHIRReference", getter="parentDevice", setter="parentDevice", searcher=StringSearch("parentDevice"))
        physicalCharacteristics = EmbeddedAttribute(type="ProdCharacteristic", getter="physicalCharacteristics", setter="physicalCharacteristics", searcher=StringSearch("physicalCharacteristics"))
        property = EmbeddedAttribute(type="DeviceDefinitionProperty", getter="property", setter="property", searcher=StringSearch("property"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        safety = EmbeddedAttribute(type="CodeableConcept", getter="safety", setter="safety", searcher=StringSearch("safety"))
        shelfLifeStorage = EmbeddedAttribute(type="ProductShelfLife", getter="shelfLifeStorage", setter="shelfLifeStorage", searcher=StringSearch("shelfLifeStorage"))
        specialization = EmbeddedAttribute(type="DeviceDefinitionSpecialization", getter="specialization", setter="specialization", searcher=StringSearch("specialization"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        udiDeviceIdentifier = EmbeddedAttribute(type="DeviceDefinitionUdiDeviceIdentifier", getter="udiDeviceIdentifier", setter="udiDeviceIdentifier", searcher=StringSearch("udiDeviceIdentifier"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class DeviceDefinitionCapability(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = EmbeddedAttribute(type="CodeableConcept", getter="description", setter="description", searcher=StringSearch("description"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class DeviceDefinitionDeviceName(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class DeviceDefinitionMaterial(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    allergenicIndicator = fields.BooleanField(blank=True, required=False)
    alternate = fields.BooleanField(blank=True, required=False)
    substance = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        allergenicIndicator = Attribute(getter="allergenicIndicator", setter="allergenicIndicator", searcher=StringSearch("allergenicIndicator"))
        alternate = Attribute(getter="alternate", setter="alternate", searcher=StringSearch("alternate"))
        substance = EmbeddedAttribute(type="CodeableConcept", getter="substance", setter="substance", searcher=StringSearch("substance"))

class DeviceDefinitionProperty(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    valueCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentListField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        valueCode = EmbeddedAttribute(type="CodeableConcept", getter="valueCode", setter="valueCode", searcher=StringSearch("valueCode"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))

class DeviceDefinitionSpecialization(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    systemType = fields.CharField(blank=False, required=True)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        systemType = Attribute(getter="systemType", setter="systemType", searcher=StringSearch("systemType"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class DeviceDefinitionUdiDeviceIdentifier(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    deviceIdentifier = fields.CharField(blank=False, required=True)
    issuer = fields.CharField(blank=False, required=True)
    jurisdiction = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        deviceIdentifier = Attribute(getter="deviceIdentifier", setter="deviceIdentifier", searcher=StringSearch("deviceIdentifier"))
        issuer = Attribute(getter="issuer", setter="issuer", searcher=StringSearch("issuer"))
        jurisdiction = Attribute(getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))

class DeviceDeviceName(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class DeviceMetric(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    calibration = fields.EmbeddedDocumentListField("DeviceMetricCalibration", blank=True, required=False)
    category = fields.CharField(blank=False, required=True)
    color = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    measurementPeriod = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    operationalStatus = fields.CharField(blank=True, required=False)
    parent = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    source = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    unit = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        calibration = EmbeddedAttribute(type="DeviceMetricCalibration", getter="calibration", setter="calibration", searcher=StringSearch("calibration"))
        category = Attribute(getter="category", setter="category", searcher=StringSearch("category"))
        color = Attribute(getter="color", setter="color", searcher=StringSearch("color"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        measurementPeriod = EmbeddedAttribute(type="Timing", getter="measurementPeriod", setter="measurementPeriod", searcher=StringSearch("measurementPeriod"))
        operationalStatus = Attribute(getter="operationalStatus", setter="operationalStatus", searcher=StringSearch("operationalStatus"))
        parent = EmbeddedAttribute(type="FHIRReference", getter="parent", setter="parent", searcher=StringSearch("parent"))
        source = EmbeddedAttribute(type="FHIRReference", getter="source", setter="source", searcher=StringSearch("source"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        unit = EmbeddedAttribute(type="CodeableConcept", getter="unit", setter="unit", searcher=StringSearch("unit"))

class DeviceMetricCalibration(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    state = fields.CharField(blank=True, required=False)
    time = fields.DateTimeField(blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        state = Attribute(getter="state", setter="state", searcher=StringSearch("state"))
        time = DateAttribute("time")
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class DeviceProperty(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    valueCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentListField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        valueCode = EmbeddedAttribute(type="CodeableConcept", getter="valueCode", setter="valueCode", searcher=StringSearch("valueCode"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))

class DeviceRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    codeCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    codeReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    groupIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    instantiatesCanonical = fields.ListField(fields.CharField(), blank=True, required=False)
    instantiatesUri = fields.ListField(fields.CharField(), blank=True, required=False)
    insurance = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    intent = fields.CharField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    occurrenceTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    parameter = fields.EmbeddedDocumentListField("DeviceRequestParameter", blank=True, required=False)
    performer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    performerType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    priorRequest = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    relevantHistory = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    requester = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    supportingInfo = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authoredOn = DateAttribute("authoredOn")
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        codeCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="codeCodeableConcept", setter="codeCodeableConcept", searcher=StringSearch("codeCodeableConcept"))
        codeReference = EmbeddedAttribute(type="FHIRReference", getter="codeReference", setter="codeReference", searcher=StringSearch("codeReference"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        groupIdentifier = EmbeddedAttribute(type="Identifier", getter="groupIdentifier", setter="groupIdentifier", searcher=StringSearch("groupIdentifier"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        instantiatesCanonical = Attribute(getter="instantiatesCanonical", setter="instantiatesCanonical", searcher=StringSearch("instantiatesCanonical"))
        instantiatesUri = Attribute(getter="instantiatesUri", setter="instantiatesUri", searcher=StringSearch("instantiatesUri"))
        insurance = EmbeddedAttribute(type="FHIRReference", getter="insurance", setter="insurance", searcher=StringSearch("insurance"))
        intent = Attribute(getter="intent", setter="intent", searcher=StringSearch("intent"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        occurrenceTiming = EmbeddedAttribute(type="Timing", getter="occurrenceTiming", setter="occurrenceTiming", searcher=StringSearch("occurrenceTiming"))
        parameter = EmbeddedAttribute(type="DeviceRequestParameter", getter="parameter", setter="parameter", searcher=StringSearch("parameter"))
        performer = EmbeddedAttribute(type="FHIRReference", getter="performer", setter="performer", searcher=StringSearch("performer"))
        performerType = EmbeddedAttribute(type="CodeableConcept", getter="performerType", setter="performerType", searcher=StringSearch("performerType"))
        priorRequest = EmbeddedAttribute(type="FHIRReference", getter="priorRequest", setter="priorRequest", searcher=StringSearch("priorRequest"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        relevantHistory = EmbeddedAttribute(type="FHIRReference", getter="relevantHistory", setter="relevantHistory", searcher=StringSearch("relevantHistory"))
        requester = EmbeddedAttribute(type="FHIRReference", getter="requester", setter="requester", searcher=StringSearch("requester"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        supportingInfo = EmbeddedAttribute(type="FHIRReference", getter="supportingInfo", setter="supportingInfo", searcher=StringSearch("supportingInfo"))

class DeviceRequestParameter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))

class DeviceSpecialization(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    systemType = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        systemType = EmbeddedAttribute(type="CodeableConcept", getter="systemType", setter="systemType", searcher=StringSearch("systemType"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class DeviceUdiCarrier(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    carrierAIDC = fields.CharField(blank=True, required=False)
    carrierHRF = fields.CharField(blank=True, required=False)
    deviceIdentifier = fields.CharField(blank=True, required=False)
    entryType = fields.CharField(blank=True, required=False)
    issuer = fields.CharField(blank=True, required=False)
    jurisdiction = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        carrierAIDC = Attribute(getter="carrierAIDC", setter="carrierAIDC", searcher=StringSearch("carrierAIDC"))
        carrierHRF = Attribute(getter="carrierHRF", setter="carrierHRF", searcher=StringSearch("carrierHRF"))
        deviceIdentifier = Attribute(getter="deviceIdentifier", setter="deviceIdentifier", searcher=StringSearch("deviceIdentifier"))
        entryType = Attribute(getter="entryType", setter="entryType", searcher=StringSearch("entryType"))
        issuer = Attribute(getter="issuer", setter="issuer", searcher=StringSearch("issuer"))
        jurisdiction = Attribute(getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))

class DeviceUseStatement(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    derivedFrom = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    device = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    recordedOn = fields.DateTimeField(blank=True, required=False)
    source = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    timingDateTime = fields.DateTimeField(blank=True, required=False)
    timingPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    timingTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        derivedFrom = EmbeddedAttribute(type="FHIRReference", getter="derivedFrom", setter="derivedFrom", searcher=StringSearch("derivedFrom"))
        device = EmbeddedAttribute(type="FHIRReference", getter="device", setter="device", searcher=StringSearch("device"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        recordedOn = DateAttribute("recordedOn")
        source = EmbeddedAttribute(type="FHIRReference", getter="source", setter="source", searcher=StringSearch("source"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        timingDateTime = DateAttribute("timingDateTime")
        timingPeriod = EmbeddedAttribute(type="Period", getter="timingPeriod", setter="timingPeriod", searcher=StringSearch("timingPeriod"))
        timingTiming = EmbeddedAttribute(type="Timing", getter="timingTiming", setter="timingTiming", searcher=StringSearch("timingTiming"))

class DeviceVersion(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    component = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        component = EmbeddedAttribute(type="Identifier", getter="component", setter="component", searcher=StringSearch("component"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class DiagnosticReport(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    conclusion = fields.CharField(blank=True, required=False)
    conclusionCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    effectiveDateTime = fields.DateTimeField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    imagingStudy = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    issued = fields.DateTimeField(blank=True, required=False)
    media = fields.EmbeddedDocumentListField("DiagnosticReportMedia", blank=True, required=False)
    performer = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    presentedForm = fields.EmbeddedDocumentListField("Attachment", blank=True, required=False)
    result = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    resultsInterpreter = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    specimen = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        conclusion = Attribute(getter="conclusion", setter="conclusion", searcher=StringSearch("conclusion"))
        conclusionCode = EmbeddedAttribute(type="CodeableConcept", getter="conclusionCode", setter="conclusionCode", searcher=StringSearch("conclusionCode"))
        effectiveDateTime = DateAttribute("effectiveDateTime")
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        imagingStudy = EmbeddedAttribute(type="FHIRReference", getter="imagingStudy", setter="imagingStudy", searcher=StringSearch("imagingStudy"))
        issued = DateAttribute("issued")
        media = EmbeddedAttribute(type="DiagnosticReportMedia", getter="media", setter="media", searcher=StringSearch("media"))
        performer = EmbeddedAttribute(type="FHIRReference", getter="performer", setter="performer", searcher=StringSearch("performer"))
        presentedForm = EmbeddedAttribute(type="Attachment", getter="presentedForm", setter="presentedForm", searcher=StringSearch("presentedForm"))
        result = EmbeddedAttribute(type="FHIRReference", getter="result", setter="result", searcher=StringSearch("result"))
        resultsInterpreter = EmbeddedAttribute(type="FHIRReference", getter="resultsInterpreter", setter="resultsInterpreter", searcher=StringSearch("resultsInterpreter"))
        specimen = EmbeddedAttribute(type="FHIRReference", getter="specimen", setter="specimen", searcher=StringSearch("specimen"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))

class DiagnosticReportMedia(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    link = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        link = EmbeddedAttribute(type="FHIRReference", getter="link", setter="link", searcher=StringSearch("link"))

class Distance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    comparator = fields.CharField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    unit = fields.CharField(blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comparator = Attribute(getter="comparator", setter="comparator", searcher=StringSearch("comparator"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        unit = Attribute(getter="unit", setter="unit", searcher=StringSearch("unit"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class DocumentManifest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    author = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    content = fields.EmbeddedDocumentListField("FHIRReference", blank=False, required=True)
    created = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    masterIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    recipient = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    related = fields.EmbeddedDocumentListField("DocumentManifestRelated", blank=True, required=False)
    source = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        author = EmbeddedAttribute(type="FHIRReference", getter="author", setter="author", searcher=StringSearch("author"))
        content = EmbeddedAttribute(type="FHIRReference", getter="content", setter="content", searcher=StringSearch("content"))
        created = DateAttribute("created")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        masterIdentifier = EmbeddedAttribute(type="Identifier", getter="masterIdentifier", setter="masterIdentifier", searcher=StringSearch("masterIdentifier"))
        recipient = EmbeddedAttribute(type="FHIRReference", getter="recipient", setter="recipient", searcher=StringSearch("recipient"))
        related = EmbeddedAttribute(type="DocumentManifestRelated", getter="related", setter="related", searcher=StringSearch("related"))
        source = Attribute(getter="source", setter="source", searcher=StringSearch("source"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class DocumentManifestRelated(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    ref = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        ref = EmbeddedAttribute(type="FHIRReference", getter="ref", setter="ref", searcher=StringSearch("ref"))

class DocumentReference(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authenticator = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    author = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    content = fields.EmbeddedDocumentListField("DocumentReferenceContent", blank=False, required=True)
    context = fields.EmbeddedDocumentField("DocumentReferenceContext", blank=True, required=False)
    custodian = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    docStatus = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    masterIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    relatesTo = fields.EmbeddedDocumentListField("DocumentReferenceRelatesTo", blank=True, required=False)
    securityLabel = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authenticator = EmbeddedAttribute(type="FHIRReference", getter="authenticator", setter="authenticator", searcher=StringSearch("authenticator"))
        author = EmbeddedAttribute(type="FHIRReference", getter="author", setter="author", searcher=StringSearch("author"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        content = EmbeddedAttribute(type="DocumentReferenceContent", getter="content", setter="content", searcher=StringSearch("content"))
        context = EmbeddedAttribute(type="DocumentReferenceContext", getter="context", setter="context", searcher=StringSearch("context"))
        custodian = EmbeddedAttribute(type="FHIRReference", getter="custodian", setter="custodian", searcher=StringSearch("custodian"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        docStatus = Attribute(getter="docStatus", setter="docStatus", searcher=StringSearch("docStatus"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        masterIdentifier = EmbeddedAttribute(type="Identifier", getter="masterIdentifier", setter="masterIdentifier", searcher=StringSearch("masterIdentifier"))
        relatesTo = EmbeddedAttribute(type="DocumentReferenceRelatesTo", getter="relatesTo", setter="relatesTo", searcher=StringSearch("relatesTo"))
        securityLabel = EmbeddedAttribute(type="CodeableConcept", getter="securityLabel", setter="securityLabel", searcher=StringSearch("securityLabel"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class DocumentReferenceContent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    attachment = fields.EmbeddedDocumentField("Attachment", blank=False, required=True)
    format = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        attachment = EmbeddedAttribute(type="Attachment", getter="attachment", setter="attachment", searcher=StringSearch("attachment"))
        format = EmbeddedAttribute(type="Coding", getter="format", setter="format", searcher=StringSearch("format"))

class DocumentReferenceContext(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    encounter = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    event = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    facilityType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    practiceSetting = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    related = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    sourcePatientInfo = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        event = EmbeddedAttribute(type="CodeableConcept", getter="event", setter="event", searcher=StringSearch("event"))
        facilityType = EmbeddedAttribute(type="CodeableConcept", getter="facilityType", setter="facilityType", searcher=StringSearch("facilityType"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        practiceSetting = EmbeddedAttribute(type="CodeableConcept", getter="practiceSetting", setter="practiceSetting", searcher=StringSearch("practiceSetting"))
        related = EmbeddedAttribute(type="FHIRReference", getter="related", setter="related", searcher=StringSearch("related"))
        sourcePatientInfo = EmbeddedAttribute(type="FHIRReference", getter="sourcePatientInfo", setter="sourcePatientInfo", searcher=StringSearch("sourcePatientInfo"))

class DocumentReferenceRelatesTo(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    target = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        target = EmbeddedAttribute(type="FHIRReference", getter="target", setter="target", searcher=StringSearch("target"))

class DomainResource(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))

class Dosage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    additionalInstruction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    asNeededBoolean = fields.BooleanField(blank=True, required=False)
    asNeededCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    doseAndRate = fields.EmbeddedDocumentListField("DosageDoseAndRate", blank=True, required=False)
    maxDosePerAdministration = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    maxDosePerLifetime = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    maxDosePerPeriod = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    method = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    patientInstruction = fields.CharField(blank=True, required=False)
    route = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=True, required=False)
    site = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    timing = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        additionalInstruction = EmbeddedAttribute(type="CodeableConcept", getter="additionalInstruction", setter="additionalInstruction", searcher=StringSearch("additionalInstruction"))
        asNeededBoolean = Attribute(getter="asNeededBoolean", setter="asNeededBoolean", searcher=StringSearch("asNeededBoolean"))
        asNeededCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="asNeededCodeableConcept", setter="asNeededCodeableConcept", searcher=StringSearch("asNeededCodeableConcept"))
        doseAndRate = EmbeddedAttribute(type="DosageDoseAndRate", getter="doseAndRate", setter="doseAndRate", searcher=StringSearch("doseAndRate"))
        maxDosePerAdministration = EmbeddedAttribute(type="Quantity", getter="maxDosePerAdministration", setter="maxDosePerAdministration", searcher=StringSearch("maxDosePerAdministration"))
        maxDosePerLifetime = EmbeddedAttribute(type="Quantity", getter="maxDosePerLifetime", setter="maxDosePerLifetime", searcher=StringSearch("maxDosePerLifetime"))
        maxDosePerPeriod = EmbeddedAttribute(type="Ratio", getter="maxDosePerPeriod", setter="maxDosePerPeriod", searcher=StringSearch("maxDosePerPeriod"))
        method = EmbeddedAttribute(type="CodeableConcept", getter="method", setter="method", searcher=StringSearch("method"))
        patientInstruction = Attribute(getter="patientInstruction", setter="patientInstruction", searcher=StringSearch("patientInstruction"))
        route = EmbeddedAttribute(type="CodeableConcept", getter="route", setter="route", searcher=StringSearch("route"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        site = EmbeddedAttribute(type="CodeableConcept", getter="site", setter="site", searcher=StringSearch("site"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        timing = EmbeddedAttribute(type="Timing", getter="timing", setter="timing", searcher=StringSearch("timing"))

class DosageDoseAndRate(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    doseQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    doseRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    rateQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    rateRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    rateRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        doseQuantity = EmbeddedAttribute(type="Quantity", getter="doseQuantity", setter="doseQuantity", searcher=StringSearch("doseQuantity"))
        doseRange = EmbeddedAttribute(type="Range", getter="doseRange", setter="doseRange", searcher=StringSearch("doseRange"))
        rateQuantity = EmbeddedAttribute(type="Quantity", getter="rateQuantity", setter="rateQuantity", searcher=StringSearch("rateQuantity"))
        rateRange = EmbeddedAttribute(type="Range", getter="rateRange", setter="rateRange", searcher=StringSearch("rateRange"))
        rateRatio = EmbeddedAttribute(type="Ratio", getter="rateRatio", setter="rateRatio", searcher=StringSearch("rateRatio"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class Duration(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    comparator = fields.CharField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    unit = fields.CharField(blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comparator = Attribute(getter="comparator", setter="comparator", searcher=StringSearch("comparator"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        unit = Attribute(getter="unit", setter="unit", searcher=StringSearch("unit"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class EffectEvidenceSynthesis(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    author = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    certainty = fields.EmbeddedDocumentListField("EffectEvidenceSynthesisCertainty", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    editor = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    effectEstimate = fields.EmbeddedDocumentListField("EffectEvidenceSynthesisEffectEstimate", blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    endorser = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    exposure = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    exposureAlternative = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    population = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    publisher = fields.CharField(blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    resultsByExposure = fields.EmbeddedDocumentListField("EffectEvidenceSynthesisResultsByExposure", blank=True, required=False)
    reviewer = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    sampleSize = fields.EmbeddedDocumentField("EffectEvidenceSynthesisSampleSize", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    studyType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    synthesisType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        author = EmbeddedAttribute(type="ContactDetail", getter="author", setter="author", searcher=StringSearch("author"))
        certainty = EmbeddedAttribute(type="EffectEvidenceSynthesisCertainty", getter="certainty", setter="certainty", searcher=StringSearch("certainty"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        editor = EmbeddedAttribute(type="ContactDetail", getter="editor", setter="editor", searcher=StringSearch("editor"))
        effectEstimate = EmbeddedAttribute(type="EffectEvidenceSynthesisEffectEstimate", getter="effectEstimate", setter="effectEstimate", searcher=StringSearch("effectEstimate"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        endorser = EmbeddedAttribute(type="ContactDetail", getter="endorser", setter="endorser", searcher=StringSearch("endorser"))
        exposure = EmbeddedAttribute(type="FHIRReference", getter="exposure", setter="exposure", searcher=StringSearch("exposure"))
        exposureAlternative = EmbeddedAttribute(type="FHIRReference", getter="exposureAlternative", setter="exposureAlternative", searcher=StringSearch("exposureAlternative"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        outcome = EmbeddedAttribute(type="FHIRReference", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        population = EmbeddedAttribute(type="FHIRReference", getter="population", setter="population", searcher=StringSearch("population"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        resultsByExposure = EmbeddedAttribute(type="EffectEvidenceSynthesisResultsByExposure", getter="resultsByExposure", setter="resultsByExposure", searcher=StringSearch("resultsByExposure"))
        reviewer = EmbeddedAttribute(type="ContactDetail", getter="reviewer", setter="reviewer", searcher=StringSearch("reviewer"))
        sampleSize = EmbeddedAttribute(type="EffectEvidenceSynthesisSampleSize", getter="sampleSize", setter="sampleSize", searcher=StringSearch("sampleSize"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        studyType = EmbeddedAttribute(type="CodeableConcept", getter="studyType", setter="studyType", searcher=StringSearch("studyType"))
        synthesisType = EmbeddedAttribute(type="CodeableConcept", getter="synthesisType", setter="synthesisType", searcher=StringSearch("synthesisType"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class EffectEvidenceSynthesisCertainty(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    certaintySubcomponent = fields.EmbeddedDocumentListField("EffectEvidenceSynthesisCertaintyCertaintySubcomponent", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    rating = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        certaintySubcomponent = EmbeddedAttribute(type="EffectEvidenceSynthesisCertaintyCertaintySubcomponent", getter="certaintySubcomponent", setter="certaintySubcomponent", searcher=StringSearch("certaintySubcomponent"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        rating = EmbeddedAttribute(type="CodeableConcept", getter="rating", setter="rating", searcher=StringSearch("rating"))

class EffectEvidenceSynthesisCertaintyCertaintySubcomponent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    rating = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        rating = EmbeddedAttribute(type="CodeableConcept", getter="rating", setter="rating", searcher=StringSearch("rating"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class EffectEvidenceSynthesisEffectEstimate(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    precisionEstimate = fields.EmbeddedDocumentListField("EffectEvidenceSynthesisEffectEstimatePrecisionEstimate", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    unitOfMeasure = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    variantState = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        precisionEstimate = EmbeddedAttribute(type="EffectEvidenceSynthesisEffectEstimatePrecisionEstimate", getter="precisionEstimate", setter="precisionEstimate", searcher=StringSearch("precisionEstimate"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        unitOfMeasure = EmbeddedAttribute(type="CodeableConcept", getter="unitOfMeasure", setter="unitOfMeasure", searcher=StringSearch("unitOfMeasure"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))
        variantState = EmbeddedAttribute(type="CodeableConcept", getter="variantState", setter="variantState", searcher=StringSearch("variantState"))

class EffectEvidenceSynthesisEffectEstimatePrecisionEstimate(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    from_ = fields.FloatField(blank=True, required=False)
    level = fields.FloatField(blank=True, required=False)
    to = fields.FloatField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        from_ = Attribute(getter="from_", setter="from_", searcher=NumericSearch("from_"))
        level = Attribute(getter="level", setter="level", searcher=NumericSearch("level"))
        to = Attribute(getter="to", setter="to", searcher=NumericSearch("to"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class EffectEvidenceSynthesisResultsByExposure(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    exposureState = fields.CharField(blank=True, required=False)
    riskEvidenceSynthesis = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    variantState = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        exposureState = Attribute(getter="exposureState", setter="exposureState", searcher=StringSearch("exposureState"))
        riskEvidenceSynthesis = EmbeddedAttribute(type="FHIRReference", getter="riskEvidenceSynthesis", setter="riskEvidenceSynthesis", searcher=StringSearch("riskEvidenceSynthesis"))
        variantState = EmbeddedAttribute(type="CodeableConcept", getter="variantState", setter="variantState", searcher=StringSearch("variantState"))

class EffectEvidenceSynthesisSampleSize(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    numberOfParticipants = fields.IntegerField(blank=True, required=False)
    numberOfStudies = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        numberOfParticipants = Attribute(getter="numberOfParticipants", setter="numberOfParticipants", searcher=NumericSearch("numberOfParticipants"))
        numberOfStudies = Attribute(getter="numberOfStudies", setter="numberOfStudies", searcher=NumericSearch("numberOfStudies"))

class Element(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))

class ElementDefinition(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    alias = fields.ListField(fields.CharField(), blank=True, required=False)
    base = fields.EmbeddedDocumentField("ElementDefinitionBase", blank=True, required=False)
    binding = fields.EmbeddedDocumentField("ElementDefinitionBinding", blank=True, required=False)
    code = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    condition = fields.ListField(fields.CharField(), blank=True, required=False)
    constraint = fields.EmbeddedDocumentListField("ElementDefinitionConstraint", blank=True, required=False)
    contentReference = fields.CharField(blank=True, required=False)
    defaultValueAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    defaultValueAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    defaultValueAnnotation = fields.EmbeddedDocumentField("Annotation", blank=True, required=False)
    defaultValueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    defaultValueBase64Binary = fields.CharField(blank=True, required=False)
    defaultValueBoolean = fields.BooleanField(blank=True, required=False)
    defaultValueCanonical = fields.CharField(blank=True, required=False)
    defaultValueCode = fields.CharField(blank=True, required=False)
    defaultValueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    defaultValueCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    defaultValueContactDetail = fields.EmbeddedDocumentField("ContactDetail", blank=True, required=False)
    defaultValueContactPoint = fields.EmbeddedDocumentField("ContactPoint", blank=True, required=False)
    defaultValueContributor = fields.EmbeddedDocumentField("Contributor", blank=True, required=False)
    defaultValueCount = fields.EmbeddedDocumentField("Count", blank=True, required=False)
    defaultValueDataRequirement = fields.EmbeddedDocumentField("DataRequirement", blank=True, required=False)
    defaultValueDate = fields.DateTimeField(blank=True, required=False)
    defaultValueDateTime = fields.DateTimeField(blank=True, required=False)
    defaultValueDecimal = fields.FloatField(blank=True, required=False)
    defaultValueDistance = fields.EmbeddedDocumentField("Distance", blank=True, required=False)
    defaultValueDosage = fields.EmbeddedDocumentField("Dosage", blank=True, required=False)
    defaultValueDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    defaultValueExpression = fields.EmbeddedDocumentField("Expression", blank=True, required=False)
    defaultValueHumanName = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    defaultValueId = fields.CharField(blank=True, required=False)
    defaultValueIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    defaultValueInstant = fields.DateTimeField(blank=True, required=False)
    defaultValueInteger = fields.IntegerField(blank=True, required=False)
    defaultValueMarkdown = fields.CharField(blank=True, required=False)
    defaultValueMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    defaultValueOid = fields.CharField(blank=True, required=False)
    defaultValueParameterDefinition = fields.EmbeddedDocumentField("ParameterDefinition", blank=True, required=False)
    defaultValuePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    defaultValuePositiveInt = fields.IntegerField(blank=True, required=False)
    defaultValueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    defaultValueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    defaultValueRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    defaultValueReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    defaultValueRelatedArtifact = fields.EmbeddedDocumentField("RelatedArtifact", blank=True, required=False)
    defaultValueSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    defaultValueSignature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    defaultValueString = fields.CharField(blank=True, required=False)
    defaultValueTime = fields.DateTimeField(blank=True, required=False)
    defaultValueTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    defaultValueTriggerDefinition = fields.EmbeddedDocumentField("TriggerDefinition", blank=True, required=False)
    defaultValueUnsignedInt = fields.IntegerField(blank=True, required=False)
    defaultValueUri = fields.CharField(blank=True, required=False)
    defaultValueUrl = fields.CharField(blank=True, required=False)
    defaultValueUsageContext = fields.EmbeddedDocumentField("UsageContext", blank=True, required=False)
    defaultValueUuid = fields.CharField(blank=True, required=False)
    definition = fields.CharField(blank=True, required=False)
    example = fields.EmbeddedDocumentListField("ElementDefinitionExample", blank=True, required=False)
    fixedAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    fixedAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    fixedAnnotation = fields.EmbeddedDocumentField("Annotation", blank=True, required=False)
    fixedAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    fixedBase64Binary = fields.CharField(blank=True, required=False)
    fixedBoolean = fields.BooleanField(blank=True, required=False)
    fixedCanonical = fields.CharField(blank=True, required=False)
    fixedCode = fields.CharField(blank=True, required=False)
    fixedCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    fixedCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    fixedContactDetail = fields.EmbeddedDocumentField("ContactDetail", blank=True, required=False)
    fixedContactPoint = fields.EmbeddedDocumentField("ContactPoint", blank=True, required=False)
    fixedContributor = fields.EmbeddedDocumentField("Contributor", blank=True, required=False)
    fixedCount = fields.EmbeddedDocumentField("Count", blank=True, required=False)
    fixedDataRequirement = fields.EmbeddedDocumentField("DataRequirement", blank=True, required=False)
    fixedDate = fields.DateTimeField(blank=True, required=False)
    fixedDateTime = fields.DateTimeField(blank=True, required=False)
    fixedDecimal = fields.FloatField(blank=True, required=False)
    fixedDistance = fields.EmbeddedDocumentField("Distance", blank=True, required=False)
    fixedDosage = fields.EmbeddedDocumentField("Dosage", blank=True, required=False)
    fixedDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    fixedExpression = fields.EmbeddedDocumentField("Expression", blank=True, required=False)
    fixedHumanName = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    fixedId = fields.CharField(blank=True, required=False)
    fixedIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    fixedInstant = fields.DateTimeField(blank=True, required=False)
    fixedInteger = fields.IntegerField(blank=True, required=False)
    fixedMarkdown = fields.CharField(blank=True, required=False)
    fixedMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    fixedOid = fields.CharField(blank=True, required=False)
    fixedParameterDefinition = fields.EmbeddedDocumentField("ParameterDefinition", blank=True, required=False)
    fixedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    fixedPositiveInt = fields.IntegerField(blank=True, required=False)
    fixedQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    fixedRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    fixedRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    fixedReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    fixedRelatedArtifact = fields.EmbeddedDocumentField("RelatedArtifact", blank=True, required=False)
    fixedSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    fixedSignature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    fixedString = fields.CharField(blank=True, required=False)
    fixedTime = fields.DateTimeField(blank=True, required=False)
    fixedTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    fixedTriggerDefinition = fields.EmbeddedDocumentField("TriggerDefinition", blank=True, required=False)
    fixedUnsignedInt = fields.IntegerField(blank=True, required=False)
    fixedUri = fields.CharField(blank=True, required=False)
    fixedUrl = fields.CharField(blank=True, required=False)
    fixedUsageContext = fields.EmbeddedDocumentField("UsageContext", blank=True, required=False)
    fixedUuid = fields.CharField(blank=True, required=False)
    isModifier = fields.BooleanField(blank=True, required=False)
    isModifierReason = fields.CharField(blank=True, required=False)
    isSummary = fields.BooleanField(blank=True, required=False)
    label = fields.CharField(blank=True, required=False)
    mapping = fields.EmbeddedDocumentListField("ElementDefinitionMapping", blank=True, required=False)
    max = fields.CharField(blank=True, required=False)
    maxLength = fields.IntegerField(blank=True, required=False)
    maxValueDate = fields.DateTimeField(blank=True, required=False)
    maxValueDateTime = fields.DateTimeField(blank=True, required=False)
    maxValueDecimal = fields.FloatField(blank=True, required=False)
    maxValueInstant = fields.DateTimeField(blank=True, required=False)
    maxValueInteger = fields.IntegerField(blank=True, required=False)
    maxValuePositiveInt = fields.IntegerField(blank=True, required=False)
    maxValueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    maxValueTime = fields.DateTimeField(blank=True, required=False)
    maxValueUnsignedInt = fields.IntegerField(blank=True, required=False)
    meaningWhenMissing = fields.CharField(blank=True, required=False)
    min = fields.IntegerField(blank=True, required=False)
    minValueDate = fields.DateTimeField(blank=True, required=False)
    minValueDateTime = fields.DateTimeField(blank=True, required=False)
    minValueDecimal = fields.FloatField(blank=True, required=False)
    minValueInstant = fields.DateTimeField(blank=True, required=False)
    minValueInteger = fields.IntegerField(blank=True, required=False)
    minValuePositiveInt = fields.IntegerField(blank=True, required=False)
    minValueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    minValueTime = fields.DateTimeField(blank=True, required=False)
    minValueUnsignedInt = fields.IntegerField(blank=True, required=False)
    mustSupport = fields.BooleanField(blank=True, required=False)
    orderMeaning = fields.CharField(blank=True, required=False)
    path = fields.CharField(blank=False, required=True)
    patternAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    patternAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    patternAnnotation = fields.EmbeddedDocumentField("Annotation", blank=True, required=False)
    patternAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    patternBase64Binary = fields.CharField(blank=True, required=False)
    patternBoolean = fields.BooleanField(blank=True, required=False)
    patternCanonical = fields.CharField(blank=True, required=False)
    patternCode = fields.CharField(blank=True, required=False)
    patternCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    patternCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    patternContactDetail = fields.EmbeddedDocumentField("ContactDetail", blank=True, required=False)
    patternContactPoint = fields.EmbeddedDocumentField("ContactPoint", blank=True, required=False)
    patternContributor = fields.EmbeddedDocumentField("Contributor", blank=True, required=False)
    patternCount = fields.EmbeddedDocumentField("Count", blank=True, required=False)
    patternDataRequirement = fields.EmbeddedDocumentField("DataRequirement", blank=True, required=False)
    patternDate = fields.DateTimeField(blank=True, required=False)
    patternDateTime = fields.DateTimeField(blank=True, required=False)
    patternDecimal = fields.FloatField(blank=True, required=False)
    patternDistance = fields.EmbeddedDocumentField("Distance", blank=True, required=False)
    patternDosage = fields.EmbeddedDocumentField("Dosage", blank=True, required=False)
    patternDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    patternExpression = fields.EmbeddedDocumentField("Expression", blank=True, required=False)
    patternHumanName = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    patternId = fields.CharField(blank=True, required=False)
    patternIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    patternInstant = fields.DateTimeField(blank=True, required=False)
    patternInteger = fields.IntegerField(blank=True, required=False)
    patternMarkdown = fields.CharField(blank=True, required=False)
    patternMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    patternOid = fields.CharField(blank=True, required=False)
    patternParameterDefinition = fields.EmbeddedDocumentField("ParameterDefinition", blank=True, required=False)
    patternPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    patternPositiveInt = fields.IntegerField(blank=True, required=False)
    patternQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    patternRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    patternRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    patternReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    patternRelatedArtifact = fields.EmbeddedDocumentField("RelatedArtifact", blank=True, required=False)
    patternSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    patternSignature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    patternString = fields.CharField(blank=True, required=False)
    patternTime = fields.DateTimeField(blank=True, required=False)
    patternTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    patternTriggerDefinition = fields.EmbeddedDocumentField("TriggerDefinition", blank=True, required=False)
    patternUnsignedInt = fields.IntegerField(blank=True, required=False)
    patternUri = fields.CharField(blank=True, required=False)
    patternUrl = fields.CharField(blank=True, required=False)
    patternUsageContext = fields.EmbeddedDocumentField("UsageContext", blank=True, required=False)
    patternUuid = fields.CharField(blank=True, required=False)
    representation = fields.ListField(fields.CharField(), blank=True, required=False)
    requirements = fields.CharField(blank=True, required=False)
    short = fields.CharField(blank=True, required=False)
    sliceIsConstraining = fields.BooleanField(blank=True, required=False)
    sliceName = fields.CharField(blank=True, required=False)
    slicing = fields.EmbeddedDocumentField("ElementDefinitionSlicing", blank=True, required=False)
    type = fields.EmbeddedDocumentListField("ElementDefinitionType", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        alias = Attribute(getter="alias", setter="alias", searcher=StringSearch("alias"))
        base = EmbeddedAttribute(type="ElementDefinitionBase", getter="base", setter="base", searcher=StringSearch("base"))
        binding = EmbeddedAttribute(type="ElementDefinitionBinding", getter="binding", setter="binding", searcher=StringSearch("binding"))
        code = EmbeddedAttribute(type="Coding", getter="code", setter="code", searcher=StringSearch("code"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        condition = Attribute(getter="condition", setter="condition", searcher=StringSearch("condition"))
        constraint = EmbeddedAttribute(type="ElementDefinitionConstraint", getter="constraint", setter="constraint", searcher=StringSearch("constraint"))
        contentReference = Attribute(getter="contentReference", setter="contentReference", searcher=StringSearch("contentReference"))
        defaultValueAddress = EmbeddedAttribute(type="Address", getter="defaultValueAddress", setter="defaultValueAddress", searcher=StringSearch("defaultValueAddress"))
        defaultValueAge = EmbeddedAttribute(type="Age", getter="defaultValueAge", setter="defaultValueAge", searcher=StringSearch("defaultValueAge"))
        defaultValueAnnotation = EmbeddedAttribute(type="Annotation", getter="defaultValueAnnotation", setter="defaultValueAnnotation", searcher=StringSearch("defaultValueAnnotation"))
        defaultValueAttachment = EmbeddedAttribute(type="Attachment", getter="defaultValueAttachment", setter="defaultValueAttachment", searcher=StringSearch("defaultValueAttachment"))
        defaultValueBase64Binary = Attribute(getter="defaultValueBase64Binary", setter="defaultValueBase64Binary", searcher=StringSearch("defaultValueBase64Binary"))
        defaultValueBoolean = Attribute(getter="defaultValueBoolean", setter="defaultValueBoolean", searcher=StringSearch("defaultValueBoolean"))
        defaultValueCanonical = Attribute(getter="defaultValueCanonical", setter="defaultValueCanonical", searcher=StringSearch("defaultValueCanonical"))
        defaultValueCode = Attribute(getter="defaultValueCode", setter="defaultValueCode", searcher=StringSearch("defaultValueCode"))
        defaultValueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="defaultValueCodeableConcept", setter="defaultValueCodeableConcept", searcher=StringSearch("defaultValueCodeableConcept"))
        defaultValueCoding = EmbeddedAttribute(type="Coding", getter="defaultValueCoding", setter="defaultValueCoding", searcher=StringSearch("defaultValueCoding"))
        defaultValueContactDetail = EmbeddedAttribute(type="ContactDetail", getter="defaultValueContactDetail", setter="defaultValueContactDetail", searcher=StringSearch("defaultValueContactDetail"))
        defaultValueContactPoint = EmbeddedAttribute(type="ContactPoint", getter="defaultValueContactPoint", setter="defaultValueContactPoint", searcher=StringSearch("defaultValueContactPoint"))
        defaultValueContributor = EmbeddedAttribute(type="Contributor", getter="defaultValueContributor", setter="defaultValueContributor", searcher=StringSearch("defaultValueContributor"))
        defaultValueCount = EmbeddedAttribute(type="Count", getter="defaultValueCount", setter="defaultValueCount", searcher=StringSearch("defaultValueCount"))
        defaultValueDataRequirement = EmbeddedAttribute(type="DataRequirement", getter="defaultValueDataRequirement", setter="defaultValueDataRequirement", searcher=StringSearch("defaultValueDataRequirement"))
        defaultValueDate = DateAttribute("defaultValueDate")
        defaultValueDateTime = DateAttribute("defaultValueDateTime")
        defaultValueDecimal = Attribute(getter="defaultValueDecimal", setter="defaultValueDecimal", searcher=NumericSearch("defaultValueDecimal"))
        defaultValueDistance = EmbeddedAttribute(type="Distance", getter="defaultValueDistance", setter="defaultValueDistance", searcher=StringSearch("defaultValueDistance"))
        defaultValueDosage = EmbeddedAttribute(type="Dosage", getter="defaultValueDosage", setter="defaultValueDosage", searcher=StringSearch("defaultValueDosage"))
        defaultValueDuration = EmbeddedAttribute(type="Duration", getter="defaultValueDuration", setter="defaultValueDuration", searcher=StringSearch("defaultValueDuration"))
        defaultValueExpression = EmbeddedAttribute(type="Expression", getter="defaultValueExpression", setter="defaultValueExpression", searcher=StringSearch("defaultValueExpression"))
        defaultValueHumanName = EmbeddedAttribute(type="HumanName", getter="defaultValueHumanName", setter="defaultValueHumanName", searcher=StringSearch("defaultValueHumanName"))
        defaultValueId = Attribute(getter="defaultValueId", setter="defaultValueId", searcher=StringSearch("defaultValueId"))
        defaultValueIdentifier = EmbeddedAttribute(type="Identifier", getter="defaultValueIdentifier", setter="defaultValueIdentifier", searcher=StringSearch("defaultValueIdentifier"))
        defaultValueInstant = DateAttribute("defaultValueInstant")
        defaultValueInteger = Attribute(getter="defaultValueInteger", setter="defaultValueInteger", searcher=NumericSearch("defaultValueInteger"))
        defaultValueMarkdown = Attribute(getter="defaultValueMarkdown", setter="defaultValueMarkdown", searcher=StringSearch("defaultValueMarkdown"))
        defaultValueMoney = EmbeddedAttribute(type="Money", getter="defaultValueMoney", setter="defaultValueMoney", searcher=StringSearch("defaultValueMoney"))
        defaultValueOid = Attribute(getter="defaultValueOid", setter="defaultValueOid", searcher=StringSearch("defaultValueOid"))
        defaultValueParameterDefinition = EmbeddedAttribute(type="ParameterDefinition", getter="defaultValueParameterDefinition", setter="defaultValueParameterDefinition", searcher=StringSearch("defaultValueParameterDefinition"))
        defaultValuePeriod = EmbeddedAttribute(type="Period", getter="defaultValuePeriod", setter="defaultValuePeriod", searcher=StringSearch("defaultValuePeriod"))
        defaultValuePositiveInt = Attribute(getter="defaultValuePositiveInt", setter="defaultValuePositiveInt", searcher=NumericSearch("defaultValuePositiveInt"))
        defaultValueQuantity = EmbeddedAttribute(type="Quantity", getter="defaultValueQuantity", setter="defaultValueQuantity", searcher=StringSearch("defaultValueQuantity"))
        defaultValueRange = EmbeddedAttribute(type="Range", getter="defaultValueRange", setter="defaultValueRange", searcher=StringSearch("defaultValueRange"))
        defaultValueRatio = EmbeddedAttribute(type="Ratio", getter="defaultValueRatio", setter="defaultValueRatio", searcher=StringSearch("defaultValueRatio"))
        defaultValueReference = EmbeddedAttribute(type="FHIRReference", getter="defaultValueReference", setter="defaultValueReference", searcher=StringSearch("defaultValueReference"))
        defaultValueRelatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="defaultValueRelatedArtifact", setter="defaultValueRelatedArtifact", searcher=StringSearch("defaultValueRelatedArtifact"))
        defaultValueSampledData = EmbeddedAttribute(type="SampledData", getter="defaultValueSampledData", setter="defaultValueSampledData", searcher=StringSearch("defaultValueSampledData"))
        defaultValueSignature = EmbeddedAttribute(type="Signature", getter="defaultValueSignature", setter="defaultValueSignature", searcher=StringSearch("defaultValueSignature"))
        defaultValueString = Attribute(getter="defaultValueString", setter="defaultValueString", searcher=StringSearch("defaultValueString"))
        defaultValueTime = DateAttribute("defaultValueTime")
        defaultValueTiming = EmbeddedAttribute(type="Timing", getter="defaultValueTiming", setter="defaultValueTiming", searcher=StringSearch("defaultValueTiming"))
        defaultValueTriggerDefinition = EmbeddedAttribute(type="TriggerDefinition", getter="defaultValueTriggerDefinition", setter="defaultValueTriggerDefinition", searcher=StringSearch("defaultValueTriggerDefinition"))
        defaultValueUnsignedInt = Attribute(getter="defaultValueUnsignedInt", setter="defaultValueUnsignedInt", searcher=NumericSearch("defaultValueUnsignedInt"))
        defaultValueUri = Attribute(getter="defaultValueUri", setter="defaultValueUri", searcher=StringSearch("defaultValueUri"))
        defaultValueUrl = Attribute(getter="defaultValueUrl", setter="defaultValueUrl", searcher=StringSearch("defaultValueUrl"))
        defaultValueUsageContext = EmbeddedAttribute(type="UsageContext", getter="defaultValueUsageContext", setter="defaultValueUsageContext", searcher=StringSearch("defaultValueUsageContext"))
        defaultValueUuid = Attribute(getter="defaultValueUuid", setter="defaultValueUuid", searcher=StringSearch("defaultValueUuid"))
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        example = EmbeddedAttribute(type="ElementDefinitionExample", getter="example", setter="example", searcher=StringSearch("example"))
        fixedAddress = EmbeddedAttribute(type="Address", getter="fixedAddress", setter="fixedAddress", searcher=StringSearch("fixedAddress"))
        fixedAge = EmbeddedAttribute(type="Age", getter="fixedAge", setter="fixedAge", searcher=StringSearch("fixedAge"))
        fixedAnnotation = EmbeddedAttribute(type="Annotation", getter="fixedAnnotation", setter="fixedAnnotation", searcher=StringSearch("fixedAnnotation"))
        fixedAttachment = EmbeddedAttribute(type="Attachment", getter="fixedAttachment", setter="fixedAttachment", searcher=StringSearch("fixedAttachment"))
        fixedBase64Binary = Attribute(getter="fixedBase64Binary", setter="fixedBase64Binary", searcher=StringSearch("fixedBase64Binary"))
        fixedBoolean = Attribute(getter="fixedBoolean", setter="fixedBoolean", searcher=StringSearch("fixedBoolean"))
        fixedCanonical = Attribute(getter="fixedCanonical", setter="fixedCanonical", searcher=StringSearch("fixedCanonical"))
        fixedCode = Attribute(getter="fixedCode", setter="fixedCode", searcher=StringSearch("fixedCode"))
        fixedCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="fixedCodeableConcept", setter="fixedCodeableConcept", searcher=StringSearch("fixedCodeableConcept"))
        fixedCoding = EmbeddedAttribute(type="Coding", getter="fixedCoding", setter="fixedCoding", searcher=StringSearch("fixedCoding"))
        fixedContactDetail = EmbeddedAttribute(type="ContactDetail", getter="fixedContactDetail", setter="fixedContactDetail", searcher=StringSearch("fixedContactDetail"))
        fixedContactPoint = EmbeddedAttribute(type="ContactPoint", getter="fixedContactPoint", setter="fixedContactPoint", searcher=StringSearch("fixedContactPoint"))
        fixedContributor = EmbeddedAttribute(type="Contributor", getter="fixedContributor", setter="fixedContributor", searcher=StringSearch("fixedContributor"))
        fixedCount = EmbeddedAttribute(type="Count", getter="fixedCount", setter="fixedCount", searcher=StringSearch("fixedCount"))
        fixedDataRequirement = EmbeddedAttribute(type="DataRequirement", getter="fixedDataRequirement", setter="fixedDataRequirement", searcher=StringSearch("fixedDataRequirement"))
        fixedDate = DateAttribute("fixedDate")
        fixedDateTime = DateAttribute("fixedDateTime")
        fixedDecimal = Attribute(getter="fixedDecimal", setter="fixedDecimal", searcher=NumericSearch("fixedDecimal"))
        fixedDistance = EmbeddedAttribute(type="Distance", getter="fixedDistance", setter="fixedDistance", searcher=StringSearch("fixedDistance"))
        fixedDosage = EmbeddedAttribute(type="Dosage", getter="fixedDosage", setter="fixedDosage", searcher=StringSearch("fixedDosage"))
        fixedDuration = EmbeddedAttribute(type="Duration", getter="fixedDuration", setter="fixedDuration", searcher=StringSearch("fixedDuration"))
        fixedExpression = EmbeddedAttribute(type="Expression", getter="fixedExpression", setter="fixedExpression", searcher=StringSearch("fixedExpression"))
        fixedHumanName = EmbeddedAttribute(type="HumanName", getter="fixedHumanName", setter="fixedHumanName", searcher=StringSearch("fixedHumanName"))
        fixedId = Attribute(getter="fixedId", setter="fixedId", searcher=StringSearch("fixedId"))
        fixedIdentifier = EmbeddedAttribute(type="Identifier", getter="fixedIdentifier", setter="fixedIdentifier", searcher=StringSearch("fixedIdentifier"))
        fixedInstant = DateAttribute("fixedInstant")
        fixedInteger = Attribute(getter="fixedInteger", setter="fixedInteger", searcher=NumericSearch("fixedInteger"))
        fixedMarkdown = Attribute(getter="fixedMarkdown", setter="fixedMarkdown", searcher=StringSearch("fixedMarkdown"))
        fixedMoney = EmbeddedAttribute(type="Money", getter="fixedMoney", setter="fixedMoney", searcher=StringSearch("fixedMoney"))
        fixedOid = Attribute(getter="fixedOid", setter="fixedOid", searcher=StringSearch("fixedOid"))
        fixedParameterDefinition = EmbeddedAttribute(type="ParameterDefinition", getter="fixedParameterDefinition", setter="fixedParameterDefinition", searcher=StringSearch("fixedParameterDefinition"))
        fixedPeriod = EmbeddedAttribute(type="Period", getter="fixedPeriod", setter="fixedPeriod", searcher=StringSearch("fixedPeriod"))
        fixedPositiveInt = Attribute(getter="fixedPositiveInt", setter="fixedPositiveInt", searcher=NumericSearch("fixedPositiveInt"))
        fixedQuantity = EmbeddedAttribute(type="Quantity", getter="fixedQuantity", setter="fixedQuantity", searcher=StringSearch("fixedQuantity"))
        fixedRange = EmbeddedAttribute(type="Range", getter="fixedRange", setter="fixedRange", searcher=StringSearch("fixedRange"))
        fixedRatio = EmbeddedAttribute(type="Ratio", getter="fixedRatio", setter="fixedRatio", searcher=StringSearch("fixedRatio"))
        fixedReference = EmbeddedAttribute(type="FHIRReference", getter="fixedReference", setter="fixedReference", searcher=StringSearch("fixedReference"))
        fixedRelatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="fixedRelatedArtifact", setter="fixedRelatedArtifact", searcher=StringSearch("fixedRelatedArtifact"))
        fixedSampledData = EmbeddedAttribute(type="SampledData", getter="fixedSampledData", setter="fixedSampledData", searcher=StringSearch("fixedSampledData"))
        fixedSignature = EmbeddedAttribute(type="Signature", getter="fixedSignature", setter="fixedSignature", searcher=StringSearch("fixedSignature"))
        fixedString = Attribute(getter="fixedString", setter="fixedString", searcher=StringSearch("fixedString"))
        fixedTime = DateAttribute("fixedTime")
        fixedTiming = EmbeddedAttribute(type="Timing", getter="fixedTiming", setter="fixedTiming", searcher=StringSearch("fixedTiming"))
        fixedTriggerDefinition = EmbeddedAttribute(type="TriggerDefinition", getter="fixedTriggerDefinition", setter="fixedTriggerDefinition", searcher=StringSearch("fixedTriggerDefinition"))
        fixedUnsignedInt = Attribute(getter="fixedUnsignedInt", setter="fixedUnsignedInt", searcher=NumericSearch("fixedUnsignedInt"))
        fixedUri = Attribute(getter="fixedUri", setter="fixedUri", searcher=StringSearch("fixedUri"))
        fixedUrl = Attribute(getter="fixedUrl", setter="fixedUrl", searcher=StringSearch("fixedUrl"))
        fixedUsageContext = EmbeddedAttribute(type="UsageContext", getter="fixedUsageContext", setter="fixedUsageContext", searcher=StringSearch("fixedUsageContext"))
        fixedUuid = Attribute(getter="fixedUuid", setter="fixedUuid", searcher=StringSearch("fixedUuid"))
        isModifier = Attribute(getter="isModifier", setter="isModifier", searcher=StringSearch("isModifier"))
        isModifierReason = Attribute(getter="isModifierReason", setter="isModifierReason", searcher=StringSearch("isModifierReason"))
        isSummary = Attribute(getter="isSummary", setter="isSummary", searcher=StringSearch("isSummary"))
        label = Attribute(getter="label", setter="label", searcher=StringSearch("label"))
        mapping = EmbeddedAttribute(type="ElementDefinitionMapping", getter="mapping", setter="mapping", searcher=StringSearch("mapping"))
        max = Attribute(getter="max", setter="max", searcher=StringSearch("max"))
        maxLength = Attribute(getter="maxLength", setter="maxLength", searcher=NumericSearch("maxLength"))
        maxValueDate = DateAttribute("maxValueDate")
        maxValueDateTime = DateAttribute("maxValueDateTime")
        maxValueDecimal = Attribute(getter="maxValueDecimal", setter="maxValueDecimal", searcher=NumericSearch("maxValueDecimal"))
        maxValueInstant = DateAttribute("maxValueInstant")
        maxValueInteger = Attribute(getter="maxValueInteger", setter="maxValueInteger", searcher=NumericSearch("maxValueInteger"))
        maxValuePositiveInt = Attribute(getter="maxValuePositiveInt", setter="maxValuePositiveInt", searcher=NumericSearch("maxValuePositiveInt"))
        maxValueQuantity = EmbeddedAttribute(type="Quantity", getter="maxValueQuantity", setter="maxValueQuantity", searcher=StringSearch("maxValueQuantity"))
        maxValueTime = DateAttribute("maxValueTime")
        maxValueUnsignedInt = Attribute(getter="maxValueUnsignedInt", setter="maxValueUnsignedInt", searcher=NumericSearch("maxValueUnsignedInt"))
        meaningWhenMissing = Attribute(getter="meaningWhenMissing", setter="meaningWhenMissing", searcher=StringSearch("meaningWhenMissing"))
        min = Attribute(getter="min", setter="min", searcher=NumericSearch("min"))
        minValueDate = DateAttribute("minValueDate")
        minValueDateTime = DateAttribute("minValueDateTime")
        minValueDecimal = Attribute(getter="minValueDecimal", setter="minValueDecimal", searcher=NumericSearch("minValueDecimal"))
        minValueInstant = DateAttribute("minValueInstant")
        minValueInteger = Attribute(getter="minValueInteger", setter="minValueInteger", searcher=NumericSearch("minValueInteger"))
        minValuePositiveInt = Attribute(getter="minValuePositiveInt", setter="minValuePositiveInt", searcher=NumericSearch("minValuePositiveInt"))
        minValueQuantity = EmbeddedAttribute(type="Quantity", getter="minValueQuantity", setter="minValueQuantity", searcher=StringSearch("minValueQuantity"))
        minValueTime = DateAttribute("minValueTime")
        minValueUnsignedInt = Attribute(getter="minValueUnsignedInt", setter="minValueUnsignedInt", searcher=NumericSearch("minValueUnsignedInt"))
        mustSupport = Attribute(getter="mustSupport", setter="mustSupport", searcher=StringSearch("mustSupport"))
        orderMeaning = Attribute(getter="orderMeaning", setter="orderMeaning", searcher=StringSearch("orderMeaning"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))
        patternAddress = EmbeddedAttribute(type="Address", getter="patternAddress", setter="patternAddress", searcher=StringSearch("patternAddress"))
        patternAge = EmbeddedAttribute(type="Age", getter="patternAge", setter="patternAge", searcher=StringSearch("patternAge"))
        patternAnnotation = EmbeddedAttribute(type="Annotation", getter="patternAnnotation", setter="patternAnnotation", searcher=StringSearch("patternAnnotation"))
        patternAttachment = EmbeddedAttribute(type="Attachment", getter="patternAttachment", setter="patternAttachment", searcher=StringSearch("patternAttachment"))
        patternBase64Binary = Attribute(getter="patternBase64Binary", setter="patternBase64Binary", searcher=StringSearch("patternBase64Binary"))
        patternBoolean = Attribute(getter="patternBoolean", setter="patternBoolean", searcher=StringSearch("patternBoolean"))
        patternCanonical = Attribute(getter="patternCanonical", setter="patternCanonical", searcher=StringSearch("patternCanonical"))
        patternCode = Attribute(getter="patternCode", setter="patternCode", searcher=StringSearch("patternCode"))
        patternCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="patternCodeableConcept", setter="patternCodeableConcept", searcher=StringSearch("patternCodeableConcept"))
        patternCoding = EmbeddedAttribute(type="Coding", getter="patternCoding", setter="patternCoding", searcher=StringSearch("patternCoding"))
        patternContactDetail = EmbeddedAttribute(type="ContactDetail", getter="patternContactDetail", setter="patternContactDetail", searcher=StringSearch("patternContactDetail"))
        patternContactPoint = EmbeddedAttribute(type="ContactPoint", getter="patternContactPoint", setter="patternContactPoint", searcher=StringSearch("patternContactPoint"))
        patternContributor = EmbeddedAttribute(type="Contributor", getter="patternContributor", setter="patternContributor", searcher=StringSearch("patternContributor"))
        patternCount = EmbeddedAttribute(type="Count", getter="patternCount", setter="patternCount", searcher=StringSearch("patternCount"))
        patternDataRequirement = EmbeddedAttribute(type="DataRequirement", getter="patternDataRequirement", setter="patternDataRequirement", searcher=StringSearch("patternDataRequirement"))
        patternDate = DateAttribute("patternDate")
        patternDateTime = DateAttribute("patternDateTime")
        patternDecimal = Attribute(getter="patternDecimal", setter="patternDecimal", searcher=NumericSearch("patternDecimal"))
        patternDistance = EmbeddedAttribute(type="Distance", getter="patternDistance", setter="patternDistance", searcher=StringSearch("patternDistance"))
        patternDosage = EmbeddedAttribute(type="Dosage", getter="patternDosage", setter="patternDosage", searcher=StringSearch("patternDosage"))
        patternDuration = EmbeddedAttribute(type="Duration", getter="patternDuration", setter="patternDuration", searcher=StringSearch("patternDuration"))
        patternExpression = EmbeddedAttribute(type="Expression", getter="patternExpression", setter="patternExpression", searcher=StringSearch("patternExpression"))
        patternHumanName = EmbeddedAttribute(type="HumanName", getter="patternHumanName", setter="patternHumanName", searcher=StringSearch("patternHumanName"))
        patternId = Attribute(getter="patternId", setter="patternId", searcher=StringSearch("patternId"))
        patternIdentifier = EmbeddedAttribute(type="Identifier", getter="patternIdentifier", setter="patternIdentifier", searcher=StringSearch("patternIdentifier"))
        patternInstant = DateAttribute("patternInstant")
        patternInteger = Attribute(getter="patternInteger", setter="patternInteger", searcher=NumericSearch("patternInteger"))
        patternMarkdown = Attribute(getter="patternMarkdown", setter="patternMarkdown", searcher=StringSearch("patternMarkdown"))
        patternMoney = EmbeddedAttribute(type="Money", getter="patternMoney", setter="patternMoney", searcher=StringSearch("patternMoney"))
        patternOid = Attribute(getter="patternOid", setter="patternOid", searcher=StringSearch("patternOid"))
        patternParameterDefinition = EmbeddedAttribute(type="ParameterDefinition", getter="patternParameterDefinition", setter="patternParameterDefinition", searcher=StringSearch("patternParameterDefinition"))
        patternPeriod = EmbeddedAttribute(type="Period", getter="patternPeriod", setter="patternPeriod", searcher=StringSearch("patternPeriod"))
        patternPositiveInt = Attribute(getter="patternPositiveInt", setter="patternPositiveInt", searcher=NumericSearch("patternPositiveInt"))
        patternQuantity = EmbeddedAttribute(type="Quantity", getter="patternQuantity", setter="patternQuantity", searcher=StringSearch("patternQuantity"))
        patternRange = EmbeddedAttribute(type="Range", getter="patternRange", setter="patternRange", searcher=StringSearch("patternRange"))
        patternRatio = EmbeddedAttribute(type="Ratio", getter="patternRatio", setter="patternRatio", searcher=StringSearch("patternRatio"))
        patternReference = EmbeddedAttribute(type="FHIRReference", getter="patternReference", setter="patternReference", searcher=StringSearch("patternReference"))
        patternRelatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="patternRelatedArtifact", setter="patternRelatedArtifact", searcher=StringSearch("patternRelatedArtifact"))
        patternSampledData = EmbeddedAttribute(type="SampledData", getter="patternSampledData", setter="patternSampledData", searcher=StringSearch("patternSampledData"))
        patternSignature = EmbeddedAttribute(type="Signature", getter="patternSignature", setter="patternSignature", searcher=StringSearch("patternSignature"))
        patternString = Attribute(getter="patternString", setter="patternString", searcher=StringSearch("patternString"))
        patternTime = DateAttribute("patternTime")
        patternTiming = EmbeddedAttribute(type="Timing", getter="patternTiming", setter="patternTiming", searcher=StringSearch("patternTiming"))
        patternTriggerDefinition = EmbeddedAttribute(type="TriggerDefinition", getter="patternTriggerDefinition", setter="patternTriggerDefinition", searcher=StringSearch("patternTriggerDefinition"))
        patternUnsignedInt = Attribute(getter="patternUnsignedInt", setter="patternUnsignedInt", searcher=NumericSearch("patternUnsignedInt"))
        patternUri = Attribute(getter="patternUri", setter="patternUri", searcher=StringSearch("patternUri"))
        patternUrl = Attribute(getter="patternUrl", setter="patternUrl", searcher=StringSearch("patternUrl"))
        patternUsageContext = EmbeddedAttribute(type="UsageContext", getter="patternUsageContext", setter="patternUsageContext", searcher=StringSearch("patternUsageContext"))
        patternUuid = Attribute(getter="patternUuid", setter="patternUuid", searcher=StringSearch("patternUuid"))
        representation = Attribute(getter="representation", setter="representation", searcher=StringSearch("representation"))
        requirements = Attribute(getter="requirements", setter="requirements", searcher=StringSearch("requirements"))
        short = Attribute(getter="short", setter="short", searcher=StringSearch("short"))
        sliceIsConstraining = Attribute(getter="sliceIsConstraining", setter="sliceIsConstraining", searcher=StringSearch("sliceIsConstraining"))
        sliceName = Attribute(getter="sliceName", setter="sliceName", searcher=StringSearch("sliceName"))
        slicing = EmbeddedAttribute(type="ElementDefinitionSlicing", getter="slicing", setter="slicing", searcher=StringSearch("slicing"))
        type = EmbeddedAttribute(type="ElementDefinitionType", getter="type", setter="type", searcher=StringSearch("type"))

class ElementDefinitionBase(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    max = fields.CharField(blank=False, required=True)
    min = fields.IntegerField(blank=False, required=True)
    path = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        max = Attribute(getter="max", setter="max", searcher=StringSearch("max"))
        min = Attribute(getter="min", setter="min", searcher=NumericSearch("min"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))

class ElementDefinitionBinding(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    strength = fields.CharField(blank=False, required=True)
    valueSet = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        strength = Attribute(getter="strength", setter="strength", searcher=StringSearch("strength"))
        valueSet = Attribute(getter="valueSet", setter="valueSet", searcher=StringSearch("valueSet"))

class ElementDefinitionConstraint(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    expression = fields.CharField(blank=True, required=False)
    human = fields.CharField(blank=False, required=True)
    key = fields.CharField(blank=False, required=True)
    requirements = fields.CharField(blank=True, required=False)
    severity = fields.CharField(blank=False, required=True)
    source = fields.CharField(blank=True, required=False)
    xpath = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        human = Attribute(getter="human", setter="human", searcher=StringSearch("human"))
        key = Attribute(getter="key", setter="key", searcher=StringSearch("key"))
        requirements = Attribute(getter="requirements", setter="requirements", searcher=StringSearch("requirements"))
        severity = Attribute(getter="severity", setter="severity", searcher=StringSearch("severity"))
        source = Attribute(getter="source", setter="source", searcher=StringSearch("source"))
        xpath = Attribute(getter="xpath", setter="xpath", searcher=StringSearch("xpath"))

class ElementDefinitionExample(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    label = fields.CharField(blank=False, required=True)
    valueAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    valueAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    valueAnnotation = fields.EmbeddedDocumentField("Annotation", blank=True, required=False)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    valueBase64Binary = fields.CharField(blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCanonical = fields.CharField(blank=True, required=False)
    valueCode = fields.CharField(blank=True, required=False)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    valueContactDetail = fields.EmbeddedDocumentField("ContactDetail", blank=True, required=False)
    valueContactPoint = fields.EmbeddedDocumentField("ContactPoint", blank=True, required=False)
    valueContributor = fields.EmbeddedDocumentField("Contributor", blank=True, required=False)
    valueCount = fields.EmbeddedDocumentField("Count", blank=True, required=False)
    valueDataRequirement = fields.EmbeddedDocumentField("DataRequirement", blank=True, required=False)
    valueDate = fields.DateTimeField(blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valueDecimal = fields.FloatField(blank=True, required=False)
    valueDistance = fields.EmbeddedDocumentField("Distance", blank=True, required=False)
    valueDosage = fields.EmbeddedDocumentField("Dosage", blank=True, required=False)
    valueDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    valueExpression = fields.EmbeddedDocumentField("Expression", blank=True, required=False)
    valueHumanName = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    valueId = fields.CharField(blank=True, required=False)
    valueIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    valueInstant = fields.DateTimeField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valueMarkdown = fields.CharField(blank=True, required=False)
    valueMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    valueOid = fields.CharField(blank=True, required=False)
    valueParameterDefinition = fields.EmbeddedDocumentField("ParameterDefinition", blank=True, required=False)
    valuePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    valuePositiveInt = fields.IntegerField(blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    valueRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    valueReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    valueRelatedArtifact = fields.EmbeddedDocumentField("RelatedArtifact", blank=True, required=False)
    valueSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    valueSignature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueTime = fields.DateTimeField(blank=True, required=False)
    valueTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    valueTriggerDefinition = fields.EmbeddedDocumentField("TriggerDefinition", blank=True, required=False)
    valueUnsignedInt = fields.IntegerField(blank=True, required=False)
    valueUri = fields.CharField(blank=True, required=False)
    valueUrl = fields.CharField(blank=True, required=False)
    valueUsageContext = fields.EmbeddedDocumentField("UsageContext", blank=True, required=False)
    valueUuid = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        label = Attribute(getter="label", setter="label", searcher=StringSearch("label"))
        valueAddress = EmbeddedAttribute(type="Address", getter="valueAddress", setter="valueAddress", searcher=StringSearch("valueAddress"))
        valueAge = EmbeddedAttribute(type="Age", getter="valueAge", setter="valueAge", searcher=StringSearch("valueAge"))
        valueAnnotation = EmbeddedAttribute(type="Annotation", getter="valueAnnotation", setter="valueAnnotation", searcher=StringSearch("valueAnnotation"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueBase64Binary = Attribute(getter="valueBase64Binary", setter="valueBase64Binary", searcher=StringSearch("valueBase64Binary"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCanonical = Attribute(getter="valueCanonical", setter="valueCanonical", searcher=StringSearch("valueCanonical"))
        valueCode = Attribute(getter="valueCode", setter="valueCode", searcher=StringSearch("valueCode"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueContactDetail = EmbeddedAttribute(type="ContactDetail", getter="valueContactDetail", setter="valueContactDetail", searcher=StringSearch("valueContactDetail"))
        valueContactPoint = EmbeddedAttribute(type="ContactPoint", getter="valueContactPoint", setter="valueContactPoint", searcher=StringSearch("valueContactPoint"))
        valueContributor = EmbeddedAttribute(type="Contributor", getter="valueContributor", setter="valueContributor", searcher=StringSearch("valueContributor"))
        valueCount = EmbeddedAttribute(type="Count", getter="valueCount", setter="valueCount", searcher=StringSearch("valueCount"))
        valueDataRequirement = EmbeddedAttribute(type="DataRequirement", getter="valueDataRequirement", setter="valueDataRequirement", searcher=StringSearch("valueDataRequirement"))
        valueDate = DateAttribute("valueDate")
        valueDateTime = DateAttribute("valueDateTime")
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueDistance = EmbeddedAttribute(type="Distance", getter="valueDistance", setter="valueDistance", searcher=StringSearch("valueDistance"))
        valueDosage = EmbeddedAttribute(type="Dosage", getter="valueDosage", setter="valueDosage", searcher=StringSearch("valueDosage"))
        valueDuration = EmbeddedAttribute(type="Duration", getter="valueDuration", setter="valueDuration", searcher=StringSearch("valueDuration"))
        valueExpression = EmbeddedAttribute(type="Expression", getter="valueExpression", setter="valueExpression", searcher=StringSearch("valueExpression"))
        valueHumanName = EmbeddedAttribute(type="HumanName", getter="valueHumanName", setter="valueHumanName", searcher=StringSearch("valueHumanName"))
        valueId = Attribute(getter="valueId", setter="valueId", searcher=StringSearch("valueId"))
        valueIdentifier = EmbeddedAttribute(type="Identifier", getter="valueIdentifier", setter="valueIdentifier", searcher=StringSearch("valueIdentifier"))
        valueInstant = DateAttribute("valueInstant")
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueMarkdown = Attribute(getter="valueMarkdown", setter="valueMarkdown", searcher=StringSearch("valueMarkdown"))
        valueMoney = EmbeddedAttribute(type="Money", getter="valueMoney", setter="valueMoney", searcher=StringSearch("valueMoney"))
        valueOid = Attribute(getter="valueOid", setter="valueOid", searcher=StringSearch("valueOid"))
        valueParameterDefinition = EmbeddedAttribute(type="ParameterDefinition", getter="valueParameterDefinition", setter="valueParameterDefinition", searcher=StringSearch("valueParameterDefinition"))
        valuePeriod = EmbeddedAttribute(type="Period", getter="valuePeriod", setter="valuePeriod", searcher=StringSearch("valuePeriod"))
        valuePositiveInt = Attribute(getter="valuePositiveInt", setter="valuePositiveInt", searcher=NumericSearch("valuePositiveInt"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))
        valueRatio = EmbeddedAttribute(type="Ratio", getter="valueRatio", setter="valueRatio", searcher=StringSearch("valueRatio"))
        valueReference = EmbeddedAttribute(type="FHIRReference", getter="valueReference", setter="valueReference", searcher=StringSearch("valueReference"))
        valueRelatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="valueRelatedArtifact", setter="valueRelatedArtifact", searcher=StringSearch("valueRelatedArtifact"))
        valueSampledData = EmbeddedAttribute(type="SampledData", getter="valueSampledData", setter="valueSampledData", searcher=StringSearch("valueSampledData"))
        valueSignature = EmbeddedAttribute(type="Signature", getter="valueSignature", setter="valueSignature", searcher=StringSearch("valueSignature"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")
        valueTiming = EmbeddedAttribute(type="Timing", getter="valueTiming", setter="valueTiming", searcher=StringSearch("valueTiming"))
        valueTriggerDefinition = EmbeddedAttribute(type="TriggerDefinition", getter="valueTriggerDefinition", setter="valueTriggerDefinition", searcher=StringSearch("valueTriggerDefinition"))
        valueUnsignedInt = Attribute(getter="valueUnsignedInt", setter="valueUnsignedInt", searcher=NumericSearch("valueUnsignedInt"))
        valueUri = Attribute(getter="valueUri", setter="valueUri", searcher=StringSearch("valueUri"))
        valueUrl = Attribute(getter="valueUrl", setter="valueUrl", searcher=StringSearch("valueUrl"))
        valueUsageContext = EmbeddedAttribute(type="UsageContext", getter="valueUsageContext", setter="valueUsageContext", searcher=StringSearch("valueUsageContext"))
        valueUuid = Attribute(getter="valueUuid", setter="valueUuid", searcher=StringSearch("valueUuid"))

class ElementDefinitionMapping(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    identity = fields.CharField(blank=False, required=True)
    language = fields.CharField(blank=True, required=False)
    map = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        identity = Attribute(getter="identity", setter="identity", searcher=StringSearch("identity"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        map = Attribute(getter="map", setter="map", searcher=StringSearch("map"))

class ElementDefinitionSlicing(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    discriminator = fields.EmbeddedDocumentListField("ElementDefinitionSlicingDiscriminator", blank=True, required=False)
    ordered = fields.BooleanField(blank=True, required=False)
    rules = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        discriminator = EmbeddedAttribute(type="ElementDefinitionSlicingDiscriminator", getter="discriminator", setter="discriminator", searcher=StringSearch("discriminator"))
        ordered = Attribute(getter="ordered", setter="ordered", searcher=StringSearch("ordered"))
        rules = Attribute(getter="rules", setter="rules", searcher=StringSearch("rules"))

class ElementDefinitionSlicingDiscriminator(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    path = fields.CharField(blank=False, required=True)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class ElementDefinitionType(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    aggregation = fields.ListField(fields.CharField(), blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    profile = fields.ListField(fields.CharField(), blank=True, required=False)
    targetProfile = fields.ListField(fields.CharField(), blank=True, required=False)
    versioning = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        aggregation = Attribute(getter="aggregation", setter="aggregation", searcher=StringSearch("aggregation"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        profile = Attribute(getter="profile", setter="profile", searcher=StringSearch("profile"))
        targetProfile = Attribute(getter="targetProfile", setter="targetProfile", searcher=StringSearch("targetProfile"))
        versioning = Attribute(getter="versioning", setter="versioning", searcher=StringSearch("versioning"))

class EligibilityRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    benefitCategory = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    benefitSubCategory = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    businessArrangement = fields.CharField(blank=True, required=False)
    coverage = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    enterer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    facility = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    insurer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    organization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    priority = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    provider = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    servicedDate = fields.DateTimeField(blank=True, required=False)
    servicedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        benefitCategory = EmbeddedAttribute(type="CodeableConcept", getter="benefitCategory", setter="benefitCategory", searcher=StringSearch("benefitCategory"))
        benefitSubCategory = EmbeddedAttribute(type="CodeableConcept", getter="benefitSubCategory", setter="benefitSubCategory", searcher=StringSearch("benefitSubCategory"))
        businessArrangement = Attribute(getter="businessArrangement", setter="businessArrangement", searcher=StringSearch("businessArrangement"))
        coverage = EmbeddedAttribute(type="FHIRReference", getter="coverage", setter="coverage", searcher=StringSearch("coverage"))
        created = DateAttribute("created")
        enterer = EmbeddedAttribute(type="FHIRReference", getter="enterer", setter="enterer", searcher=StringSearch("enterer"))
        facility = EmbeddedAttribute(type="FHIRReference", getter="facility", setter="facility", searcher=StringSearch("facility"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        insurer = EmbeddedAttribute(type="FHIRReference", getter="insurer", setter="insurer", searcher=StringSearch("insurer"))
        organization = EmbeddedAttribute(type="FHIRReference", getter="organization", setter="organization", searcher=StringSearch("organization"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        priority = EmbeddedAttribute(type="CodeableConcept", getter="priority", setter="priority", searcher=StringSearch("priority"))
        provider = EmbeddedAttribute(type="FHIRReference", getter="provider", setter="provider", searcher=StringSearch("provider"))
        servicedDate = DateAttribute("servicedDate")
        servicedPeriod = EmbeddedAttribute(type="Period", getter="servicedPeriod", setter="servicedPeriod", searcher=StringSearch("servicedPeriod"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class EligibilityResponse(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    disposition = fields.CharField(blank=True, required=False)
    error = fields.EmbeddedDocumentListField("EligibilityResponseError", blank=True, required=False)
    form = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    inforce = fields.BooleanField(blank=True, required=False)
    insurance = fields.EmbeddedDocumentListField("EligibilityResponseInsurance", blank=True, required=False)
    insurer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    request = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    requestOrganization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    requestProvider = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        created = DateAttribute("created")
        disposition = Attribute(getter="disposition", setter="disposition", searcher=StringSearch("disposition"))
        error = EmbeddedAttribute(type="EligibilityResponseError", getter="error", setter="error", searcher=StringSearch("error"))
        form = EmbeddedAttribute(type="CodeableConcept", getter="form", setter="form", searcher=StringSearch("form"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        inforce = Attribute(getter="inforce", setter="inforce", searcher=StringSearch("inforce"))
        insurance = EmbeddedAttribute(type="EligibilityResponseInsurance", getter="insurance", setter="insurance", searcher=StringSearch("insurance"))
        insurer = EmbeddedAttribute(type="FHIRReference", getter="insurer", setter="insurer", searcher=StringSearch("insurer"))
        outcome = EmbeddedAttribute(type="CodeableConcept", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        request = EmbeddedAttribute(type="FHIRReference", getter="request", setter="request", searcher=StringSearch("request"))
        requestOrganization = EmbeddedAttribute(type="FHIRReference", getter="requestOrganization", setter="requestOrganization", searcher=StringSearch("requestOrganization"))
        requestProvider = EmbeddedAttribute(type="FHIRReference", getter="requestProvider", setter="requestProvider", searcher=StringSearch("requestProvider"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class EligibilityResponseError(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))

class EligibilityResponseInsurance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    benefitBalance = fields.EmbeddedDocumentListField("EligibilityResponseInsuranceBenefitBalance", blank=True, required=False)
    contract = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    coverage = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        benefitBalance = EmbeddedAttribute(type="EligibilityResponseInsuranceBenefitBalance", getter="benefitBalance", setter="benefitBalance", searcher=StringSearch("benefitBalance"))
        contract = EmbeddedAttribute(type="FHIRReference", getter="contract", setter="contract", searcher=StringSearch("contract"))
        coverage = EmbeddedAttribute(type="FHIRReference", getter="coverage", setter="coverage", searcher=StringSearch("coverage"))

class EligibilityResponseInsuranceBenefitBalance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    excluded = fields.BooleanField(blank=True, required=False)
    financial = fields.EmbeddedDocumentListField("EligibilityResponseInsuranceBenefitBalanceFinancial", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    network = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subCategory = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    term = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    unit = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        excluded = Attribute(getter="excluded", setter="excluded", searcher=StringSearch("excluded"))
        financial = EmbeddedAttribute(type="EligibilityResponseInsuranceBenefitBalanceFinancial", getter="financial", setter="financial", searcher=StringSearch("financial"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        network = EmbeddedAttribute(type="CodeableConcept", getter="network", setter="network", searcher=StringSearch("network"))
        subCategory = EmbeddedAttribute(type="CodeableConcept", getter="subCategory", setter="subCategory", searcher=StringSearch("subCategory"))
        term = EmbeddedAttribute(type="CodeableConcept", getter="term", setter="term", searcher=StringSearch("term"))
        unit = EmbeddedAttribute(type="CodeableConcept", getter="unit", setter="unit", searcher=StringSearch("unit"))

class EligibilityResponseInsuranceBenefitBalanceFinancial(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    allowedMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    allowedString = fields.CharField(blank=True, required=False)
    allowedUnsignedInt = fields.IntegerField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    usedMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    usedUnsignedInt = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        allowedMoney = EmbeddedAttribute(type="Money", getter="allowedMoney", setter="allowedMoney", searcher=StringSearch("allowedMoney"))
        allowedString = Attribute(getter="allowedString", setter="allowedString", searcher=StringSearch("allowedString"))
        allowedUnsignedInt = Attribute(getter="allowedUnsignedInt", setter="allowedUnsignedInt", searcher=NumericSearch("allowedUnsignedInt"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        usedMoney = EmbeddedAttribute(type="Money", getter="usedMoney", setter="usedMoney", searcher=StringSearch("usedMoney"))
        usedUnsignedInt = Attribute(getter="usedUnsignedInt", setter="usedUnsignedInt", searcher=NumericSearch("usedUnsignedInt"))

class Encounter(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    account = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    appointment = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    classHistory = fields.EmbeddedDocumentListField("EncounterClassHistory", blank=True, required=False)
    class_ = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    diagnosis = fields.EmbeddedDocumentListField("EncounterDiagnosis", blank=True, required=False)
    episodeOfCare = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    hospitalization = fields.EmbeddedDocumentField("EncounterHospitalization", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    length = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    location = fields.EmbeddedDocumentListField("EncounterLocation", blank=True, required=False)
    partOf = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    participant = fields.EmbeddedDocumentListField("EncounterParticipant", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    priority = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    serviceProvider = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    serviceType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusHistory = fields.EmbeddedDocumentListField("EncounterStatusHistory", blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        account = EmbeddedAttribute(type="FHIRReference", getter="account", setter="account", searcher=StringSearch("account"))
        appointment = EmbeddedAttribute(type="FHIRReference", getter="appointment", setter="appointment", searcher=StringSearch("appointment"))
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        classHistory = EmbeddedAttribute(type="EncounterClassHistory", getter="classHistory", setter="classHistory", searcher=StringSearch("classHistory"))
        class_ = EmbeddedAttribute(type="Coding", getter="class_", setter="class_", searcher=StringSearch("class_"))
        diagnosis = EmbeddedAttribute(type="EncounterDiagnosis", getter="diagnosis", setter="diagnosis", searcher=StringSearch("diagnosis"))
        episodeOfCare = EmbeddedAttribute(type="FHIRReference", getter="episodeOfCare", setter="episodeOfCare", searcher=StringSearch("episodeOfCare"))
        hospitalization = EmbeddedAttribute(type="EncounterHospitalization", getter="hospitalization", setter="hospitalization", searcher=StringSearch("hospitalization"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        length = EmbeddedAttribute(type="Duration", getter="length", setter="length", searcher=StringSearch("length"))
        location = EmbeddedAttribute(type="EncounterLocation", getter="location", setter="location", searcher=StringSearch("location"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        participant = EmbeddedAttribute(type="EncounterParticipant", getter="participant", setter="participant", searcher=StringSearch("participant"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        priority = EmbeddedAttribute(type="CodeableConcept", getter="priority", setter="priority", searcher=StringSearch("priority"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        serviceProvider = EmbeddedAttribute(type="FHIRReference", getter="serviceProvider", setter="serviceProvider", searcher=StringSearch("serviceProvider"))
        serviceType = EmbeddedAttribute(type="CodeableConcept", getter="serviceType", setter="serviceType", searcher=StringSearch("serviceType"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusHistory = EmbeddedAttribute(type="EncounterStatusHistory", getter="statusHistory", setter="statusHistory", searcher=StringSearch("statusHistory"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class EncounterClassHistory(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    class_ = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        class_ = EmbeddedAttribute(type="Coding", getter="class_", setter="class_", searcher=StringSearch("class_"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))

class EncounterDiagnosis(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    condition = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    rank = fields.IntegerField(blank=True, required=False)
    use = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        condition = EmbeddedAttribute(type="FHIRReference", getter="condition", setter="condition", searcher=StringSearch("condition"))
        rank = Attribute(getter="rank", setter="rank", searcher=NumericSearch("rank"))
        use = EmbeddedAttribute(type="CodeableConcept", getter="use", setter="use", searcher=StringSearch("use"))

class EncounterHospitalization(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    admitSource = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    destination = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    dietPreference = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    dischargeDisposition = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    origin = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    preAdmissionIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    reAdmission = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    specialArrangement = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    specialCourtesy = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        admitSource = EmbeddedAttribute(type="CodeableConcept", getter="admitSource", setter="admitSource", searcher=StringSearch("admitSource"))
        destination = EmbeddedAttribute(type="FHIRReference", getter="destination", setter="destination", searcher=StringSearch("destination"))
        dietPreference = EmbeddedAttribute(type="CodeableConcept", getter="dietPreference", setter="dietPreference", searcher=StringSearch("dietPreference"))
        dischargeDisposition = EmbeddedAttribute(type="CodeableConcept", getter="dischargeDisposition", setter="dischargeDisposition", searcher=StringSearch("dischargeDisposition"))
        origin = EmbeddedAttribute(type="FHIRReference", getter="origin", setter="origin", searcher=StringSearch("origin"))
        preAdmissionIdentifier = EmbeddedAttribute(type="Identifier", getter="preAdmissionIdentifier", setter="preAdmissionIdentifier", searcher=StringSearch("preAdmissionIdentifier"))
        reAdmission = EmbeddedAttribute(type="CodeableConcept", getter="reAdmission", setter="reAdmission", searcher=StringSearch("reAdmission"))
        specialArrangement = EmbeddedAttribute(type="CodeableConcept", getter="specialArrangement", setter="specialArrangement", searcher=StringSearch("specialArrangement"))
        specialCourtesy = EmbeddedAttribute(type="CodeableConcept", getter="specialCourtesy", setter="specialCourtesy", searcher=StringSearch("specialCourtesy"))

class EncounterLocation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    location = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    physicalType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        location = EmbeddedAttribute(type="FHIRReference", getter="location", setter="location", searcher=StringSearch("location"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        physicalType = EmbeddedAttribute(type="CodeableConcept", getter="physicalType", setter="physicalType", searcher=StringSearch("physicalType"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class EncounterParticipant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    individual = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        individual = EmbeddedAttribute(type="FHIRReference", getter="individual", setter="individual", searcher=StringSearch("individual"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class EncounterStatusHistory(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class Endpoint(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    address = fields.CharField(blank=False, required=True)
    connectionType = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    contact = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    header = fields.ListField(fields.CharField(), blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    managingOrganization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    payloadMimeType = fields.ListField(fields.CharField(), blank=True, required=False)
    payloadType = fields.EmbeddedDocumentListField("CodeableConcept", blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        address = Attribute(getter="address", setter="address", searcher=StringSearch("address"))
        connectionType = EmbeddedAttribute(type="Coding", getter="connectionType", setter="connectionType", searcher=StringSearch("connectionType"))
        contact = EmbeddedAttribute(type="ContactPoint", getter="contact", setter="contact", searcher=StringSearch("contact"))
        header = Attribute(getter="header", setter="header", searcher=StringSearch("header"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        managingOrganization = EmbeddedAttribute(type="FHIRReference", getter="managingOrganization", setter="managingOrganization", searcher=StringSearch("managingOrganization"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        payloadMimeType = Attribute(getter="payloadMimeType", setter="payloadMimeType", searcher=StringSearch("payloadMimeType"))
        payloadType = EmbeddedAttribute(type="CodeableConcept", getter="payloadType", setter="payloadType", searcher=StringSearch("payloadType"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class EnrollmentRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    candidate = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    coverage = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    insurer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    provider = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        candidate = EmbeddedAttribute(type="FHIRReference", getter="candidate", setter="candidate", searcher=StringSearch("candidate"))
        coverage = EmbeddedAttribute(type="FHIRReference", getter="coverage", setter="coverage", searcher=StringSearch("coverage"))
        created = DateAttribute("created")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        insurer = EmbeddedAttribute(type="FHIRReference", getter="insurer", setter="insurer", searcher=StringSearch("insurer"))
        provider = EmbeddedAttribute(type="FHIRReference", getter="provider", setter="provider", searcher=StringSearch("provider"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class EnrollmentResponse(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    disposition = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    organization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    outcome = fields.CharField(blank=True, required=False)
    request = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    requestProvider = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        created = DateAttribute("created")
        disposition = Attribute(getter="disposition", setter="disposition", searcher=StringSearch("disposition"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        organization = EmbeddedAttribute(type="FHIRReference", getter="organization", setter="organization", searcher=StringSearch("organization"))
        outcome = Attribute(getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        request = EmbeddedAttribute(type="FHIRReference", getter="request", setter="request", searcher=StringSearch("request"))
        requestProvider = EmbeddedAttribute(type="FHIRReference", getter="requestProvider", setter="requestProvider", searcher=StringSearch("requestProvider"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class EpisodeOfCare(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    account = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    careManager = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    diagnosis = fields.EmbeddedDocumentListField("EpisodeOfCareDiagnosis", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    managingOrganization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    referralRequest = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusHistory = fields.EmbeddedDocumentListField("EpisodeOfCareStatusHistory", blank=True, required=False)
    team = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        account = EmbeddedAttribute(type="FHIRReference", getter="account", setter="account", searcher=StringSearch("account"))
        careManager = EmbeddedAttribute(type="FHIRReference", getter="careManager", setter="careManager", searcher=StringSearch("careManager"))
        diagnosis = EmbeddedAttribute(type="EpisodeOfCareDiagnosis", getter="diagnosis", setter="diagnosis", searcher=StringSearch("diagnosis"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        managingOrganization = EmbeddedAttribute(type="FHIRReference", getter="managingOrganization", setter="managingOrganization", searcher=StringSearch("managingOrganization"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        referralRequest = EmbeddedAttribute(type="FHIRReference", getter="referralRequest", setter="referralRequest", searcher=StringSearch("referralRequest"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusHistory = EmbeddedAttribute(type="EpisodeOfCareStatusHistory", getter="statusHistory", setter="statusHistory", searcher=StringSearch("statusHistory"))
        team = EmbeddedAttribute(type="FHIRReference", getter="team", setter="team", searcher=StringSearch("team"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class EpisodeOfCareDiagnosis(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    condition = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    rank = fields.IntegerField(blank=True, required=False)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        condition = EmbeddedAttribute(type="FHIRReference", getter="condition", setter="condition", searcher=StringSearch("condition"))
        rank = Attribute(getter="rank", setter="rank", searcher=NumericSearch("rank"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class EpisodeOfCareStatusHistory(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class EventDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    author = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    editor = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    endorser = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    reviewer = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subjectCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subjectReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    subtitle = fields.CharField(blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    trigger = fields.EmbeddedDocumentListField("TriggerDefinition", blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    usage = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        author = EmbeddedAttribute(type="ContactDetail", getter="author", setter="author", searcher=StringSearch("author"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        editor = EmbeddedAttribute(type="ContactDetail", getter="editor", setter="editor", searcher=StringSearch("editor"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        endorser = EmbeddedAttribute(type="ContactDetail", getter="endorser", setter="endorser", searcher=StringSearch("endorser"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        reviewer = EmbeddedAttribute(type="ContactDetail", getter="reviewer", setter="reviewer", searcher=StringSearch("reviewer"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subjectCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="subjectCodeableConcept", setter="subjectCodeableConcept", searcher=StringSearch("subjectCodeableConcept"))
        subjectReference = EmbeddedAttribute(type="FHIRReference", getter="subjectReference", setter="subjectReference", searcher=StringSearch("subjectReference"))
        subtitle = Attribute(getter="subtitle", setter="subtitle", searcher=StringSearch("subtitle"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        trigger = EmbeddedAttribute(type="TriggerDefinition", getter="trigger", setter="trigger", searcher=StringSearch("trigger"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        usage = Attribute(getter="usage", setter="usage", searcher=StringSearch("usage"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class Evidence(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    author = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    editor = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    endorser = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    exposureBackground = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    exposureVariant = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    outcome = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    reviewer = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    shortTitle = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subtitle = fields.CharField(blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        author = EmbeddedAttribute(type="ContactDetail", getter="author", setter="author", searcher=StringSearch("author"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        editor = EmbeddedAttribute(type="ContactDetail", getter="editor", setter="editor", searcher=StringSearch("editor"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        endorser = EmbeddedAttribute(type="ContactDetail", getter="endorser", setter="endorser", searcher=StringSearch("endorser"))
        exposureBackground = EmbeddedAttribute(type="FHIRReference", getter="exposureBackground", setter="exposureBackground", searcher=StringSearch("exposureBackground"))
        exposureVariant = EmbeddedAttribute(type="FHIRReference", getter="exposureVariant", setter="exposureVariant", searcher=StringSearch("exposureVariant"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        outcome = EmbeddedAttribute(type="FHIRReference", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        reviewer = EmbeddedAttribute(type="ContactDetail", getter="reviewer", setter="reviewer", searcher=StringSearch("reviewer"))
        shortTitle = Attribute(getter="shortTitle", setter="shortTitle", searcher=StringSearch("shortTitle"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subtitle = Attribute(getter="subtitle", setter="subtitle", searcher=StringSearch("subtitle"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class EvidenceVariable(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    author = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    characteristic = fields.EmbeddedDocumentListField("EvidenceVariableCharacteristic", blank=False, required=True)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    editor = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    endorser = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    reviewer = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    shortTitle = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subtitle = fields.CharField(blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        author = EmbeddedAttribute(type="ContactDetail", getter="author", setter="author", searcher=StringSearch("author"))
        characteristic = EmbeddedAttribute(type="EvidenceVariableCharacteristic", getter="characteristic", setter="characteristic", searcher=StringSearch("characteristic"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        editor = EmbeddedAttribute(type="ContactDetail", getter="editor", setter="editor", searcher=StringSearch("editor"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        endorser = EmbeddedAttribute(type="ContactDetail", getter="endorser", setter="endorser", searcher=StringSearch("endorser"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        reviewer = EmbeddedAttribute(type="ContactDetail", getter="reviewer", setter="reviewer", searcher=StringSearch("reviewer"))
        shortTitle = Attribute(getter="shortTitle", setter="shortTitle", searcher=StringSearch("shortTitle"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subtitle = Attribute(getter="subtitle", setter="subtitle", searcher=StringSearch("subtitle"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class EvidenceVariableCharacteristic(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    definitionCanonical = fields.CharField(blank=True, required=False)
    definitionCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    definitionDataRequirement = fields.EmbeddedDocumentField("DataRequirement", blank=True, required=False)
    definitionExpression = fields.EmbeddedDocumentField("Expression", blank=True, required=False)
    definitionReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    definitionTriggerDefinition = fields.EmbeddedDocumentField("TriggerDefinition", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    exclude = fields.BooleanField(blank=True, required=False)
    groupMeasure = fields.CharField(blank=True, required=False)
    participantEffectiveDateTime = fields.DateTimeField(blank=True, required=False)
    participantEffectiveDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    participantEffectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    participantEffectiveTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    timeFromStart = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    usageContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        definitionCanonical = Attribute(getter="definitionCanonical", setter="definitionCanonical", searcher=StringSearch("definitionCanonical"))
        definitionCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="definitionCodeableConcept", setter="definitionCodeableConcept", searcher=StringSearch("definitionCodeableConcept"))
        definitionDataRequirement = EmbeddedAttribute(type="DataRequirement", getter="definitionDataRequirement", setter="definitionDataRequirement", searcher=StringSearch("definitionDataRequirement"))
        definitionExpression = EmbeddedAttribute(type="Expression", getter="definitionExpression", setter="definitionExpression", searcher=StringSearch("definitionExpression"))
        definitionReference = EmbeddedAttribute(type="FHIRReference", getter="definitionReference", setter="definitionReference", searcher=StringSearch("definitionReference"))
        definitionTriggerDefinition = EmbeddedAttribute(type="TriggerDefinition", getter="definitionTriggerDefinition", setter="definitionTriggerDefinition", searcher=StringSearch("definitionTriggerDefinition"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        exclude = Attribute(getter="exclude", setter="exclude", searcher=StringSearch("exclude"))
        groupMeasure = Attribute(getter="groupMeasure", setter="groupMeasure", searcher=StringSearch("groupMeasure"))
        participantEffectiveDateTime = DateAttribute("participantEffectiveDateTime")
        participantEffectiveDuration = EmbeddedAttribute(type="Duration", getter="participantEffectiveDuration", setter="participantEffectiveDuration", searcher=StringSearch("participantEffectiveDuration"))
        participantEffectivePeriod = EmbeddedAttribute(type="Period", getter="participantEffectivePeriod", setter="participantEffectivePeriod", searcher=StringSearch("participantEffectivePeriod"))
        participantEffectiveTiming = EmbeddedAttribute(type="Timing", getter="participantEffectiveTiming", setter="participantEffectiveTiming", searcher=StringSearch("participantEffectiveTiming"))
        timeFromStart = EmbeddedAttribute(type="Duration", getter="timeFromStart", setter="timeFromStart", searcher=StringSearch("timeFromStart"))
        usageContext = EmbeddedAttribute(type="UsageContext", getter="usageContext", setter="usageContext", searcher=StringSearch("usageContext"))

class ExampleScenario(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    actor = fields.EmbeddedDocumentListField("ExampleScenarioActor", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    instance = fields.EmbeddedDocumentListField("ExampleScenarioInstance", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    process = fields.EmbeddedDocumentListField("ExampleScenarioProcess", blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    workflow = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        actor = EmbeddedAttribute(type="ExampleScenarioActor", getter="actor", setter="actor", searcher=StringSearch("actor"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        instance = EmbeddedAttribute(type="ExampleScenarioInstance", getter="instance", setter="instance", searcher=StringSearch("instance"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        process = EmbeddedAttribute(type="ExampleScenarioProcess", getter="process", setter="process", searcher=StringSearch("process"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))
        workflow = Attribute(getter="workflow", setter="workflow", searcher=StringSearch("workflow"))

class ExampleScenarioActor(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actorId = fields.CharField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actorId = Attribute(getter="actorId", setter="actorId", searcher=StringSearch("actorId"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class ExampleScenarioInstance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    containedInstance = fields.EmbeddedDocumentListField("ExampleScenarioInstanceContainedInstance", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    resourceId = fields.CharField(blank=False, required=True)
    resourceType = fields.CharField(blank=False, required=True)
    version = fields.EmbeddedDocumentListField("ExampleScenarioInstanceVersion", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        containedInstance = EmbeddedAttribute(type="ExampleScenarioInstanceContainedInstance", getter="containedInstance", setter="containedInstance", searcher=StringSearch("containedInstance"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        resourceId = Attribute(getter="resourceId", setter="resourceId", searcher=StringSearch("resourceId"))
        resourceType = Attribute(getter="resourceType", setter="resourceType", searcher=StringSearch("resourceType"))
        version = EmbeddedAttribute(type="ExampleScenarioInstanceVersion", getter="version", setter="version", searcher=StringSearch("version"))

class ExampleScenarioInstanceContainedInstance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    resourceId = fields.CharField(blank=False, required=True)
    versionId = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        resourceId = Attribute(getter="resourceId", setter="resourceId", searcher=StringSearch("resourceId"))
        versionId = Attribute(getter="versionId", setter="versionId", searcher=StringSearch("versionId"))

class ExampleScenarioInstanceVersion(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=False, required=True)
    versionId = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        versionId = Attribute(getter="versionId", setter="versionId", searcher=StringSearch("versionId"))

class ExampleScenarioProcess(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    postConditions = fields.CharField(blank=True, required=False)
    preConditions = fields.CharField(blank=True, required=False)
    step = fields.EmbeddedDocumentListField("ExampleScenarioProcessStep", blank=True, required=False)
    title = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        postConditions = Attribute(getter="postConditions", setter="postConditions", searcher=StringSearch("postConditions"))
        preConditions = Attribute(getter="preConditions", setter="preConditions", searcher=StringSearch("preConditions"))
        step = EmbeddedAttribute(type="ExampleScenarioProcessStep", getter="step", setter="step", searcher=StringSearch("step"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))

class ExampleScenarioProcessStep(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    alternative = fields.EmbeddedDocumentListField("ExampleScenarioProcessStepAlternative", blank=True, required=False)
    operation = fields.EmbeddedDocumentField("ExampleScenarioProcessStepOperation", blank=True, required=False)
    pause = fields.BooleanField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        alternative = EmbeddedAttribute(type="ExampleScenarioProcessStepAlternative", getter="alternative", setter="alternative", searcher=StringSearch("alternative"))
        operation = EmbeddedAttribute(type="ExampleScenarioProcessStepOperation", getter="operation", setter="operation", searcher=StringSearch("operation"))
        pause = Attribute(getter="pause", setter="pause", searcher=StringSearch("pause"))

class ExampleScenarioProcessStepAlternative(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    title = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))

class ExampleScenarioProcessStepOperation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    initiator = fields.CharField(blank=True, required=False)
    initiatorActive = fields.BooleanField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    number = fields.CharField(blank=False, required=True)
    receiver = fields.CharField(blank=True, required=False)
    receiverActive = fields.BooleanField(blank=True, required=False)
    request = fields.EmbeddedDocumentField("ExampleScenarioInstanceContainedInstance", blank=True, required=False)
    response = fields.EmbeddedDocumentField("ExampleScenarioInstanceContainedInstance", blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        initiator = Attribute(getter="initiator", setter="initiator", searcher=StringSearch("initiator"))
        initiatorActive = Attribute(getter="initiatorActive", setter="initiatorActive", searcher=StringSearch("initiatorActive"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        number = Attribute(getter="number", setter="number", searcher=StringSearch("number"))
        receiver = Attribute(getter="receiver", setter="receiver", searcher=StringSearch("receiver"))
        receiverActive = Attribute(getter="receiverActive", setter="receiverActive", searcher=StringSearch("receiverActive"))
        request = EmbeddedAttribute(type="ExampleScenarioInstanceContainedInstance", getter="request", setter="request", searcher=StringSearch("request"))
        response = EmbeddedAttribute(type="ExampleScenarioInstanceContainedInstance", getter="response", setter="response", searcher=StringSearch("response"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class ExpansionProfile(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    activeOnly = fields.BooleanField(blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    designation = fields.EmbeddedDocumentField("ExpansionProfileDesignation", blank=True, required=False)
    displayLanguage = fields.CharField(blank=True, required=False)
    excludeNested = fields.BooleanField(blank=True, required=False)
    excludeNotForUI = fields.BooleanField(blank=True, required=False)
    excludePostCoordinated = fields.BooleanField(blank=True, required=False)
    excludedSystem = fields.EmbeddedDocumentField("ExpansionProfileExcludedSystem", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    fixedVersion = fields.EmbeddedDocumentListField("ExpansionProfileFixedVersion", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    includeDefinition = fields.BooleanField(blank=True, required=False)
    includeDesignations = fields.BooleanField(blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    limitedExpansion = fields.BooleanField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        activeOnly = Attribute(getter="activeOnly", setter="activeOnly", searcher=StringSearch("activeOnly"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        designation = EmbeddedAttribute(type="ExpansionProfileDesignation", getter="designation", setter="designation", searcher=StringSearch("designation"))
        displayLanguage = Attribute(getter="displayLanguage", setter="displayLanguage", searcher=StringSearch("displayLanguage"))
        excludeNested = Attribute(getter="excludeNested", setter="excludeNested", searcher=StringSearch("excludeNested"))
        excludeNotForUI = Attribute(getter="excludeNotForUI", setter="excludeNotForUI", searcher=StringSearch("excludeNotForUI"))
        excludePostCoordinated = Attribute(getter="excludePostCoordinated", setter="excludePostCoordinated", searcher=StringSearch("excludePostCoordinated"))
        excludedSystem = EmbeddedAttribute(type="ExpansionProfileExcludedSystem", getter="excludedSystem", setter="excludedSystem", searcher=StringSearch("excludedSystem"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        fixedVersion = EmbeddedAttribute(type="ExpansionProfileFixedVersion", getter="fixedVersion", setter="fixedVersion", searcher=StringSearch("fixedVersion"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        includeDefinition = Attribute(getter="includeDefinition", setter="includeDefinition", searcher=StringSearch("includeDefinition"))
        includeDesignations = Attribute(getter="includeDesignations", setter="includeDesignations", searcher=StringSearch("includeDesignations"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        limitedExpansion = Attribute(getter="limitedExpansion", setter="limitedExpansion", searcher=StringSearch("limitedExpansion"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ExpansionProfileDesignation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    exclude = fields.EmbeddedDocumentField("ExpansionProfileDesignationExclude", blank=True, required=False)
    include = fields.EmbeddedDocumentField("ExpansionProfileDesignationInclude", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        exclude = EmbeddedAttribute(type="ExpansionProfileDesignationExclude", getter="exclude", setter="exclude", searcher=StringSearch("exclude"))
        include = EmbeddedAttribute(type="ExpansionProfileDesignationInclude", getter="include", setter="include", searcher=StringSearch("include"))

class ExpansionProfileDesignationExclude(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    designation = fields.EmbeddedDocumentListField("ExpansionProfileDesignationExcludeDesignation", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        designation = EmbeddedAttribute(type="ExpansionProfileDesignationExcludeDesignation", getter="designation", setter="designation", searcher=StringSearch("designation"))

class ExpansionProfileDesignationExcludeDesignation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    use = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        use = EmbeddedAttribute(type="Coding", getter="use", setter="use", searcher=StringSearch("use"))

class ExpansionProfileDesignationInclude(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    designation = fields.EmbeddedDocumentListField("ExpansionProfileDesignationIncludeDesignation", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        designation = EmbeddedAttribute(type="ExpansionProfileDesignationIncludeDesignation", getter="designation", setter="designation", searcher=StringSearch("designation"))

class ExpansionProfileDesignationIncludeDesignation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    use = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        use = EmbeddedAttribute(type="Coding", getter="use", setter="use", searcher=StringSearch("use"))

class ExpansionProfileExcludedSystem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    system = fields.CharField(blank=False, required=True)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ExpansionProfileFixedVersion(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    mode = fields.CharField(blank=False, required=True)
    system = fields.CharField(blank=False, required=True)
    version = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ExplanationOfBenefit(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    accident = fields.EmbeddedDocumentField("ExplanationOfBenefitAccident", blank=True, required=False)
    addItem = fields.EmbeddedDocumentListField("ExplanationOfBenefitAddItem", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ExplanationOfBenefitItemAdjudication", blank=True, required=False)
    benefitBalance = fields.EmbeddedDocumentListField("ExplanationOfBenefitBenefitBalance", blank=True, required=False)
    benefitPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    billablePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    careTeam = fields.EmbeddedDocumentListField("ExplanationOfBenefitCareTeam", blank=True, required=False)
    claim = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    claimResponse = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    created = fields.DateTimeField(blank=False, required=True)
    diagnosis = fields.EmbeddedDocumentListField("ExplanationOfBenefitDiagnosis", blank=True, required=False)
    disposition = fields.CharField(blank=True, required=False)
    enterer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    facility = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    form = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    formCode = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    fundsReserve = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    fundsReserveRequested = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    insurance = fields.EmbeddedDocumentListField("ExplanationOfBenefitInsurance", blank=False, required=True)
    insurer = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    item = fields.EmbeddedDocumentListField("ExplanationOfBenefitItem", blank=True, required=False)
    originalPrescription = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    outcome = fields.CharField(blank=False, required=True)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    payee = fields.EmbeddedDocumentField("ExplanationOfBenefitPayee", blank=True, required=False)
    payment = fields.EmbeddedDocumentField("ExplanationOfBenefitPayment", blank=True, required=False)
    preAuthRef = fields.ListField(fields.CharField(), blank=True, required=False)
    preAuthRefPeriod = fields.EmbeddedDocumentListField("Period", blank=True, required=False)
    precedence = fields.IntegerField(blank=True, required=False)
    prescription = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    priority = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    procedure = fields.EmbeddedDocumentListField("ExplanationOfBenefitProcedure", blank=True, required=False)
    processNote = fields.EmbeddedDocumentListField("ExplanationOfBenefitProcessNote", blank=True, required=False)
    provider = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    referral = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    related = fields.EmbeddedDocumentListField("ExplanationOfBenefitRelated", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    supportingInfo = fields.EmbeddedDocumentListField("ExplanationOfBenefitSupportingInfo", blank=True, required=False)
    total = fields.EmbeddedDocumentListField("ExplanationOfBenefitTotal", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    use = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        accident = EmbeddedAttribute(type="ExplanationOfBenefitAccident", getter="accident", setter="accident", searcher=StringSearch("accident"))
        addItem = EmbeddedAttribute(type="ExplanationOfBenefitAddItem", getter="addItem", setter="addItem", searcher=StringSearch("addItem"))
        adjudication = EmbeddedAttribute(type="ExplanationOfBenefitItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        benefitBalance = EmbeddedAttribute(type="ExplanationOfBenefitBenefitBalance", getter="benefitBalance", setter="benefitBalance", searcher=StringSearch("benefitBalance"))
        benefitPeriod = EmbeddedAttribute(type="Period", getter="benefitPeriod", setter="benefitPeriod", searcher=StringSearch("benefitPeriod"))
        billablePeriod = EmbeddedAttribute(type="Period", getter="billablePeriod", setter="billablePeriod", searcher=StringSearch("billablePeriod"))
        careTeam = EmbeddedAttribute(type="ExplanationOfBenefitCareTeam", getter="careTeam", setter="careTeam", searcher=StringSearch("careTeam"))
        claim = EmbeddedAttribute(type="FHIRReference", getter="claim", setter="claim", searcher=StringSearch("claim"))
        claimResponse = EmbeddedAttribute(type="FHIRReference", getter="claimResponse", setter="claimResponse", searcher=StringSearch("claimResponse"))
        created = DateAttribute("created")
        diagnosis = EmbeddedAttribute(type="ExplanationOfBenefitDiagnosis", getter="diagnosis", setter="diagnosis", searcher=StringSearch("diagnosis"))
        disposition = Attribute(getter="disposition", setter="disposition", searcher=StringSearch("disposition"))
        enterer = EmbeddedAttribute(type="FHIRReference", getter="enterer", setter="enterer", searcher=StringSearch("enterer"))
        facility = EmbeddedAttribute(type="FHIRReference", getter="facility", setter="facility", searcher=StringSearch("facility"))
        form = EmbeddedAttribute(type="Attachment", getter="form", setter="form", searcher=StringSearch("form"))
        formCode = EmbeddedAttribute(type="CodeableConcept", getter="formCode", setter="formCode", searcher=StringSearch("formCode"))
        fundsReserve = EmbeddedAttribute(type="CodeableConcept", getter="fundsReserve", setter="fundsReserve", searcher=StringSearch("fundsReserve"))
        fundsReserveRequested = EmbeddedAttribute(type="CodeableConcept", getter="fundsReserveRequested", setter="fundsReserveRequested", searcher=StringSearch("fundsReserveRequested"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        insurance = EmbeddedAttribute(type="ExplanationOfBenefitInsurance", getter="insurance", setter="insurance", searcher=StringSearch("insurance"))
        insurer = EmbeddedAttribute(type="FHIRReference", getter="insurer", setter="insurer", searcher=StringSearch("insurer"))
        item = EmbeddedAttribute(type="ExplanationOfBenefitItem", getter="item", setter="item", searcher=StringSearch("item"))
        originalPrescription = EmbeddedAttribute(type="FHIRReference", getter="originalPrescription", setter="originalPrescription", searcher=StringSearch("originalPrescription"))
        outcome = Attribute(getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        payee = EmbeddedAttribute(type="ExplanationOfBenefitPayee", getter="payee", setter="payee", searcher=StringSearch("payee"))
        payment = EmbeddedAttribute(type="ExplanationOfBenefitPayment", getter="payment", setter="payment", searcher=StringSearch("payment"))
        preAuthRef = Attribute(getter="preAuthRef", setter="preAuthRef", searcher=StringSearch("preAuthRef"))
        preAuthRefPeriod = EmbeddedAttribute(type="Period", getter="preAuthRefPeriod", setter="preAuthRefPeriod", searcher=StringSearch("preAuthRefPeriod"))
        precedence = Attribute(getter="precedence", setter="precedence", searcher=NumericSearch("precedence"))
        prescription = EmbeddedAttribute(type="FHIRReference", getter="prescription", setter="prescription", searcher=StringSearch("prescription"))
        priority = EmbeddedAttribute(type="CodeableConcept", getter="priority", setter="priority", searcher=StringSearch("priority"))
        procedure = EmbeddedAttribute(type="ExplanationOfBenefitProcedure", getter="procedure", setter="procedure", searcher=StringSearch("procedure"))
        processNote = EmbeddedAttribute(type="ExplanationOfBenefitProcessNote", getter="processNote", setter="processNote", searcher=StringSearch("processNote"))
        provider = EmbeddedAttribute(type="FHIRReference", getter="provider", setter="provider", searcher=StringSearch("provider"))
        referral = EmbeddedAttribute(type="FHIRReference", getter="referral", setter="referral", searcher=StringSearch("referral"))
        related = EmbeddedAttribute(type="ExplanationOfBenefitRelated", getter="related", setter="related", searcher=StringSearch("related"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subType = EmbeddedAttribute(type="CodeableConcept", getter="subType", setter="subType", searcher=StringSearch("subType"))
        supportingInfo = EmbeddedAttribute(type="ExplanationOfBenefitSupportingInfo", getter="supportingInfo", setter="supportingInfo", searcher=StringSearch("supportingInfo"))
        total = EmbeddedAttribute(type="ExplanationOfBenefitTotal", getter="total", setter="total", searcher=StringSearch("total"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))

class ExplanationOfBenefitAccident(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    locationAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    locationReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        date = DateAttribute("date")
        locationAddress = EmbeddedAttribute(type="Address", getter="locationAddress", setter="locationAddress", searcher=StringSearch("locationAddress"))
        locationReference = EmbeddedAttribute(type="FHIRReference", getter="locationReference", setter="locationReference", searcher=StringSearch("locationReference"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ExplanationOfBenefitAddItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ExplanationOfBenefitItemAdjudication", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    detail = fields.EmbeddedDocumentListField("ExplanationOfBenefitAddItemDetail", blank=True, required=False)
    detailSequence = fields.ListField(fields.IntegerField(), blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    itemSequence = fields.ListField(fields.IntegerField(), blank=True, required=False)
    locationAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    locationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    locationReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    productOrService = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    programCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    provider = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    servicedDate = fields.DateTimeField(blank=True, required=False)
    servicedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    subDetailSequence = fields.ListField(fields.IntegerField(), blank=True, required=False)
    subSite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ExplanationOfBenefitItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        detail = EmbeddedAttribute(type="ExplanationOfBenefitAddItemDetail", getter="detail", setter="detail", searcher=StringSearch("detail"))
        detailSequence = Attribute(getter="detailSequence", setter="detailSequence", searcher=NumericSearch("detailSequence"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        itemSequence = Attribute(getter="itemSequence", setter="itemSequence", searcher=NumericSearch("itemSequence"))
        locationAddress = EmbeddedAttribute(type="Address", getter="locationAddress", setter="locationAddress", searcher=StringSearch("locationAddress"))
        locationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="locationCodeableConcept", setter="locationCodeableConcept", searcher=StringSearch("locationCodeableConcept"))
        locationReference = EmbeddedAttribute(type="FHIRReference", getter="locationReference", setter="locationReference", searcher=StringSearch("locationReference"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        productOrService = EmbeddedAttribute(type="CodeableConcept", getter="productOrService", setter="productOrService", searcher=StringSearch("productOrService"))
        programCode = EmbeddedAttribute(type="CodeableConcept", getter="programCode", setter="programCode", searcher=StringSearch("programCode"))
        provider = EmbeddedAttribute(type="FHIRReference", getter="provider", setter="provider", searcher=StringSearch("provider"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        servicedDate = DateAttribute("servicedDate")
        servicedPeriod = EmbeddedAttribute(type="Period", getter="servicedPeriod", setter="servicedPeriod", searcher=StringSearch("servicedPeriod"))
        subDetailSequence = Attribute(getter="subDetailSequence", setter="subDetailSequence", searcher=NumericSearch("subDetailSequence"))
        subSite = EmbeddedAttribute(type="CodeableConcept", getter="subSite", setter="subSite", searcher=StringSearch("subSite"))
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ExplanationOfBenefitAddItemDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ExplanationOfBenefitItemAdjudication", blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    productOrService = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    subDetail = fields.EmbeddedDocumentListField("ExplanationOfBenefitAddItemDetailSubDetail", blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ExplanationOfBenefitItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        productOrService = EmbeddedAttribute(type="CodeableConcept", getter="productOrService", setter="productOrService", searcher=StringSearch("productOrService"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        subDetail = EmbeddedAttribute(type="ExplanationOfBenefitAddItemDetailSubDetail", getter="subDetail", setter="subDetail", searcher=StringSearch("subDetail"))
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ExplanationOfBenefitAddItemDetailSubDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ExplanationOfBenefitItemAdjudication", blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    productOrService = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ExplanationOfBenefitItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        productOrService = EmbeddedAttribute(type="CodeableConcept", getter="productOrService", setter="productOrService", searcher=StringSearch("productOrService"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ExplanationOfBenefitBenefitBalance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    excluded = fields.BooleanField(blank=True, required=False)
    financial = fields.EmbeddedDocumentListField("ExplanationOfBenefitBenefitBalanceFinancial", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    network = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    term = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    unit = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        excluded = Attribute(getter="excluded", setter="excluded", searcher=StringSearch("excluded"))
        financial = EmbeddedAttribute(type="ExplanationOfBenefitBenefitBalanceFinancial", getter="financial", setter="financial", searcher=StringSearch("financial"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        network = EmbeddedAttribute(type="CodeableConcept", getter="network", setter="network", searcher=StringSearch("network"))
        term = EmbeddedAttribute(type="CodeableConcept", getter="term", setter="term", searcher=StringSearch("term"))
        unit = EmbeddedAttribute(type="CodeableConcept", getter="unit", setter="unit", searcher=StringSearch("unit"))

class ExplanationOfBenefitBenefitBalanceFinancial(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    allowedMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    allowedString = fields.CharField(blank=True, required=False)
    allowedUnsignedInt = fields.IntegerField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    usedMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    usedUnsignedInt = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        allowedMoney = EmbeddedAttribute(type="Money", getter="allowedMoney", setter="allowedMoney", searcher=StringSearch("allowedMoney"))
        allowedString = Attribute(getter="allowedString", setter="allowedString", searcher=StringSearch("allowedString"))
        allowedUnsignedInt = Attribute(getter="allowedUnsignedInt", setter="allowedUnsignedInt", searcher=NumericSearch("allowedUnsignedInt"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        usedMoney = EmbeddedAttribute(type="Money", getter="usedMoney", setter="usedMoney", searcher=StringSearch("usedMoney"))
        usedUnsignedInt = Attribute(getter="usedUnsignedInt", setter="usedUnsignedInt", searcher=NumericSearch("usedUnsignedInt"))

class ExplanationOfBenefitCareTeam(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    provider = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    qualification = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    responsible = fields.BooleanField(blank=True, required=False)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        provider = EmbeddedAttribute(type="FHIRReference", getter="provider", setter="provider", searcher=StringSearch("provider"))
        qualification = EmbeddedAttribute(type="CodeableConcept", getter="qualification", setter="qualification", searcher=StringSearch("qualification"))
        responsible = Attribute(getter="responsible", setter="responsible", searcher=StringSearch("responsible"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))

class ExplanationOfBenefitDiagnosis(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    diagnosisCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    diagnosisReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    onAdmission = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    packageCode = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        diagnosisCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="diagnosisCodeableConcept", setter="diagnosisCodeableConcept", searcher=StringSearch("diagnosisCodeableConcept"))
        diagnosisReference = EmbeddedAttribute(type="FHIRReference", getter="diagnosisReference", setter="diagnosisReference", searcher=StringSearch("diagnosisReference"))
        onAdmission = EmbeddedAttribute(type="CodeableConcept", getter="onAdmission", setter="onAdmission", searcher=StringSearch("onAdmission"))
        packageCode = EmbeddedAttribute(type="CodeableConcept", getter="packageCode", setter="packageCode", searcher=StringSearch("packageCode"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ExplanationOfBenefitInsurance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    coverage = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    focal = fields.BooleanField(blank=False, required=True)
    preAuthRef = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        coverage = EmbeddedAttribute(type="FHIRReference", getter="coverage", setter="coverage", searcher=StringSearch("coverage"))
        focal = Attribute(getter="focal", setter="focal", searcher=StringSearch("focal"))
        preAuthRef = Attribute(getter="preAuthRef", setter="preAuthRef", searcher=StringSearch("preAuthRef"))

class ExplanationOfBenefitItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ExplanationOfBenefitItemAdjudication", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    careTeamSequence = fields.ListField(fields.IntegerField(), blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    detail = fields.EmbeddedDocumentListField("ExplanationOfBenefitItemDetail", blank=True, required=False)
    diagnosisSequence = fields.ListField(fields.IntegerField(), blank=True, required=False)
    encounter = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    informationSequence = fields.ListField(fields.IntegerField(), blank=True, required=False)
    locationAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    locationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    locationReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    procedureSequence = fields.ListField(fields.IntegerField(), blank=True, required=False)
    productOrService = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    programCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    revenue = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    servicedDate = fields.DateTimeField(blank=True, required=False)
    servicedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    subSite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    udi = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ExplanationOfBenefitItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        careTeamSequence = Attribute(getter="careTeamSequence", setter="careTeamSequence", searcher=NumericSearch("careTeamSequence"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        detail = EmbeddedAttribute(type="ExplanationOfBenefitItemDetail", getter="detail", setter="detail", searcher=StringSearch("detail"))
        diagnosisSequence = Attribute(getter="diagnosisSequence", setter="diagnosisSequence", searcher=NumericSearch("diagnosisSequence"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        informationSequence = Attribute(getter="informationSequence", setter="informationSequence", searcher=NumericSearch("informationSequence"))
        locationAddress = EmbeddedAttribute(type="Address", getter="locationAddress", setter="locationAddress", searcher=StringSearch("locationAddress"))
        locationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="locationCodeableConcept", setter="locationCodeableConcept", searcher=StringSearch("locationCodeableConcept"))
        locationReference = EmbeddedAttribute(type="FHIRReference", getter="locationReference", setter="locationReference", searcher=StringSearch("locationReference"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        procedureSequence = Attribute(getter="procedureSequence", setter="procedureSequence", searcher=NumericSearch("procedureSequence"))
        productOrService = EmbeddedAttribute(type="CodeableConcept", getter="productOrService", setter="productOrService", searcher=StringSearch("productOrService"))
        programCode = EmbeddedAttribute(type="CodeableConcept", getter="programCode", setter="programCode", searcher=StringSearch("programCode"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        revenue = EmbeddedAttribute(type="CodeableConcept", getter="revenue", setter="revenue", searcher=StringSearch("revenue"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        servicedDate = DateAttribute("servicedDate")
        servicedPeriod = EmbeddedAttribute(type="Period", getter="servicedPeriod", setter="servicedPeriod", searcher=StringSearch("servicedPeriod"))
        subSite = EmbeddedAttribute(type="CodeableConcept", getter="subSite", setter="subSite", searcher=StringSearch("subSite"))
        udi = EmbeddedAttribute(type="FHIRReference", getter="udi", setter="udi", searcher=StringSearch("udi"))
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ExplanationOfBenefitItemAdjudication(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    reason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="Money", getter="amount", setter="amount", searcher=StringSearch("amount"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class ExplanationOfBenefitItemDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ExplanationOfBenefitItemAdjudication", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    productOrService = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    programCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    revenue = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    subDetail = fields.EmbeddedDocumentListField("ExplanationOfBenefitItemDetailSubDetail", blank=True, required=False)
    udi = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ExplanationOfBenefitItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        productOrService = EmbeddedAttribute(type="CodeableConcept", getter="productOrService", setter="productOrService", searcher=StringSearch("productOrService"))
        programCode = EmbeddedAttribute(type="CodeableConcept", getter="programCode", setter="programCode", searcher=StringSearch("programCode"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        revenue = EmbeddedAttribute(type="CodeableConcept", getter="revenue", setter="revenue", searcher=StringSearch("revenue"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        subDetail = EmbeddedAttribute(type="ExplanationOfBenefitItemDetailSubDetail", getter="subDetail", setter="subDetail", searcher=StringSearch("subDetail"))
        udi = EmbeddedAttribute(type="FHIRReference", getter="udi", setter="udi", searcher=StringSearch("udi"))
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ExplanationOfBenefitItemDetailSubDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ExplanationOfBenefitItemAdjudication", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    productOrService = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    programCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    revenue = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    udi = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ExplanationOfBenefitItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        productOrService = EmbeddedAttribute(type="CodeableConcept", getter="productOrService", setter="productOrService", searcher=StringSearch("productOrService"))
        programCode = EmbeddedAttribute(type="CodeableConcept", getter="programCode", setter="programCode", searcher=StringSearch("programCode"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        revenue = EmbeddedAttribute(type="CodeableConcept", getter="revenue", setter="revenue", searcher=StringSearch("revenue"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        udi = EmbeddedAttribute(type="FHIRReference", getter="udi", setter="udi", searcher=StringSearch("udi"))
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ExplanationOfBenefitPayee(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    party = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        party = EmbeddedAttribute(type="FHIRReference", getter="party", setter="party", searcher=StringSearch("party"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ExplanationOfBenefitPayment(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjustment = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    adjustmentReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjustment = EmbeddedAttribute(type="Money", getter="adjustment", setter="adjustment", searcher=StringSearch("adjustment"))
        adjustmentReason = EmbeddedAttribute(type="CodeableConcept", getter="adjustmentReason", setter="adjustmentReason", searcher=StringSearch("adjustmentReason"))
        amount = EmbeddedAttribute(type="Money", getter="amount", setter="amount", searcher=StringSearch("amount"))
        date = DateAttribute("date")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ExplanationOfBenefitProcedure(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    procedureCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    procedureReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    udi = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        date = DateAttribute("date")
        procedureCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="procedureCodeableConcept", setter="procedureCodeableConcept", searcher=StringSearch("procedureCodeableConcept"))
        procedureReference = EmbeddedAttribute(type="FHIRReference", getter="procedureReference", setter="procedureReference", searcher=StringSearch("procedureReference"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        udi = EmbeddedAttribute(type="FHIRReference", getter="udi", setter="udi", searcher=StringSearch("udi"))

class ExplanationOfBenefitProcessNote(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    language = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    number = fields.IntegerField(blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        language = EmbeddedAttribute(type="CodeableConcept", getter="language", setter="language", searcher=StringSearch("language"))
        number = Attribute(getter="number", setter="number", searcher=NumericSearch("number"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class ExplanationOfBenefitRelated(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    claim = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    reference = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    relationship = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        claim = EmbeddedAttribute(type="FHIRReference", getter="claim", setter="claim", searcher=StringSearch("claim"))
        reference = EmbeddedAttribute(type="Identifier", getter="reference", setter="reference", searcher=StringSearch("reference"))
        relationship = EmbeddedAttribute(type="CodeableConcept", getter="relationship", setter="relationship", searcher=StringSearch("relationship"))

class ExplanationOfBenefitSupportingInfo(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    reason = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    timingDate = fields.DateTimeField(blank=True, required=False)
    timingPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        reason = EmbeddedAttribute(type="Coding", getter="reason", setter="reason", searcher=StringSearch("reason"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        timingDate = DateAttribute("timingDate")
        timingPeriod = EmbeddedAttribute(type="Period", getter="timingPeriod", setter="timingPeriod", searcher=StringSearch("timingPeriod"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueReference = EmbeddedAttribute(type="FHIRReference", getter="valueReference", setter="valueReference", searcher=StringSearch("valueReference"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))

class ExplanationOfBenefitTotal(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Money", blank=False, required=True)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="Money", getter="amount", setter="amount", searcher=StringSearch("amount"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))

class Expression(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    expression = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=False, required=True)
    name = fields.CharField(blank=True, required=False)
    reference = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        reference = Attribute(getter="reference", setter="reference", searcher=StringSearch("reference"))

class Extension(FhirBaseModel, EmbeddedMongoModel):
    id = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=False, required=True)
    valueBase64Binary = fields.CharField(blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCanonical = fields.CharField(blank=True, required=False)
    valueCode = fields.CharField(blank=True, required=False)
    valueDate = fields.DateTimeField(blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valueDecimal = fields.FloatField(blank=True, required=False)
    valueId = fields.CharField(blank=True, required=False)
    valueInstant = fields.DateTimeField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valueMarkdown = fields.CharField(blank=True, required=False)
    valueOid = fields.CharField(blank=True, required=False)
    valuePositiveInt = fields.IntegerField(blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueTime = fields.DateTimeField(blank=True, required=False)
    valueUnsignedInt = fields.IntegerField(blank=True, required=False)
    valueUri = fields.CharField(blank=True, required=False)
    valueUrl = fields.CharField(blank=True, required=False)
    valueUuid = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        valueBase64Binary = Attribute(getter="valueBase64Binary", setter="valueBase64Binary", searcher=StringSearch("valueBase64Binary"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCanonical = Attribute(getter="valueCanonical", setter="valueCanonical", searcher=StringSearch("valueCanonical"))
        valueCode = Attribute(getter="valueCode", setter="valueCode", searcher=StringSearch("valueCode"))
        valueDate = DateAttribute("valueDate")
        valueDateTime = DateAttribute("valueDateTime")
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueId = Attribute(getter="valueId", setter="valueId", searcher=StringSearch("valueId"))
        valueInstant = DateAttribute("valueInstant")
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueMarkdown = Attribute(getter="valueMarkdown", setter="valueMarkdown", searcher=StringSearch("valueMarkdown"))
        valueOid = Attribute(getter="valueOid", setter="valueOid", searcher=StringSearch("valueOid"))
        valuePositiveInt = Attribute(getter="valuePositiveInt", setter="valuePositiveInt", searcher=NumericSearch("valuePositiveInt"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")
        valueUnsignedInt = Attribute(getter="valueUnsignedInt", setter="valueUnsignedInt", searcher=NumericSearch("valueUnsignedInt"))
        valueUri = Attribute(getter="valueUri", setter="valueUri", searcher=StringSearch("valueUri"))
        valueUrl = Attribute(getter="valueUrl", setter="valueUrl", searcher=StringSearch("valueUrl"))
        valueUuid = Attribute(getter="valueUuid", setter="valueUuid", searcher=StringSearch("valueUuid"))





class FHIRReference(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    reference = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        reference = Attribute(getter="reference", setter="reference", searcher=StringSearch("reference"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class FamilyMemberHistory(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    ageAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    ageRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    ageString = fields.CharField(blank=True, required=False)
    bornDate = fields.DateTimeField(blank=True, required=False)
    bornPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    bornString = fields.CharField(blank=True, required=False)
    condition = fields.EmbeddedDocumentListField("FamilyMemberHistoryCondition", blank=True, required=False)
    dataAbsentReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    deceasedAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    deceasedBoolean = fields.BooleanField(blank=True, required=False)
    deceasedDate = fields.DateTimeField(blank=True, required=False)
    deceasedRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    deceasedString = fields.CharField(blank=True, required=False)
    estimatedAge = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    instantiatesCanonical = fields.ListField(fields.CharField(), blank=True, required=False)
    instantiatesUri = fields.ListField(fields.CharField(), blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    relationship = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    sex = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        ageAge = EmbeddedAttribute(type="Age", getter="ageAge", setter="ageAge", searcher=StringSearch("ageAge"))
        ageRange = EmbeddedAttribute(type="Range", getter="ageRange", setter="ageRange", searcher=StringSearch("ageRange"))
        ageString = Attribute(getter="ageString", setter="ageString", searcher=StringSearch("ageString"))
        bornDate = DateAttribute("bornDate")
        bornPeriod = EmbeddedAttribute(type="Period", getter="bornPeriod", setter="bornPeriod", searcher=StringSearch("bornPeriod"))
        bornString = Attribute(getter="bornString", setter="bornString", searcher=StringSearch("bornString"))
        condition = EmbeddedAttribute(type="FamilyMemberHistoryCondition", getter="condition", setter="condition", searcher=StringSearch("condition"))
        dataAbsentReason = EmbeddedAttribute(type="CodeableConcept", getter="dataAbsentReason", setter="dataAbsentReason", searcher=StringSearch("dataAbsentReason"))
        date = DateAttribute("date")
        deceasedAge = EmbeddedAttribute(type="Age", getter="deceasedAge", setter="deceasedAge", searcher=StringSearch("deceasedAge"))
        deceasedBoolean = Attribute(getter="deceasedBoolean", setter="deceasedBoolean", searcher=StringSearch("deceasedBoolean"))
        deceasedDate = DateAttribute("deceasedDate")
        deceasedRange = EmbeddedAttribute(type="Range", getter="deceasedRange", setter="deceasedRange", searcher=StringSearch("deceasedRange"))
        deceasedString = Attribute(getter="deceasedString", setter="deceasedString", searcher=StringSearch("deceasedString"))
        estimatedAge = Attribute(getter="estimatedAge", setter="estimatedAge", searcher=StringSearch("estimatedAge"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        instantiatesCanonical = Attribute(getter="instantiatesCanonical", setter="instantiatesCanonical", searcher=StringSearch("instantiatesCanonical"))
        instantiatesUri = Attribute(getter="instantiatesUri", setter="instantiatesUri", searcher=StringSearch("instantiatesUri"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        relationship = EmbeddedAttribute(type="CodeableConcept", getter="relationship", setter="relationship", searcher=StringSearch("relationship"))
        sex = EmbeddedAttribute(type="CodeableConcept", getter="sex", setter="sex", searcher=StringSearch("sex"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class FamilyMemberHistoryCondition(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    contributedToDeath = fields.BooleanField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    onsetAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    onsetPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    onsetRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    onsetString = fields.CharField(blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        contributedToDeath = Attribute(getter="contributedToDeath", setter="contributedToDeath", searcher=StringSearch("contributedToDeath"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        onsetAge = EmbeddedAttribute(type="Age", getter="onsetAge", setter="onsetAge", searcher=StringSearch("onsetAge"))
        onsetPeriod = EmbeddedAttribute(type="Period", getter="onsetPeriod", setter="onsetPeriod", searcher=StringSearch("onsetPeriod"))
        onsetRange = EmbeddedAttribute(type="Range", getter="onsetRange", setter="onsetRange", searcher=StringSearch("onsetRange"))
        onsetString = Attribute(getter="onsetString", setter="onsetString", searcher=StringSearch("onsetString"))
        outcome = EmbeddedAttribute(type="CodeableConcept", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))

class Flag(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    author = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        author = EmbeddedAttribute(type="FHIRReference", getter="author", setter="author", searcher=StringSearch("author"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))

class Goal(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    achievementStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    addresses = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    description = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    expressedBy = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    lifecycleStatus = fields.CharField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    outcomeCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    outcomeReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    priority = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    startCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    startDate = fields.DateTimeField(blank=True, required=False)
    statusDate = fields.DateTimeField(blank=True, required=False)
    statusReason = fields.CharField(blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    target = fields.EmbeddedDocumentListField("GoalTarget", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        achievementStatus = EmbeddedAttribute(type="CodeableConcept", getter="achievementStatus", setter="achievementStatus", searcher=StringSearch("achievementStatus"))
        addresses = EmbeddedAttribute(type="FHIRReference", getter="addresses", setter="addresses", searcher=StringSearch("addresses"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        description = EmbeddedAttribute(type="CodeableConcept", getter="description", setter="description", searcher=StringSearch("description"))
        expressedBy = EmbeddedAttribute(type="FHIRReference", getter="expressedBy", setter="expressedBy", searcher=StringSearch("expressedBy"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        lifecycleStatus = Attribute(getter="lifecycleStatus", setter="lifecycleStatus", searcher=StringSearch("lifecycleStatus"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        outcomeCode = EmbeddedAttribute(type="CodeableConcept", getter="outcomeCode", setter="outcomeCode", searcher=StringSearch("outcomeCode"))
        outcomeReference = EmbeddedAttribute(type="FHIRReference", getter="outcomeReference", setter="outcomeReference", searcher=StringSearch("outcomeReference"))
        priority = EmbeddedAttribute(type="CodeableConcept", getter="priority", setter="priority", searcher=StringSearch("priority"))
        startCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="startCodeableConcept", setter="startCodeableConcept", searcher=StringSearch("startCodeableConcept"))
        startDate = DateAttribute("startDate")
        statusDate = DateAttribute("statusDate")
        statusReason = Attribute(getter="statusReason", setter="statusReason", searcher=StringSearch("statusReason"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        target = EmbeddedAttribute(type="GoalTarget", getter="target", setter="target", searcher=StringSearch("target"))

class GoalTarget(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    detailBoolean = fields.BooleanField(blank=True, required=False)
    detailCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    detailInteger = fields.IntegerField(blank=True, required=False)
    detailQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    detailRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    detailRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    detailString = fields.CharField(blank=True, required=False)
    dueDate = fields.DateTimeField(blank=True, required=False)
    dueDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    measure = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        detailBoolean = Attribute(getter="detailBoolean", setter="detailBoolean", searcher=StringSearch("detailBoolean"))
        detailCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="detailCodeableConcept", setter="detailCodeableConcept", searcher=StringSearch("detailCodeableConcept"))
        detailInteger = Attribute(getter="detailInteger", setter="detailInteger", searcher=NumericSearch("detailInteger"))
        detailQuantity = EmbeddedAttribute(type="Quantity", getter="detailQuantity", setter="detailQuantity", searcher=StringSearch("detailQuantity"))
        detailRange = EmbeddedAttribute(type="Range", getter="detailRange", setter="detailRange", searcher=StringSearch("detailRange"))
        detailRatio = EmbeddedAttribute(type="Ratio", getter="detailRatio", setter="detailRatio", searcher=StringSearch("detailRatio"))
        detailString = Attribute(getter="detailString", setter="detailString", searcher=StringSearch("detailString"))
        dueDate = DateAttribute("dueDate")
        dueDuration = EmbeddedAttribute(type="Duration", getter="dueDuration", setter="dueDuration", searcher=StringSearch("dueDuration"))
        measure = EmbeddedAttribute(type="CodeableConcept", getter="measure", setter="measure", searcher=StringSearch("measure"))

class GraphDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    link = fields.EmbeddedDocumentListField("GraphDefinitionLink", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    profile = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    start = fields.CharField(blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        link = EmbeddedAttribute(type="GraphDefinitionLink", getter="link", setter="link", searcher=StringSearch("link"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        profile = Attribute(getter="profile", setter="profile", searcher=StringSearch("profile"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        start = Attribute(getter="start", setter="start", searcher=StringSearch("start"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class GraphDefinitionLink(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    max = fields.CharField(blank=True, required=False)
    min = fields.IntegerField(blank=True, required=False)
    path = fields.CharField(blank=True, required=False)
    sliceName = fields.CharField(blank=True, required=False)
    target = fields.EmbeddedDocumentListField("GraphDefinitionLinkTarget", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        max = Attribute(getter="max", setter="max", searcher=StringSearch("max"))
        min = Attribute(getter="min", setter="min", searcher=NumericSearch("min"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))
        sliceName = Attribute(getter="sliceName", setter="sliceName", searcher=StringSearch("sliceName"))
        target = EmbeddedAttribute(type="GraphDefinitionLinkTarget", getter="target", setter="target", searcher=StringSearch("target"))

class GraphDefinitionLinkTarget(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    compartment = fields.EmbeddedDocumentListField("GraphDefinitionLinkTargetCompartment", blank=True, required=False)
    params = fields.CharField(blank=True, required=False)
    profile = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        compartment = EmbeddedAttribute(type="GraphDefinitionLinkTargetCompartment", getter="compartment", setter="compartment", searcher=StringSearch("compartment"))
        params = Attribute(getter="params", setter="params", searcher=StringSearch("params"))
        profile = Attribute(getter="profile", setter="profile", searcher=StringSearch("profile"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class GraphDefinitionLinkTargetCompartment(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    expression = fields.CharField(blank=True, required=False)
    rule = fields.CharField(blank=False, required=True)
    use = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        rule = Attribute(getter="rule", setter="rule", searcher=StringSearch("rule"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))

class Group(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    actual = fields.BooleanField(blank=False, required=True)
    characteristic = fields.EmbeddedDocumentListField("GroupCharacteristic", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    managingEntity = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    member = fields.EmbeddedDocumentListField("GroupMember", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    quantity = fields.IntegerField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        actual = Attribute(getter="actual", setter="actual", searcher=StringSearch("actual"))
        characteristic = EmbeddedAttribute(type="GroupCharacteristic", getter="characteristic", setter="characteristic", searcher=StringSearch("characteristic"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        managingEntity = EmbeddedAttribute(type="FHIRReference", getter="managingEntity", setter="managingEntity", searcher=StringSearch("managingEntity"))
        member = EmbeddedAttribute(type="GroupMember", getter="member", setter="member", searcher=StringSearch("member"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        quantity = Attribute(getter="quantity", setter="quantity", searcher=NumericSearch("quantity"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class GroupCharacteristic(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    exclude = fields.BooleanField(blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    valueReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        exclude = Attribute(getter="exclude", setter="exclude", searcher=StringSearch("exclude"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))
        valueReference = EmbeddedAttribute(type="FHIRReference", getter="valueReference", setter="valueReference", searcher=StringSearch("valueReference"))

class GroupMember(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    entity = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    inactive = fields.BooleanField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        entity = EmbeddedAttribute(type="FHIRReference", getter="entity", setter="entity", searcher=StringSearch("entity"))
        inactive = Attribute(getter="inactive", setter="inactive", searcher=StringSearch("inactive"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))

class GuidanceResponse(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    dataRequirement = fields.EmbeddedDocumentListField("DataRequirement", blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    evaluationMessage = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    moduleCanonical = fields.CharField(blank=True, required=False)
    moduleCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    moduleUri = fields.CharField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    outputParameters = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    performer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    requestIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    result = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        dataRequirement = EmbeddedAttribute(type="DataRequirement", getter="dataRequirement", setter="dataRequirement", searcher=StringSearch("dataRequirement"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        evaluationMessage = EmbeddedAttribute(type="FHIRReference", getter="evaluationMessage", setter="evaluationMessage", searcher=StringSearch("evaluationMessage"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        moduleCanonical = Attribute(getter="moduleCanonical", setter="moduleCanonical", searcher=StringSearch("moduleCanonical"))
        moduleCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="moduleCodeableConcept", setter="moduleCodeableConcept", searcher=StringSearch("moduleCodeableConcept"))
        moduleUri = Attribute(getter="moduleUri", setter="moduleUri", searcher=StringSearch("moduleUri"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        outputParameters = EmbeddedAttribute(type="FHIRReference", getter="outputParameters", setter="outputParameters", searcher=StringSearch("outputParameters"))
        performer = EmbeddedAttribute(type="FHIRReference", getter="performer", setter="performer", searcher=StringSearch("performer"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        requestIdentifier = EmbeddedAttribute(type="Identifier", getter="requestIdentifier", setter="requestIdentifier", searcher=StringSearch("requestIdentifier"))
        result = EmbeddedAttribute(type="FHIRReference", getter="result", setter="result", searcher=StringSearch("result"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))

class HealthcareService(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    appointmentRequired = fields.BooleanField(blank=True, required=False)
    availabilityExceptions = fields.CharField(blank=True, required=False)
    availableTime = fields.EmbeddedDocumentListField("HealthcareServiceAvailableTime", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    characteristic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    communication = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    coverageArea = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    eligibility = fields.EmbeddedDocumentListField("HealthcareServiceEligibility", blank=True, required=False)
    endpoint = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    extraDetails = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    location = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    notAvailable = fields.EmbeddedDocumentListField("HealthcareServiceNotAvailable", blank=True, required=False)
    photo = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    program = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    providedBy = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    referralMethod = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    serviceProvisionCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    specialty = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        appointmentRequired = Attribute(getter="appointmentRequired", setter="appointmentRequired", searcher=StringSearch("appointmentRequired"))
        availabilityExceptions = Attribute(getter="availabilityExceptions", setter="availabilityExceptions", searcher=StringSearch("availabilityExceptions"))
        availableTime = EmbeddedAttribute(type="HealthcareServiceAvailableTime", getter="availableTime", setter="availableTime", searcher=StringSearch("availableTime"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        characteristic = EmbeddedAttribute(type="CodeableConcept", getter="characteristic", setter="characteristic", searcher=StringSearch("characteristic"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        communication = EmbeddedAttribute(type="CodeableConcept", getter="communication", setter="communication", searcher=StringSearch("communication"))
        coverageArea = EmbeddedAttribute(type="FHIRReference", getter="coverageArea", setter="coverageArea", searcher=StringSearch("coverageArea"))
        eligibility = EmbeddedAttribute(type="HealthcareServiceEligibility", getter="eligibility", setter="eligibility", searcher=StringSearch("eligibility"))
        endpoint = EmbeddedAttribute(type="FHIRReference", getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        extraDetails = Attribute(getter="extraDetails", setter="extraDetails", searcher=StringSearch("extraDetails"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        location = EmbeddedAttribute(type="FHIRReference", getter="location", setter="location", searcher=StringSearch("location"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        notAvailable = EmbeddedAttribute(type="HealthcareServiceNotAvailable", getter="notAvailable", setter="notAvailable", searcher=StringSearch("notAvailable"))
        photo = EmbeddedAttribute(type="Attachment", getter="photo", setter="photo", searcher=StringSearch("photo"))
        program = EmbeddedAttribute(type="CodeableConcept", getter="program", setter="program", searcher=StringSearch("program"))
        providedBy = EmbeddedAttribute(type="FHIRReference", getter="providedBy", setter="providedBy", searcher=StringSearch("providedBy"))
        referralMethod = EmbeddedAttribute(type="CodeableConcept", getter="referralMethod", setter="referralMethod", searcher=StringSearch("referralMethod"))
        serviceProvisionCode = EmbeddedAttribute(type="CodeableConcept", getter="serviceProvisionCode", setter="serviceProvisionCode", searcher=StringSearch("serviceProvisionCode"))
        specialty = EmbeddedAttribute(type="CodeableConcept", getter="specialty", setter="specialty", searcher=StringSearch("specialty"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class HealthcareServiceAvailableTime(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    allDay = fields.BooleanField(blank=True, required=False)
    availableEndTime = fields.DateTimeField(blank=True, required=False)
    availableStartTime = fields.DateTimeField(blank=True, required=False)
    daysOfWeek = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        allDay = Attribute(getter="allDay", setter="allDay", searcher=StringSearch("allDay"))
        availableEndTime = DateAttribute("availableEndTime")
        availableStartTime = DateAttribute("availableStartTime")
        daysOfWeek = Attribute(getter="daysOfWeek", setter="daysOfWeek", searcher=StringSearch("daysOfWeek"))

class HealthcareServiceEligibility(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))

class HealthcareServiceNotAvailable(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=False, required=True)
    during = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        during = EmbeddedAttribute(type="Period", getter="during", setter="during", searcher=StringSearch("during"))

class HumanName(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    family = fields.CharField(blank=True, required=False)
    given = fields.ListField(fields.CharField(), blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    prefix = fields.ListField(fields.CharField(), blank=True, required=False)
    suffix = fields.ListField(fields.CharField(), blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    use = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        family = Attribute(getter="family", setter="family", searcher=StringSearch("family"))
        given = Attribute(getter="given", setter="given", searcher=StringSearch("given"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        prefix = Attribute(getter="prefix", setter="prefix", searcher=StringSearch("prefix"))
        suffix = Attribute(getter="suffix", setter="suffix", searcher=StringSearch("suffix"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))

class Identifier(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    assigner = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    use = fields.CharField(blank=True, required=False)
    value = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        assigner = EmbeddedAttribute(type="FHIRReference", getter="assigner", setter="assigner", searcher=StringSearch("assigner"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class ImagingManifest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    author = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    authoringTime = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    study = fields.EmbeddedDocumentListField("ImagingManifestStudy", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        author = EmbeddedAttribute(type="FHIRReference", getter="author", setter="author", searcher=StringSearch("author"))
        authoringTime = DateAttribute("authoringTime")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        study = EmbeddedAttribute(type="ImagingManifestStudy", getter="study", setter="study", searcher=StringSearch("study"))

class ImagingManifestStudy(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    endpoint = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    imagingStudy = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    series = fields.EmbeddedDocumentListField("ImagingManifestStudySeries", blank=False, required=True)
    uid = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        endpoint = EmbeddedAttribute(type="FHIRReference", getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        imagingStudy = EmbeddedAttribute(type="FHIRReference", getter="imagingStudy", setter="imagingStudy", searcher=StringSearch("imagingStudy"))
        series = EmbeddedAttribute(type="ImagingManifestStudySeries", getter="series", setter="series", searcher=StringSearch("series"))
        uid = Attribute(getter="uid", setter="uid", searcher=StringSearch("uid"))

class ImagingManifestStudySeries(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    endpoint = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    instance = fields.EmbeddedDocumentListField("ImagingManifestStudySeriesInstance", blank=False, required=True)
    uid = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        endpoint = EmbeddedAttribute(type="FHIRReference", getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        instance = EmbeddedAttribute(type="ImagingManifestStudySeriesInstance", getter="instance", setter="instance", searcher=StringSearch("instance"))
        uid = Attribute(getter="uid", setter="uid", searcher=StringSearch("uid"))

class ImagingManifestStudySeriesInstance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    sopClass = fields.CharField(blank=False, required=True)
    uid = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        sopClass = Attribute(getter="sopClass", setter="sopClass", searcher=StringSearch("sopClass"))
        uid = Attribute(getter="uid", setter="uid", searcher=StringSearch("uid"))

class ImagingStudy(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    endpoint = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    interpreter = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    location = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    modality = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    numberOfInstances = fields.IntegerField(blank=True, required=False)
    numberOfSeries = fields.IntegerField(blank=True, required=False)
    procedureCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    procedureReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    referrer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    series = fields.EmbeddedDocumentListField("ImagingStudySeries", blank=True, required=False)
    started = fields.DateTimeField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        endpoint = EmbeddedAttribute(type="FHIRReference", getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        interpreter = EmbeddedAttribute(type="FHIRReference", getter="interpreter", setter="interpreter", searcher=StringSearch("interpreter"))
        location = EmbeddedAttribute(type="FHIRReference", getter="location", setter="location", searcher=StringSearch("location"))
        modality = EmbeddedAttribute(type="Coding", getter="modality", setter="modality", searcher=StringSearch("modality"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        numberOfInstances = Attribute(getter="numberOfInstances", setter="numberOfInstances", searcher=NumericSearch("numberOfInstances"))
        numberOfSeries = Attribute(getter="numberOfSeries", setter="numberOfSeries", searcher=NumericSearch("numberOfSeries"))
        procedureCode = EmbeddedAttribute(type="CodeableConcept", getter="procedureCode", setter="procedureCode", searcher=StringSearch("procedureCode"))
        procedureReference = EmbeddedAttribute(type="FHIRReference", getter="procedureReference", setter="procedureReference", searcher=StringSearch("procedureReference"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        referrer = EmbeddedAttribute(type="FHIRReference", getter="referrer", setter="referrer", searcher=StringSearch("referrer"))
        series = EmbeddedAttribute(type="ImagingStudySeries", getter="series", setter="series", searcher=StringSearch("series"))
        started = DateAttribute("started")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))

class ImagingStudySeries(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    endpoint = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    instance = fields.EmbeddedDocumentListField("ImagingStudySeriesInstance", blank=True, required=False)
    laterality = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    modality = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    number = fields.IntegerField(blank=True, required=False)
    numberOfInstances = fields.IntegerField(blank=True, required=False)
    performer = fields.EmbeddedDocumentListField("ImagingStudySeriesPerformer", blank=True, required=False)
    specimen = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    started = fields.DateTimeField(blank=True, required=False)
    uid = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        bodySite = EmbeddedAttribute(type="Coding", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        endpoint = EmbeddedAttribute(type="FHIRReference", getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        instance = EmbeddedAttribute(type="ImagingStudySeriesInstance", getter="instance", setter="instance", searcher=StringSearch("instance"))
        laterality = EmbeddedAttribute(type="Coding", getter="laterality", setter="laterality", searcher=StringSearch("laterality"))
        modality = EmbeddedAttribute(type="Coding", getter="modality", setter="modality", searcher=StringSearch("modality"))
        number = Attribute(getter="number", setter="number", searcher=NumericSearch("number"))
        numberOfInstances = Attribute(getter="numberOfInstances", setter="numberOfInstances", searcher=NumericSearch("numberOfInstances"))
        performer = EmbeddedAttribute(type="ImagingStudySeriesPerformer", getter="performer", setter="performer", searcher=StringSearch("performer"))
        specimen = EmbeddedAttribute(type="FHIRReference", getter="specimen", setter="specimen", searcher=StringSearch("specimen"))
        started = DateAttribute("started")
        uid = Attribute(getter="uid", setter="uid", searcher=StringSearch("uid"))

class ImagingStudySeriesInstance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    number = fields.IntegerField(blank=True, required=False)
    sopClass = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    uid = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        number = Attribute(getter="number", setter="number", searcher=NumericSearch("number"))
        sopClass = EmbeddedAttribute(type="Coding", getter="sopClass", setter="sopClass", searcher=StringSearch("sopClass"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        uid = Attribute(getter="uid", setter="uid", searcher=StringSearch("uid"))

class ImagingStudySeriesPerformer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    function = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = EmbeddedAttribute(type="FHIRReference", getter="actor", setter="actor", searcher=StringSearch("actor"))
        function = EmbeddedAttribute(type="CodeableConcept", getter="function", setter="function", searcher=StringSearch("function"))

class Immunization(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    doseQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    education = fields.EmbeddedDocumentListField("ImmunizationEducation", blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    expirationDate = fields.DateTimeField(blank=True, required=False)
    fundingSource = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    isSubpotent = fields.BooleanField(blank=True, required=False)
    location = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    lotNumber = fields.CharField(blank=True, required=False)
    manufacturer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrenceString = fields.CharField(blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    performer = fields.EmbeddedDocumentListField("ImmunizationPerformer", blank=True, required=False)
    primarySource = fields.BooleanField(blank=True, required=False)
    programEligibility = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    protocolApplied = fields.EmbeddedDocumentListField("ImmunizationProtocolApplied", blank=True, required=False)
    reaction = fields.EmbeddedDocumentListField("ImmunizationReaction", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    recorded = fields.DateTimeField(blank=True, required=False)
    reportOrigin = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    route = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    site = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subpotentReason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    vaccineCode = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        doseQuantity = EmbeddedAttribute(type="Quantity", getter="doseQuantity", setter="doseQuantity", searcher=StringSearch("doseQuantity"))
        education = EmbeddedAttribute(type="ImmunizationEducation", getter="education", setter="education", searcher=StringSearch("education"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        expirationDate = DateAttribute("expirationDate")
        fundingSource = EmbeddedAttribute(type="CodeableConcept", getter="fundingSource", setter="fundingSource", searcher=StringSearch("fundingSource"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        isSubpotent = Attribute(getter="isSubpotent", setter="isSubpotent", searcher=StringSearch("isSubpotent"))
        location = EmbeddedAttribute(type="FHIRReference", getter="location", setter="location", searcher=StringSearch("location"))
        lotNumber = Attribute(getter="lotNumber", setter="lotNumber", searcher=StringSearch("lotNumber"))
        manufacturer = EmbeddedAttribute(type="FHIRReference", getter="manufacturer", setter="manufacturer", searcher=StringSearch("manufacturer"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrenceString = Attribute(getter="occurrenceString", setter="occurrenceString", searcher=StringSearch("occurrenceString"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        performer = EmbeddedAttribute(type="ImmunizationPerformer", getter="performer", setter="performer", searcher=StringSearch("performer"))
        primarySource = Attribute(getter="primarySource", setter="primarySource", searcher=StringSearch("primarySource"))
        programEligibility = EmbeddedAttribute(type="CodeableConcept", getter="programEligibility", setter="programEligibility", searcher=StringSearch("programEligibility"))
        protocolApplied = EmbeddedAttribute(type="ImmunizationProtocolApplied", getter="protocolApplied", setter="protocolApplied", searcher=StringSearch("protocolApplied"))
        reaction = EmbeddedAttribute(type="ImmunizationReaction", getter="reaction", setter="reaction", searcher=StringSearch("reaction"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        recorded = DateAttribute("recorded")
        reportOrigin = EmbeddedAttribute(type="CodeableConcept", getter="reportOrigin", setter="reportOrigin", searcher=StringSearch("reportOrigin"))
        route = EmbeddedAttribute(type="CodeableConcept", getter="route", setter="route", searcher=StringSearch("route"))
        site = EmbeddedAttribute(type="CodeableConcept", getter="site", setter="site", searcher=StringSearch("site"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusReason = EmbeddedAttribute(type="CodeableConcept", getter="statusReason", setter="statusReason", searcher=StringSearch("statusReason"))
        subpotentReason = EmbeddedAttribute(type="CodeableConcept", getter="subpotentReason", setter="subpotentReason", searcher=StringSearch("subpotentReason"))
        vaccineCode = EmbeddedAttribute(type="CodeableConcept", getter="vaccineCode", setter="vaccineCode", searcher=StringSearch("vaccineCode"))

class ImmunizationEducation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    documentType = fields.CharField(blank=True, required=False)
    presentationDate = fields.DateTimeField(blank=True, required=False)
    publicationDate = fields.DateTimeField(blank=True, required=False)
    reference = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        documentType = Attribute(getter="documentType", setter="documentType", searcher=StringSearch("documentType"))
        presentationDate = DateAttribute("presentationDate")
        publicationDate = DateAttribute("publicationDate")
        reference = Attribute(getter="reference", setter="reference", searcher=StringSearch("reference"))

class ImmunizationEvaluation(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authority = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    doseNumberPositiveInt = fields.IntegerField(blank=True, required=False)
    doseNumberString = fields.CharField(blank=True, required=False)
    doseStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    doseStatusReason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    immunizationEvent = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    series = fields.CharField(blank=True, required=False)
    seriesDosesPositiveInt = fields.IntegerField(blank=True, required=False)
    seriesDosesString = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    targetDisease = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authority = EmbeddedAttribute(type="FHIRReference", getter="authority", setter="authority", searcher=StringSearch("authority"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        doseNumberPositiveInt = Attribute(getter="doseNumberPositiveInt", setter="doseNumberPositiveInt", searcher=NumericSearch("doseNumberPositiveInt"))
        doseNumberString = Attribute(getter="doseNumberString", setter="doseNumberString", searcher=StringSearch("doseNumberString"))
        doseStatus = EmbeddedAttribute(type="CodeableConcept", getter="doseStatus", setter="doseStatus", searcher=StringSearch("doseStatus"))
        doseStatusReason = EmbeddedAttribute(type="CodeableConcept", getter="doseStatusReason", setter="doseStatusReason", searcher=StringSearch("doseStatusReason"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        immunizationEvent = EmbeddedAttribute(type="FHIRReference", getter="immunizationEvent", setter="immunizationEvent", searcher=StringSearch("immunizationEvent"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        series = Attribute(getter="series", setter="series", searcher=StringSearch("series"))
        seriesDosesPositiveInt = Attribute(getter="seriesDosesPositiveInt", setter="seriesDosesPositiveInt", searcher=NumericSearch("seriesDosesPositiveInt"))
        seriesDosesString = Attribute(getter="seriesDosesString", setter="seriesDosesString", searcher=StringSearch("seriesDosesString"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        targetDisease = EmbeddedAttribute(type="CodeableConcept", getter="targetDisease", setter="targetDisease", searcher=StringSearch("targetDisease"))

class ImmunizationPerformer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    function = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = EmbeddedAttribute(type="FHIRReference", getter="actor", setter="actor", searcher=StringSearch("actor"))
        function = EmbeddedAttribute(type="CodeableConcept", getter="function", setter="function", searcher=StringSearch("function"))

class ImmunizationProtocolApplied(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    authority = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    doseNumberPositiveInt = fields.IntegerField(blank=True, required=False)
    doseNumberString = fields.CharField(blank=True, required=False)
    series = fields.CharField(blank=True, required=False)
    seriesDosesPositiveInt = fields.IntegerField(blank=True, required=False)
    seriesDosesString = fields.CharField(blank=True, required=False)
    targetDisease = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        authority = EmbeddedAttribute(type="FHIRReference", getter="authority", setter="authority", searcher=StringSearch("authority"))
        doseNumberPositiveInt = Attribute(getter="doseNumberPositiveInt", setter="doseNumberPositiveInt", searcher=NumericSearch("doseNumberPositiveInt"))
        doseNumberString = Attribute(getter="doseNumberString", setter="doseNumberString", searcher=StringSearch("doseNumberString"))
        series = Attribute(getter="series", setter="series", searcher=StringSearch("series"))
        seriesDosesPositiveInt = Attribute(getter="seriesDosesPositiveInt", setter="seriesDosesPositiveInt", searcher=NumericSearch("seriesDosesPositiveInt"))
        seriesDosesString = Attribute(getter="seriesDosesString", setter="seriesDosesString", searcher=StringSearch("seriesDosesString"))
        targetDisease = EmbeddedAttribute(type="CodeableConcept", getter="targetDisease", setter="targetDisease", searcher=StringSearch("targetDisease"))

class ImmunizationReaction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    detail = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    reported = fields.BooleanField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        date = DateAttribute("date")
        detail = EmbeddedAttribute(type="FHIRReference", getter="detail", setter="detail", searcher=StringSearch("detail"))
        reported = Attribute(getter="reported", setter="reported", searcher=StringSearch("reported"))

class ImmunizationRecommendation(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authority = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    date = fields.DateTimeField(blank=False, required=True)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    recommendation = fields.EmbeddedDocumentListField("ImmunizationRecommendationRecommendation", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authority = EmbeddedAttribute(type="FHIRReference", getter="authority", setter="authority", searcher=StringSearch("authority"))
        date = DateAttribute("date")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        recommendation = EmbeddedAttribute(type="ImmunizationRecommendationRecommendation", getter="recommendation", setter="recommendation", searcher=StringSearch("recommendation"))

class ImmunizationRecommendationRecommendation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    contraindicatedVaccineCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    dateCriterion = fields.EmbeddedDocumentListField("ImmunizationRecommendationRecommendationDateCriterion", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    doseNumberPositiveInt = fields.IntegerField(blank=True, required=False)
    doseNumberString = fields.CharField(blank=True, required=False)
    forecastReason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    forecastStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    series = fields.CharField(blank=True, required=False)
    seriesDosesPositiveInt = fields.IntegerField(blank=True, required=False)
    seriesDosesString = fields.CharField(blank=True, required=False)
    supportingImmunization = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    supportingPatientInformation = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    targetDisease = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    vaccineCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        contraindicatedVaccineCode = EmbeddedAttribute(type="CodeableConcept", getter="contraindicatedVaccineCode", setter="contraindicatedVaccineCode", searcher=StringSearch("contraindicatedVaccineCode"))
        dateCriterion = EmbeddedAttribute(type="ImmunizationRecommendationRecommendationDateCriterion", getter="dateCriterion", setter="dateCriterion", searcher=StringSearch("dateCriterion"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        doseNumberPositiveInt = Attribute(getter="doseNumberPositiveInt", setter="doseNumberPositiveInt", searcher=NumericSearch("doseNumberPositiveInt"))
        doseNumberString = Attribute(getter="doseNumberString", setter="doseNumberString", searcher=StringSearch("doseNumberString"))
        forecastReason = EmbeddedAttribute(type="CodeableConcept", getter="forecastReason", setter="forecastReason", searcher=StringSearch("forecastReason"))
        forecastStatus = EmbeddedAttribute(type="CodeableConcept", getter="forecastStatus", setter="forecastStatus", searcher=StringSearch("forecastStatus"))
        series = Attribute(getter="series", setter="series", searcher=StringSearch("series"))
        seriesDosesPositiveInt = Attribute(getter="seriesDosesPositiveInt", setter="seriesDosesPositiveInt", searcher=NumericSearch("seriesDosesPositiveInt"))
        seriesDosesString = Attribute(getter="seriesDosesString", setter="seriesDosesString", searcher=StringSearch("seriesDosesString"))
        supportingImmunization = EmbeddedAttribute(type="FHIRReference", getter="supportingImmunization", setter="supportingImmunization", searcher=StringSearch("supportingImmunization"))
        supportingPatientInformation = EmbeddedAttribute(type="FHIRReference", getter="supportingPatientInformation", setter="supportingPatientInformation", searcher=StringSearch("supportingPatientInformation"))
        targetDisease = EmbeddedAttribute(type="CodeableConcept", getter="targetDisease", setter="targetDisease", searcher=StringSearch("targetDisease"))
        vaccineCode = EmbeddedAttribute(type="CodeableConcept", getter="vaccineCode", setter="vaccineCode", searcher=StringSearch("vaccineCode"))

class ImmunizationRecommendationRecommendationDateCriterion(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    value = fields.DateTimeField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        value = DateAttribute("value")

class ImplementationGuide(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    definition = fields.EmbeddedDocumentField("ImplementationGuideDefinition", blank=True, required=False)
    dependsOn = fields.EmbeddedDocumentListField("ImplementationGuideDependsOn", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    fhirVersion = fields.ListField(fields.CharField(), blank=False, required=True)
    global_ = fields.EmbeddedDocumentListField("ImplementationGuideGlobal", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    license = fields.CharField(blank=True, required=False)
    manifest = fields.EmbeddedDocumentField("ImplementationGuideManifest", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    packageId = fields.CharField(blank=False, required=True)
    publisher = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=False, required=True)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        definition = EmbeddedAttribute(type="ImplementationGuideDefinition", getter="definition", setter="definition", searcher=StringSearch("definition"))
        dependsOn = EmbeddedAttribute(type="ImplementationGuideDependsOn", getter="dependsOn", setter="dependsOn", searcher=StringSearch("dependsOn"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        fhirVersion = Attribute(getter="fhirVersion", setter="fhirVersion", searcher=StringSearch("fhirVersion"))
        global_ = EmbeddedAttribute(type="ImplementationGuideGlobal", getter="global_", setter="global_", searcher=StringSearch("global_"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        license = Attribute(getter="license", setter="license", searcher=StringSearch("license"))
        manifest = EmbeddedAttribute(type="ImplementationGuideManifest", getter="manifest", setter="manifest", searcher=StringSearch("manifest"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        packageId = Attribute(getter="packageId", setter="packageId", searcher=StringSearch("packageId"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ImplementationGuideDefinition(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    grouping = fields.EmbeddedDocumentListField("ImplementationGuideDefinitionGrouping", blank=True, required=False)
    page = fields.EmbeddedDocumentField("ImplementationGuideDefinitionPage", blank=True, required=False)
    parameter = fields.EmbeddedDocumentListField("ImplementationGuideDefinitionParameter", blank=True, required=False)
    resource = fields.EmbeddedDocumentListField("ImplementationGuideDefinitionResource", blank=False, required=True)
    template = fields.EmbeddedDocumentListField("ImplementationGuideDefinitionTemplate", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        grouping = EmbeddedAttribute(type="ImplementationGuideDefinitionGrouping", getter="grouping", setter="grouping", searcher=StringSearch("grouping"))
        page = EmbeddedAttribute(type="ImplementationGuideDefinitionPage", getter="page", setter="page", searcher=StringSearch("page"))
        parameter = EmbeddedAttribute(type="ImplementationGuideDefinitionParameter", getter="parameter", setter="parameter", searcher=StringSearch("parameter"))
        resource = EmbeddedAttribute(type="ImplementationGuideDefinitionResource", getter="resource", setter="resource", searcher=StringSearch("resource"))
        template = EmbeddedAttribute(type="ImplementationGuideDefinitionTemplate", getter="template", setter="template", searcher=StringSearch("template"))

class ImplementationGuideDefinitionGrouping(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))

class ImplementationGuideDefinitionPage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    generation = fields.CharField(blank=False, required=True)
    nameReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    nameUrl = fields.CharField(blank=True, required=False)
    title = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        generation = Attribute(getter="generation", setter="generation", searcher=StringSearch("generation"))
        nameReference = EmbeddedAttribute(type="FHIRReference", getter="nameReference", setter="nameReference", searcher=StringSearch("nameReference"))
        nameUrl = Attribute(getter="nameUrl", setter="nameUrl", searcher=StringSearch("nameUrl"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))

class ImplementationGuideDefinitionParameter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class ImplementationGuideDefinitionResource(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    exampleBoolean = fields.BooleanField(blank=True, required=False)
    exampleCanonical = fields.CharField(blank=True, required=False)
    fhirVersion = fields.ListField(fields.CharField(), blank=True, required=False)
    groupingId = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    reference = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        exampleBoolean = Attribute(getter="exampleBoolean", setter="exampleBoolean", searcher=StringSearch("exampleBoolean"))
        exampleCanonical = Attribute(getter="exampleCanonical", setter="exampleCanonical", searcher=StringSearch("exampleCanonical"))
        fhirVersion = Attribute(getter="fhirVersion", setter="fhirVersion", searcher=StringSearch("fhirVersion"))
        groupingId = Attribute(getter="groupingId", setter="groupingId", searcher=StringSearch("groupingId"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        reference = EmbeddedAttribute(type="FHIRReference", getter="reference", setter="reference", searcher=StringSearch("reference"))

class ImplementationGuideDefinitionTemplate(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    scope = fields.CharField(blank=True, required=False)
    source = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        scope = Attribute(getter="scope", setter="scope", searcher=StringSearch("scope"))
        source = Attribute(getter="source", setter="source", searcher=StringSearch("source"))

class ImplementationGuideDependsOn(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    packageId = fields.CharField(blank=True, required=False)
    uri = fields.CharField(blank=False, required=True)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        packageId = Attribute(getter="packageId", setter="packageId", searcher=StringSearch("packageId"))
        uri = Attribute(getter="uri", setter="uri", searcher=StringSearch("uri"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ImplementationGuideGlobal(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    profile = fields.CharField(blank=False, required=True)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        profile = Attribute(getter="profile", setter="profile", searcher=StringSearch("profile"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class ImplementationGuideManifest(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    image = fields.ListField(fields.CharField(), blank=True, required=False)
    other = fields.ListField(fields.CharField(), blank=True, required=False)
    page = fields.EmbeddedDocumentListField("ImplementationGuideManifestPage", blank=True, required=False)
    rendering = fields.CharField(blank=True, required=False)
    resource = fields.EmbeddedDocumentListField("ImplementationGuideManifestResource", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        image = Attribute(getter="image", setter="image", searcher=StringSearch("image"))
        other = Attribute(getter="other", setter="other", searcher=StringSearch("other"))
        page = EmbeddedAttribute(type="ImplementationGuideManifestPage", getter="page", setter="page", searcher=StringSearch("page"))
        rendering = Attribute(getter="rendering", setter="rendering", searcher=StringSearch("rendering"))
        resource = EmbeddedAttribute(type="ImplementationGuideManifestResource", getter="resource", setter="resource", searcher=StringSearch("resource"))

class ImplementationGuideManifestPage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    anchor = fields.ListField(fields.CharField(), blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        anchor = Attribute(getter="anchor", setter="anchor", searcher=StringSearch("anchor"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))

class ImplementationGuideManifestResource(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    exampleBoolean = fields.BooleanField(blank=True, required=False)
    exampleCanonical = fields.CharField(blank=True, required=False)
    reference = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    relativePath = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        exampleBoolean = Attribute(getter="exampleBoolean", setter="exampleBoolean", searcher=StringSearch("exampleBoolean"))
        exampleCanonical = Attribute(getter="exampleCanonical", setter="exampleCanonical", searcher=StringSearch("exampleCanonical"))
        reference = EmbeddedAttribute(type="FHIRReference", getter="reference", setter="reference", searcher=StringSearch("reference"))
        relativePath = Attribute(getter="relativePath", setter="relativePath", searcher=StringSearch("relativePath"))

class InsurancePlan(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    administeredBy = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    alias = fields.ListField(fields.CharField(), blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("InsurancePlanContact", blank=True, required=False)
    coverage = fields.EmbeddedDocumentListField("InsurancePlanCoverage", blank=True, required=False)
    coverageArea = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    endpoint = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    network = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    ownedBy = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    plan = fields.EmbeddedDocumentListField("InsurancePlanPlan", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        administeredBy = EmbeddedAttribute(type="FHIRReference", getter="administeredBy", setter="administeredBy", searcher=StringSearch("administeredBy"))
        alias = Attribute(getter="alias", setter="alias", searcher=StringSearch("alias"))
        contact = EmbeddedAttribute(type="InsurancePlanContact", getter="contact", setter="contact", searcher=StringSearch("contact"))
        coverage = EmbeddedAttribute(type="InsurancePlanCoverage", getter="coverage", setter="coverage", searcher=StringSearch("coverage"))
        coverageArea = EmbeddedAttribute(type="FHIRReference", getter="coverageArea", setter="coverageArea", searcher=StringSearch("coverageArea"))
        endpoint = EmbeddedAttribute(type="FHIRReference", getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        network = EmbeddedAttribute(type="FHIRReference", getter="network", setter="network", searcher=StringSearch("network"))
        ownedBy = EmbeddedAttribute(type="FHIRReference", getter="ownedBy", setter="ownedBy", searcher=StringSearch("ownedBy"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        plan = EmbeddedAttribute(type="InsurancePlanPlan", getter="plan", setter="plan", searcher=StringSearch("plan"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class InsurancePlanContact(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    address = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    name = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    purpose = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        name = EmbeddedAttribute(type="HumanName", getter="name", setter="name", searcher=StringSearch("name"))
        purpose = EmbeddedAttribute(type="CodeableConcept", getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class InsurancePlanCoverage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    benefit = fields.EmbeddedDocumentListField("InsurancePlanCoverageBenefit", blank=False, required=True)
    network = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        benefit = EmbeddedAttribute(type="InsurancePlanCoverageBenefit", getter="benefit", setter="benefit", searcher=StringSearch("benefit"))
        network = EmbeddedAttribute(type="FHIRReference", getter="network", setter="network", searcher=StringSearch("network"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class InsurancePlanCoverageBenefit(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    limit = fields.EmbeddedDocumentListField("InsurancePlanCoverageBenefitLimit", blank=True, required=False)
    requirement = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        limit = EmbeddedAttribute(type="InsurancePlanCoverageBenefitLimit", getter="limit", setter="limit", searcher=StringSearch("limit"))
        requirement = Attribute(getter="requirement", setter="requirement", searcher=StringSearch("requirement"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class InsurancePlanCoverageBenefitLimit(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    value = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        value = EmbeddedAttribute(type="Quantity", getter="value", setter="value", searcher=StringSearch("value"))

class InsurancePlanPlan(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    coverageArea = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    generalCost = fields.EmbeddedDocumentListField("InsurancePlanPlanGeneralCost", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    network = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    specificCost = fields.EmbeddedDocumentListField("InsurancePlanPlanSpecificCost", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        coverageArea = EmbeddedAttribute(type="FHIRReference", getter="coverageArea", setter="coverageArea", searcher=StringSearch("coverageArea"))
        generalCost = EmbeddedAttribute(type="InsurancePlanPlanGeneralCost", getter="generalCost", setter="generalCost", searcher=StringSearch("generalCost"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        network = EmbeddedAttribute(type="FHIRReference", getter="network", setter="network", searcher=StringSearch("network"))
        specificCost = EmbeddedAttribute(type="InsurancePlanPlanSpecificCost", getter="specificCost", setter="specificCost", searcher=StringSearch("specificCost"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class InsurancePlanPlanGeneralCost(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    cost = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    groupSize = fields.IntegerField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        cost = EmbeddedAttribute(type="Money", getter="cost", setter="cost", searcher=StringSearch("cost"))
        groupSize = Attribute(getter="groupSize", setter="groupSize", searcher=NumericSearch("groupSize"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class InsurancePlanPlanSpecificCost(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    benefit = fields.EmbeddedDocumentListField("InsurancePlanPlanSpecificCostBenefit", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        benefit = EmbeddedAttribute(type="InsurancePlanPlanSpecificCostBenefit", getter="benefit", setter="benefit", searcher=StringSearch("benefit"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))

class InsurancePlanPlanSpecificCostBenefit(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    cost = fields.EmbeddedDocumentListField("InsurancePlanPlanSpecificCostBenefitCost", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        cost = EmbeddedAttribute(type="InsurancePlanPlanSpecificCostBenefitCost", getter="cost", setter="cost", searcher=StringSearch("cost"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class InsurancePlanPlanSpecificCostBenefitCost(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    applicability = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    qualifiers = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    value = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        applicability = EmbeddedAttribute(type="CodeableConcept", getter="applicability", setter="applicability", searcher=StringSearch("applicability"))
        qualifiers = EmbeddedAttribute(type="CodeableConcept", getter="qualifiers", setter="qualifiers", searcher=StringSearch("qualifiers"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        value = EmbeddedAttribute(type="Quantity", getter="value", setter="value", searcher=StringSearch("value"))

class Invoice(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    account = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    cancelledReason = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    issuer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    lineItem = fields.EmbeddedDocumentListField("InvoiceLineItem", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    participant = fields.EmbeddedDocumentListField("InvoiceParticipant", blank=True, required=False)
    paymentTerms = fields.CharField(blank=True, required=False)
    recipient = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    totalGross = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    totalNet = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    totalPriceComponent = fields.EmbeddedDocumentListField("InvoiceLineItemPriceComponent", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        account = EmbeddedAttribute(type="FHIRReference", getter="account", setter="account", searcher=StringSearch("account"))
        cancelledReason = Attribute(getter="cancelledReason", setter="cancelledReason", searcher=StringSearch("cancelledReason"))
        date = DateAttribute("date")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        issuer = EmbeddedAttribute(type="FHIRReference", getter="issuer", setter="issuer", searcher=StringSearch("issuer"))
        lineItem = EmbeddedAttribute(type="InvoiceLineItem", getter="lineItem", setter="lineItem", searcher=StringSearch("lineItem"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        participant = EmbeddedAttribute(type="InvoiceParticipant", getter="participant", setter="participant", searcher=StringSearch("participant"))
        paymentTerms = Attribute(getter="paymentTerms", setter="paymentTerms", searcher=StringSearch("paymentTerms"))
        recipient = EmbeddedAttribute(type="FHIRReference", getter="recipient", setter="recipient", searcher=StringSearch("recipient"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        totalGross = EmbeddedAttribute(type="Money", getter="totalGross", setter="totalGross", searcher=StringSearch("totalGross"))
        totalNet = EmbeddedAttribute(type="Money", getter="totalNet", setter="totalNet", searcher=StringSearch("totalNet"))
        totalPriceComponent = EmbeddedAttribute(type="InvoiceLineItemPriceComponent", getter="totalPriceComponent", setter="totalPriceComponent", searcher=StringSearch("totalPriceComponent"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class InvoiceLineItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    chargeItemCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    chargeItemReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    priceComponent = fields.EmbeddedDocumentListField("InvoiceLineItemPriceComponent", blank=True, required=False)
    sequence = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        chargeItemCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="chargeItemCodeableConcept", setter="chargeItemCodeableConcept", searcher=StringSearch("chargeItemCodeableConcept"))
        chargeItemReference = EmbeddedAttribute(type="FHIRReference", getter="chargeItemReference", setter="chargeItemReference", searcher=StringSearch("chargeItemReference"))
        priceComponent = EmbeddedAttribute(type="InvoiceLineItemPriceComponent", getter="priceComponent", setter="priceComponent", searcher=StringSearch("priceComponent"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))

class InvoiceLineItemPriceComponent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="Money", getter="amount", setter="amount", searcher=StringSearch("amount"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class InvoiceParticipant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = EmbeddedAttribute(type="FHIRReference", getter="actor", setter="actor", searcher=StringSearch("actor"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class Library(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    author = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    content = fields.EmbeddedDocumentListField("Attachment", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    dataRequirement = fields.EmbeddedDocumentListField("DataRequirement", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    editor = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    endorser = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    parameter = fields.EmbeddedDocumentListField("ParameterDefinition", blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    reviewer = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subjectCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subjectReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    subtitle = fields.CharField(blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    usage = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        author = EmbeddedAttribute(type="ContactDetail", getter="author", setter="author", searcher=StringSearch("author"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        content = EmbeddedAttribute(type="Attachment", getter="content", setter="content", searcher=StringSearch("content"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        dataRequirement = EmbeddedAttribute(type="DataRequirement", getter="dataRequirement", setter="dataRequirement", searcher=StringSearch("dataRequirement"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        editor = EmbeddedAttribute(type="ContactDetail", getter="editor", setter="editor", searcher=StringSearch("editor"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        endorser = EmbeddedAttribute(type="ContactDetail", getter="endorser", setter="endorser", searcher=StringSearch("endorser"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        parameter = EmbeddedAttribute(type="ParameterDefinition", getter="parameter", setter="parameter", searcher=StringSearch("parameter"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        reviewer = EmbeddedAttribute(type="ContactDetail", getter="reviewer", setter="reviewer", searcher=StringSearch("reviewer"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subjectCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="subjectCodeableConcept", setter="subjectCodeableConcept", searcher=StringSearch("subjectCodeableConcept"))
        subjectReference = EmbeddedAttribute(type="FHIRReference", getter="subjectReference", setter="subjectReference", searcher=StringSearch("subjectReference"))
        subtitle = Attribute(getter="subtitle", setter="subtitle", searcher=StringSearch("subtitle"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        usage = Attribute(getter="usage", setter="usage", searcher=StringSearch("usage"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class Linkage(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    author = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    item = fields.EmbeddedDocumentListField("LinkageItem", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        author = EmbeddedAttribute(type="FHIRReference", getter="author", setter="author", searcher=StringSearch("author"))
        item = EmbeddedAttribute(type="LinkageItem", getter="item", setter="item", searcher=StringSearch("item"))

class LinkageItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    resource = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        resource = EmbeddedAttribute(type="FHIRReference", getter="resource", setter="resource", searcher=StringSearch("resource"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class List(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    emptyReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    entry = fields.EmbeddedDocumentListField("ListEntry", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    mode = fields.CharField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    orderedBy = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    source = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        date = DateAttribute("date")
        emptyReason = EmbeddedAttribute(type="CodeableConcept", getter="emptyReason", setter="emptyReason", searcher=StringSearch("emptyReason"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        entry = EmbeddedAttribute(type="ListEntry", getter="entry", setter="entry", searcher=StringSearch("entry"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        orderedBy = EmbeddedAttribute(type="CodeableConcept", getter="orderedBy", setter="orderedBy", searcher=StringSearch("orderedBy"))
        source = EmbeddedAttribute(type="FHIRReference", getter="source", setter="source", searcher=StringSearch("source"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))

class ListEntry(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    deleted = fields.BooleanField(blank=True, required=False)
    flag = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    item = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        date = DateAttribute("date")
        deleted = Attribute(getter="deleted", setter="deleted", searcher=StringSearch("deleted"))
        flag = EmbeddedAttribute(type="CodeableConcept", getter="flag", setter="flag", searcher=StringSearch("flag"))
        item = EmbeddedAttribute(type="FHIRReference", getter="item", setter="item", searcher=StringSearch("item"))

class Location(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    address = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    alias = fields.ListField(fields.CharField(), blank=True, required=False)
    availabilityExceptions = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    endpoint = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    hoursOfOperation = fields.EmbeddedDocumentListField("LocationHoursOfOperation", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    managingOrganization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    mode = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    operationalStatus = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    partOf = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    physicalType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    position = fields.EmbeddedDocumentField("LocationPosition", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        alias = Attribute(getter="alias", setter="alias", searcher=StringSearch("alias"))
        availabilityExceptions = Attribute(getter="availabilityExceptions", setter="availabilityExceptions", searcher=StringSearch("availabilityExceptions"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        endpoint = EmbeddedAttribute(type="FHIRReference", getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        hoursOfOperation = EmbeddedAttribute(type="LocationHoursOfOperation", getter="hoursOfOperation", setter="hoursOfOperation", searcher=StringSearch("hoursOfOperation"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        managingOrganization = EmbeddedAttribute(type="FHIRReference", getter="managingOrganization", setter="managingOrganization", searcher=StringSearch("managingOrganization"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        operationalStatus = EmbeddedAttribute(type="Coding", getter="operationalStatus", setter="operationalStatus", searcher=StringSearch("operationalStatus"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        physicalType = EmbeddedAttribute(type="CodeableConcept", getter="physicalType", setter="physicalType", searcher=StringSearch("physicalType"))
        position = EmbeddedAttribute(type="LocationPosition", getter="position", setter="position", searcher=StringSearch("position"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class LocationHoursOfOperation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    allDay = fields.BooleanField(blank=True, required=False)
    closingTime = fields.DateTimeField(blank=True, required=False)
    daysOfWeek = fields.ListField(fields.CharField(), blank=True, required=False)
    openingTime = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        allDay = Attribute(getter="allDay", setter="allDay", searcher=StringSearch("allDay"))
        closingTime = DateAttribute("closingTime")
        daysOfWeek = Attribute(getter="daysOfWeek", setter="daysOfWeek", searcher=StringSearch("daysOfWeek"))
        openingTime = DateAttribute("openingTime")

class LocationPosition(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    altitude = fields.FloatField(blank=True, required=False)
    latitude = fields.FloatField(blank=False, required=True)
    longitude = fields.FloatField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        altitude = Attribute(getter="altitude", setter="altitude", searcher=NumericSearch("altitude"))
        latitude = Attribute(getter="latitude", setter="latitude", searcher=NumericSearch("latitude"))
        longitude = Attribute(getter="longitude", setter="longitude", searcher=NumericSearch("longitude"))

class MarketingStatus(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    country = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    dateRange = fields.EmbeddedDocumentField("Period", blank=False, required=True)
    jurisdiction = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    restoreDate = fields.DateTimeField(blank=True, required=False)
    status = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        country = EmbeddedAttribute(type="CodeableConcept", getter="country", setter="country", searcher=StringSearch("country"))
        dateRange = EmbeddedAttribute(type="Period", getter="dateRange", setter="dateRange", searcher=StringSearch("dateRange"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        restoreDate = DateAttribute("restoreDate")
        status = EmbeddedAttribute(type="CodeableConcept", getter="status", setter="status", searcher=StringSearch("status"))

class Measure(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    author = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    clinicalRecommendationStatement = fields.CharField(blank=True, required=False)
    compositeScoring = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    definition = fields.ListField(fields.CharField(), blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    disclaimer = fields.CharField(blank=True, required=False)
    editor = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    endorser = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    group = fields.EmbeddedDocumentListField("MeasureGroup", blank=True, required=False)
    guidance = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    improvementNotation = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    library = fields.ListField(fields.CharField(), blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    rateAggregation = fields.CharField(blank=True, required=False)
    rationale = fields.CharField(blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    reviewer = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    riskAdjustment = fields.CharField(blank=True, required=False)
    scoring = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subjectCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subjectReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    subtitle = fields.CharField(blank=True, required=False)
    supplementalData = fields.EmbeddedDocumentListField("MeasureSupplementalData", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    usage = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        author = EmbeddedAttribute(type="ContactDetail", getter="author", setter="author", searcher=StringSearch("author"))
        clinicalRecommendationStatement = Attribute(getter="clinicalRecommendationStatement", setter="clinicalRecommendationStatement", searcher=StringSearch("clinicalRecommendationStatement"))
        compositeScoring = EmbeddedAttribute(type="CodeableConcept", getter="compositeScoring", setter="compositeScoring", searcher=StringSearch("compositeScoring"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        disclaimer = Attribute(getter="disclaimer", setter="disclaimer", searcher=StringSearch("disclaimer"))
        editor = EmbeddedAttribute(type="ContactDetail", getter="editor", setter="editor", searcher=StringSearch("editor"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        endorser = EmbeddedAttribute(type="ContactDetail", getter="endorser", setter="endorser", searcher=StringSearch("endorser"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        group = EmbeddedAttribute(type="MeasureGroup", getter="group", setter="group", searcher=StringSearch("group"))
        guidance = Attribute(getter="guidance", setter="guidance", searcher=StringSearch("guidance"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        improvementNotation = EmbeddedAttribute(type="CodeableConcept", getter="improvementNotation", setter="improvementNotation", searcher=StringSearch("improvementNotation"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        library = Attribute(getter="library", setter="library", searcher=StringSearch("library"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        rateAggregation = Attribute(getter="rateAggregation", setter="rateAggregation", searcher=StringSearch("rateAggregation"))
        rationale = Attribute(getter="rationale", setter="rationale", searcher=StringSearch("rationale"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        reviewer = EmbeddedAttribute(type="ContactDetail", getter="reviewer", setter="reviewer", searcher=StringSearch("reviewer"))
        riskAdjustment = Attribute(getter="riskAdjustment", setter="riskAdjustment", searcher=StringSearch("riskAdjustment"))
        scoring = EmbeddedAttribute(type="CodeableConcept", getter="scoring", setter="scoring", searcher=StringSearch("scoring"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subjectCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="subjectCodeableConcept", setter="subjectCodeableConcept", searcher=StringSearch("subjectCodeableConcept"))
        subjectReference = EmbeddedAttribute(type="FHIRReference", getter="subjectReference", setter="subjectReference", searcher=StringSearch("subjectReference"))
        subtitle = Attribute(getter="subtitle", setter="subtitle", searcher=StringSearch("subtitle"))
        supplementalData = EmbeddedAttribute(type="MeasureSupplementalData", getter="supplementalData", setter="supplementalData", searcher=StringSearch("supplementalData"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        usage = Attribute(getter="usage", setter="usage", searcher=StringSearch("usage"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class MeasureGroup(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    population = fields.EmbeddedDocumentListField("MeasureGroupPopulation", blank=True, required=False)
    stratifier = fields.EmbeddedDocumentListField("MeasureGroupStratifier", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        population = EmbeddedAttribute(type="MeasureGroupPopulation", getter="population", setter="population", searcher=StringSearch("population"))
        stratifier = EmbeddedAttribute(type="MeasureGroupStratifier", getter="stratifier", setter="stratifier", searcher=StringSearch("stratifier"))

class MeasureGroupPopulation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    criteria = fields.EmbeddedDocumentField("Expression", blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        criteria = EmbeddedAttribute(type="Expression", getter="criteria", setter="criteria", searcher=StringSearch("criteria"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))

class MeasureGroupStratifier(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    component = fields.EmbeddedDocumentListField("MeasureGroupStratifierComponent", blank=True, required=False)
    criteria = fields.EmbeddedDocumentField("Expression", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        component = EmbeddedAttribute(type="MeasureGroupStratifierComponent", getter="component", setter="component", searcher=StringSearch("component"))
        criteria = EmbeddedAttribute(type="Expression", getter="criteria", setter="criteria", searcher=StringSearch("criteria"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))

class MeasureGroupStratifierComponent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    criteria = fields.EmbeddedDocumentField("Expression", blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        criteria = EmbeddedAttribute(type="Expression", getter="criteria", setter="criteria", searcher=StringSearch("criteria"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))

class MeasureReport(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    evaluatedResource = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    group = fields.EmbeddedDocumentListField("MeasureReportGroup", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    improvementNotation = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    measure = fields.CharField(blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=False, required=True)
    reporter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        date = DateAttribute("date")
        evaluatedResource = EmbeddedAttribute(type="FHIRReference", getter="evaluatedResource", setter="evaluatedResource", searcher=StringSearch("evaluatedResource"))
        group = EmbeddedAttribute(type="MeasureReportGroup", getter="group", setter="group", searcher=StringSearch("group"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        improvementNotation = EmbeddedAttribute(type="CodeableConcept", getter="improvementNotation", setter="improvementNotation", searcher=StringSearch("improvementNotation"))
        measure = Attribute(getter="measure", setter="measure", searcher=StringSearch("measure"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        reporter = EmbeddedAttribute(type="FHIRReference", getter="reporter", setter="reporter", searcher=StringSearch("reporter"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class MeasureReportGroup(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    measureScore = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    population = fields.EmbeddedDocumentListField("MeasureReportGroupPopulation", blank=True, required=False)
    stratifier = fields.EmbeddedDocumentListField("MeasureReportGroupStratifier", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        measureScore = EmbeddedAttribute(type="Quantity", getter="measureScore", setter="measureScore", searcher=StringSearch("measureScore"))
        population = EmbeddedAttribute(type="MeasureReportGroupPopulation", getter="population", setter="population", searcher=StringSearch("population"))
        stratifier = EmbeddedAttribute(type="MeasureReportGroupStratifier", getter="stratifier", setter="stratifier", searcher=StringSearch("stratifier"))

class MeasureReportGroupPopulation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    count = fields.IntegerField(blank=True, required=False)
    subjectResults = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        count = Attribute(getter="count", setter="count", searcher=NumericSearch("count"))
        subjectResults = EmbeddedAttribute(type="FHIRReference", getter="subjectResults", setter="subjectResults", searcher=StringSearch("subjectResults"))

class MeasureReportGroupStratifier(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    stratum = fields.EmbeddedDocumentListField("MeasureReportGroupStratifierStratum", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        stratum = EmbeddedAttribute(type="MeasureReportGroupStratifierStratum", getter="stratum", setter="stratum", searcher=StringSearch("stratum"))

class MeasureReportGroupStratifierStratum(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    component = fields.EmbeddedDocumentListField("MeasureReportGroupStratifierStratumComponent", blank=True, required=False)
    measureScore = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    population = fields.EmbeddedDocumentListField("MeasureReportGroupStratifierStratumPopulation", blank=True, required=False)
    value = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        component = EmbeddedAttribute(type="MeasureReportGroupStratifierStratumComponent", getter="component", setter="component", searcher=StringSearch("component"))
        measureScore = EmbeddedAttribute(type="Quantity", getter="measureScore", setter="measureScore", searcher=StringSearch("measureScore"))
        population = EmbeddedAttribute(type="MeasureReportGroupStratifierStratumPopulation", getter="population", setter="population", searcher=StringSearch("population"))
        value = EmbeddedAttribute(type="CodeableConcept", getter="value", setter="value", searcher=StringSearch("value"))

class MeasureReportGroupStratifierStratumComponent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    value = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        value = EmbeddedAttribute(type="CodeableConcept", getter="value", setter="value", searcher=StringSearch("value"))

class MeasureReportGroupStratifierStratumPopulation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    count = fields.IntegerField(blank=True, required=False)
    subjectResults = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        count = Attribute(getter="count", setter="count", searcher=NumericSearch("count"))
        subjectResults = EmbeddedAttribute(type="FHIRReference", getter="subjectResults", setter="subjectResults", searcher=StringSearch("subjectResults"))

class MeasureSupplementalData(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    criteria = fields.EmbeddedDocumentField("Expression", blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    usage = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        criteria = EmbeddedAttribute(type="Expression", getter="criteria", setter="criteria", searcher=StringSearch("criteria"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        usage = EmbeddedAttribute(type="CodeableConcept", getter="usage", setter="usage", searcher=StringSearch("usage"))

class Media(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    content = fields.EmbeddedDocumentField("Attachment", blank=False, required=True)
    createdDateTime = fields.DateTimeField(blank=True, required=False)
    createdPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    device = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    deviceName = fields.CharField(blank=True, required=False)
    duration = fields.FloatField(blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    frames = fields.IntegerField(blank=True, required=False)
    height = fields.IntegerField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    issued = fields.DateTimeField(blank=True, required=False)
    modality = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    operator = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    partOf = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    view = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    width = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        content = EmbeddedAttribute(type="Attachment", getter="content", setter="content", searcher=StringSearch("content"))
        createdDateTime = DateAttribute("createdDateTime")
        createdPeriod = EmbeddedAttribute(type="Period", getter="createdPeriod", setter="createdPeriod", searcher=StringSearch("createdPeriod"))
        device = EmbeddedAttribute(type="FHIRReference", getter="device", setter="device", searcher=StringSearch("device"))
        deviceName = Attribute(getter="deviceName", setter="deviceName", searcher=StringSearch("deviceName"))
        duration = Attribute(getter="duration", setter="duration", searcher=NumericSearch("duration"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        frames = Attribute(getter="frames", setter="frames", searcher=NumericSearch("frames"))
        height = Attribute(getter="height", setter="height", searcher=NumericSearch("height"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        issued = DateAttribute("issued")
        modality = EmbeddedAttribute(type="CodeableConcept", getter="modality", setter="modality", searcher=StringSearch("modality"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        operator = EmbeddedAttribute(type="FHIRReference", getter="operator", setter="operator", searcher=StringSearch("operator"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        view = EmbeddedAttribute(type="CodeableConcept", getter="view", setter="view", searcher=StringSearch("view"))
        width = Attribute(getter="width", setter="width", searcher=NumericSearch("width"))

class Medication(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    batch = fields.EmbeddedDocumentField("MedicationBatch", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    form = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    ingredient = fields.EmbeddedDocumentListField("MedicationIngredient", blank=True, required=False)
    manufacturer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        amount = EmbeddedAttribute(type="Ratio", getter="amount", setter="amount", searcher=StringSearch("amount"))
        batch = EmbeddedAttribute(type="MedicationBatch", getter="batch", setter="batch", searcher=StringSearch("batch"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        form = EmbeddedAttribute(type="CodeableConcept", getter="form", setter="form", searcher=StringSearch("form"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        ingredient = EmbeddedAttribute(type="MedicationIngredient", getter="ingredient", setter="ingredient", searcher=StringSearch("ingredient"))
        manufacturer = EmbeddedAttribute(type="FHIRReference", getter="manufacturer", setter="manufacturer", searcher=StringSearch("manufacturer"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class MedicationAdministration(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    context = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    device = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    dosage = fields.EmbeddedDocumentField("MedicationAdministrationDosage", blank=True, required=False)
    effectiveDateTime = fields.DateTimeField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    eventHistory = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    instantiates = fields.ListField(fields.CharField(), blank=True, required=False)
    medicationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    medicationReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    partOf = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    performer = fields.EmbeddedDocumentListField("MedicationAdministrationPerformer", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    request = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusReason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    supportingInformation = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        context = EmbeddedAttribute(type="FHIRReference", getter="context", setter="context", searcher=StringSearch("context"))
        device = EmbeddedAttribute(type="FHIRReference", getter="device", setter="device", searcher=StringSearch("device"))
        dosage = EmbeddedAttribute(type="MedicationAdministrationDosage", getter="dosage", setter="dosage", searcher=StringSearch("dosage"))
        effectiveDateTime = DateAttribute("effectiveDateTime")
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        eventHistory = EmbeddedAttribute(type="FHIRReference", getter="eventHistory", setter="eventHistory", searcher=StringSearch("eventHistory"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        instantiates = Attribute(getter="instantiates", setter="instantiates", searcher=StringSearch("instantiates"))
        medicationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="medicationCodeableConcept", setter="medicationCodeableConcept", searcher=StringSearch("medicationCodeableConcept"))
        medicationReference = EmbeddedAttribute(type="FHIRReference", getter="medicationReference", setter="medicationReference", searcher=StringSearch("medicationReference"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        performer = EmbeddedAttribute(type="MedicationAdministrationPerformer", getter="performer", setter="performer", searcher=StringSearch("performer"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        request = EmbeddedAttribute(type="FHIRReference", getter="request", setter="request", searcher=StringSearch("request"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusReason = EmbeddedAttribute(type="CodeableConcept", getter="statusReason", setter="statusReason", searcher=StringSearch("statusReason"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        supportingInformation = EmbeddedAttribute(type="FHIRReference", getter="supportingInformation", setter="supportingInformation", searcher=StringSearch("supportingInformation"))

class MedicationAdministrationDosage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    dose = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    method = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    rateQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    rateRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    route = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    site = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        dose = EmbeddedAttribute(type="Quantity", getter="dose", setter="dose", searcher=StringSearch("dose"))
        method = EmbeddedAttribute(type="CodeableConcept", getter="method", setter="method", searcher=StringSearch("method"))
        rateQuantity = EmbeddedAttribute(type="Quantity", getter="rateQuantity", setter="rateQuantity", searcher=StringSearch("rateQuantity"))
        rateRatio = EmbeddedAttribute(type="Ratio", getter="rateRatio", setter="rateRatio", searcher=StringSearch("rateRatio"))
        route = EmbeddedAttribute(type="CodeableConcept", getter="route", setter="route", searcher=StringSearch("route"))
        site = EmbeddedAttribute(type="CodeableConcept", getter="site", setter="site", searcher=StringSearch("site"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))

class MedicationAdministrationPerformer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    function = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = EmbeddedAttribute(type="FHIRReference", getter="actor", setter="actor", searcher=StringSearch("actor"))
        function = EmbeddedAttribute(type="CodeableConcept", getter="function", setter="function", searcher=StringSearch("function"))

class MedicationBatch(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    expirationDate = fields.DateTimeField(blank=True, required=False)
    lotNumber = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        expirationDate = DateAttribute("expirationDate")
        lotNumber = Attribute(getter="lotNumber", setter="lotNumber", searcher=StringSearch("lotNumber"))

class MedicationDispense(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authorizingPrescription = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    context = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    daysSupply = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    destination = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    detectedIssue = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    dosageInstruction = fields.EmbeddedDocumentListField("Dosage", blank=True, required=False)
    eventHistory = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    location = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    medicationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    medicationReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    partOf = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    performer = fields.EmbeddedDocumentListField("MedicationDispensePerformer", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    receiver = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusReasonCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    statusReasonReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    substitution = fields.EmbeddedDocumentField("MedicationDispenseSubstitution", blank=True, required=False)
    supportingInformation = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    whenHandedOver = fields.DateTimeField(blank=True, required=False)
    whenPrepared = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authorizingPrescription = EmbeddedAttribute(type="FHIRReference", getter="authorizingPrescription", setter="authorizingPrescription", searcher=StringSearch("authorizingPrescription"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        context = EmbeddedAttribute(type="FHIRReference", getter="context", setter="context", searcher=StringSearch("context"))
        daysSupply = EmbeddedAttribute(type="Quantity", getter="daysSupply", setter="daysSupply", searcher=StringSearch("daysSupply"))
        destination = EmbeddedAttribute(type="FHIRReference", getter="destination", setter="destination", searcher=StringSearch("destination"))
        detectedIssue = EmbeddedAttribute(type="FHIRReference", getter="detectedIssue", setter="detectedIssue", searcher=StringSearch("detectedIssue"))
        dosageInstruction = EmbeddedAttribute(type="Dosage", getter="dosageInstruction", setter="dosageInstruction", searcher=StringSearch("dosageInstruction"))
        eventHistory = EmbeddedAttribute(type="FHIRReference", getter="eventHistory", setter="eventHistory", searcher=StringSearch("eventHistory"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        location = EmbeddedAttribute(type="FHIRReference", getter="location", setter="location", searcher=StringSearch("location"))
        medicationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="medicationCodeableConcept", setter="medicationCodeableConcept", searcher=StringSearch("medicationCodeableConcept"))
        medicationReference = EmbeddedAttribute(type="FHIRReference", getter="medicationReference", setter="medicationReference", searcher=StringSearch("medicationReference"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        performer = EmbeddedAttribute(type="MedicationDispensePerformer", getter="performer", setter="performer", searcher=StringSearch("performer"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        receiver = EmbeddedAttribute(type="FHIRReference", getter="receiver", setter="receiver", searcher=StringSearch("receiver"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusReasonCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="statusReasonCodeableConcept", setter="statusReasonCodeableConcept", searcher=StringSearch("statusReasonCodeableConcept"))
        statusReasonReference = EmbeddedAttribute(type="FHIRReference", getter="statusReasonReference", setter="statusReasonReference", searcher=StringSearch("statusReasonReference"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        substitution = EmbeddedAttribute(type="MedicationDispenseSubstitution", getter="substitution", setter="substitution", searcher=StringSearch("substitution"))
        supportingInformation = EmbeddedAttribute(type="FHIRReference", getter="supportingInformation", setter="supportingInformation", searcher=StringSearch("supportingInformation"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        whenHandedOver = DateAttribute("whenHandedOver")
        whenPrepared = DateAttribute("whenPrepared")

class MedicationDispensePerformer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    function = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = EmbeddedAttribute(type="FHIRReference", getter="actor", setter="actor", searcher=StringSearch("actor"))
        function = EmbeddedAttribute(type="CodeableConcept", getter="function", setter="function", searcher=StringSearch("function"))

class MedicationDispenseSubstitution(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    reason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    responsibleParty = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    wasSubstituted = fields.BooleanField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        responsibleParty = EmbeddedAttribute(type="FHIRReference", getter="responsibleParty", setter="responsibleParty", searcher=StringSearch("responsibleParty"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        wasSubstituted = Attribute(getter="wasSubstituted", setter="wasSubstituted", searcher=StringSearch("wasSubstituted"))

class MedicationIngredient(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    isActive = fields.BooleanField(blank=True, required=False)
    itemCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    itemReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    strength = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        isActive = Attribute(getter="isActive", setter="isActive", searcher=StringSearch("isActive"))
        itemCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="itemCodeableConcept", setter="itemCodeableConcept", searcher=StringSearch("itemCodeableConcept"))
        itemReference = EmbeddedAttribute(type="FHIRReference", getter="itemReference", setter="itemReference", searcher=StringSearch("itemReference"))
        strength = EmbeddedAttribute(type="Ratio", getter="strength", setter="strength", searcher=StringSearch("strength"))

class MedicationKnowledge(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    administrationGuidelines = fields.EmbeddedDocumentListField("MedicationKnowledgeAdministrationGuidelines", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    associatedMedication = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    contraindication = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    cost = fields.EmbeddedDocumentListField("MedicationKnowledgeCost", blank=True, required=False)
    doseForm = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    drugCharacteristic = fields.EmbeddedDocumentListField("MedicationKnowledgeDrugCharacteristic", blank=True, required=False)
    ingredient = fields.EmbeddedDocumentListField("MedicationKnowledgeIngredient", blank=True, required=False)
    intendedRoute = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    kinetics = fields.EmbeddedDocumentListField("MedicationKnowledgeKinetics", blank=True, required=False)
    manufacturer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    medicineClassification = fields.EmbeddedDocumentListField("MedicationKnowledgeMedicineClassification", blank=True, required=False)
    monitoringProgram = fields.EmbeddedDocumentListField("MedicationKnowledgeMonitoringProgram", blank=True, required=False)
    monograph = fields.EmbeddedDocumentListField("MedicationKnowledgeMonograph", blank=True, required=False)
    packaging = fields.EmbeddedDocumentField("MedicationKnowledgePackaging", blank=True, required=False)
    preparationInstruction = fields.CharField(blank=True, required=False)
    productType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    regulatory = fields.EmbeddedDocumentListField("MedicationKnowledgeRegulatory", blank=True, required=False)
    relatedMedicationKnowledge = fields.EmbeddedDocumentListField("MedicationKnowledgeRelatedMedicationKnowledge", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    synonym = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        administrationGuidelines = EmbeddedAttribute(type="MedicationKnowledgeAdministrationGuidelines", getter="administrationGuidelines", setter="administrationGuidelines", searcher=StringSearch("administrationGuidelines"))
        amount = EmbeddedAttribute(type="Quantity", getter="amount", setter="amount", searcher=StringSearch("amount"))
        associatedMedication = EmbeddedAttribute(type="FHIRReference", getter="associatedMedication", setter="associatedMedication", searcher=StringSearch("associatedMedication"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        contraindication = EmbeddedAttribute(type="FHIRReference", getter="contraindication", setter="contraindication", searcher=StringSearch("contraindication"))
        cost = EmbeddedAttribute(type="MedicationKnowledgeCost", getter="cost", setter="cost", searcher=StringSearch("cost"))
        doseForm = EmbeddedAttribute(type="CodeableConcept", getter="doseForm", setter="doseForm", searcher=StringSearch("doseForm"))
        drugCharacteristic = EmbeddedAttribute(type="MedicationKnowledgeDrugCharacteristic", getter="drugCharacteristic", setter="drugCharacteristic", searcher=StringSearch("drugCharacteristic"))
        ingredient = EmbeddedAttribute(type="MedicationKnowledgeIngredient", getter="ingredient", setter="ingredient", searcher=StringSearch("ingredient"))
        intendedRoute = EmbeddedAttribute(type="CodeableConcept", getter="intendedRoute", setter="intendedRoute", searcher=StringSearch("intendedRoute"))
        kinetics = EmbeddedAttribute(type="MedicationKnowledgeKinetics", getter="kinetics", setter="kinetics", searcher=StringSearch("kinetics"))
        manufacturer = EmbeddedAttribute(type="FHIRReference", getter="manufacturer", setter="manufacturer", searcher=StringSearch("manufacturer"))
        medicineClassification = EmbeddedAttribute(type="MedicationKnowledgeMedicineClassification", getter="medicineClassification", setter="medicineClassification", searcher=StringSearch("medicineClassification"))
        monitoringProgram = EmbeddedAttribute(type="MedicationKnowledgeMonitoringProgram", getter="monitoringProgram", setter="monitoringProgram", searcher=StringSearch("monitoringProgram"))
        monograph = EmbeddedAttribute(type="MedicationKnowledgeMonograph", getter="monograph", setter="monograph", searcher=StringSearch("monograph"))
        packaging = EmbeddedAttribute(type="MedicationKnowledgePackaging", getter="packaging", setter="packaging", searcher=StringSearch("packaging"))
        preparationInstruction = Attribute(getter="preparationInstruction", setter="preparationInstruction", searcher=StringSearch("preparationInstruction"))
        productType = EmbeddedAttribute(type="CodeableConcept", getter="productType", setter="productType", searcher=StringSearch("productType"))
        regulatory = EmbeddedAttribute(type="MedicationKnowledgeRegulatory", getter="regulatory", setter="regulatory", searcher=StringSearch("regulatory"))
        relatedMedicationKnowledge = EmbeddedAttribute(type="MedicationKnowledgeRelatedMedicationKnowledge", getter="relatedMedicationKnowledge", setter="relatedMedicationKnowledge", searcher=StringSearch("relatedMedicationKnowledge"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        synonym = Attribute(getter="synonym", setter="synonym", searcher=StringSearch("synonym"))

class MedicationKnowledgeAdministrationGuidelines(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    dosage = fields.EmbeddedDocumentListField("MedicationKnowledgeAdministrationGuidelinesDosage", blank=True, required=False)
    indicationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    indicationReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    patientCharacteristics = fields.EmbeddedDocumentListField("MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        dosage = EmbeddedAttribute(type="MedicationKnowledgeAdministrationGuidelinesDosage", getter="dosage", setter="dosage", searcher=StringSearch("dosage"))
        indicationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="indicationCodeableConcept", setter="indicationCodeableConcept", searcher=StringSearch("indicationCodeableConcept"))
        indicationReference = EmbeddedAttribute(type="FHIRReference", getter="indicationReference", setter="indicationReference", searcher=StringSearch("indicationReference"))
        patientCharacteristics = EmbeddedAttribute(type="MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics", getter="patientCharacteristics", setter="patientCharacteristics", searcher=StringSearch("patientCharacteristics"))

class MedicationKnowledgeAdministrationGuidelinesDosage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    dosage = fields.EmbeddedDocumentListField("Dosage", blank=False, required=True)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        dosage = EmbeddedAttribute(type="Dosage", getter="dosage", setter="dosage", searcher=StringSearch("dosage"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    characteristicCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    characteristicQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    value = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        characteristicCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="characteristicCodeableConcept", setter="characteristicCodeableConcept", searcher=StringSearch("characteristicCodeableConcept"))
        characteristicQuantity = EmbeddedAttribute(type="Quantity", getter="characteristicQuantity", setter="characteristicQuantity", searcher=StringSearch("characteristicQuantity"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class MedicationKnowledgeCost(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    cost = fields.EmbeddedDocumentField("Money", blank=False, required=True)
    source = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        cost = EmbeddedAttribute(type="Money", getter="cost", setter="cost", searcher=StringSearch("cost"))
        source = Attribute(getter="source", setter="source", searcher=StringSearch("source"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class MedicationKnowledgeDrugCharacteristic(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueBase64Binary = fields.CharField(blank=True, required=False)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        valueBase64Binary = Attribute(getter="valueBase64Binary", setter="valueBase64Binary", searcher=StringSearch("valueBase64Binary"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))

class MedicationKnowledgeIngredient(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    isActive = fields.BooleanField(blank=True, required=False)
    itemCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    itemReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    strength = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        isActive = Attribute(getter="isActive", setter="isActive", searcher=StringSearch("isActive"))
        itemCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="itemCodeableConcept", setter="itemCodeableConcept", searcher=StringSearch("itemCodeableConcept"))
        itemReference = EmbeddedAttribute(type="FHIRReference", getter="itemReference", setter="itemReference", searcher=StringSearch("itemReference"))
        strength = EmbeddedAttribute(type="Ratio", getter="strength", setter="strength", searcher=StringSearch("strength"))

class MedicationKnowledgeKinetics(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    areaUnderCurve = fields.EmbeddedDocumentListField("Quantity", blank=True, required=False)
    halfLifePeriod = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    lethalDose50 = fields.EmbeddedDocumentListField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        areaUnderCurve = EmbeddedAttribute(type="Quantity", getter="areaUnderCurve", setter="areaUnderCurve", searcher=StringSearch("areaUnderCurve"))
        halfLifePeriod = EmbeddedAttribute(type="Duration", getter="halfLifePeriod", setter="halfLifePeriod", searcher=StringSearch("halfLifePeriod"))
        lethalDose50 = EmbeddedAttribute(type="Quantity", getter="lethalDose50", setter="lethalDose50", searcher=StringSearch("lethalDose50"))

class MedicationKnowledgeMedicineClassification(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    classification = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        classification = EmbeddedAttribute(type="CodeableConcept", getter="classification", setter="classification", searcher=StringSearch("classification"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class MedicationKnowledgeMonitoringProgram(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class MedicationKnowledgeMonograph(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    source = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        source = EmbeddedAttribute(type="FHIRReference", getter="source", setter="source", searcher=StringSearch("source"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class MedicationKnowledgePackaging(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class MedicationKnowledgeRegulatory(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    maxDispense = fields.EmbeddedDocumentField("MedicationKnowledgeRegulatoryMaxDispense", blank=True, required=False)
    regulatoryAuthority = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    schedule = fields.EmbeddedDocumentListField("MedicationKnowledgeRegulatorySchedule", blank=True, required=False)
    substitution = fields.EmbeddedDocumentListField("MedicationKnowledgeRegulatorySubstitution", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        maxDispense = EmbeddedAttribute(type="MedicationKnowledgeRegulatoryMaxDispense", getter="maxDispense", setter="maxDispense", searcher=StringSearch("maxDispense"))
        regulatoryAuthority = EmbeddedAttribute(type="FHIRReference", getter="regulatoryAuthority", setter="regulatoryAuthority", searcher=StringSearch("regulatoryAuthority"))
        schedule = EmbeddedAttribute(type="MedicationKnowledgeRegulatorySchedule", getter="schedule", setter="schedule", searcher=StringSearch("schedule"))
        substitution = EmbeddedAttribute(type="MedicationKnowledgeRegulatorySubstitution", getter="substitution", setter="substitution", searcher=StringSearch("substitution"))

class MedicationKnowledgeRegulatoryMaxDispense(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        period = EmbeddedAttribute(type="Duration", getter="period", setter="period", searcher=StringSearch("period"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))

class MedicationKnowledgeRegulatorySchedule(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    schedule = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        schedule = EmbeddedAttribute(type="CodeableConcept", getter="schedule", setter="schedule", searcher=StringSearch("schedule"))

class MedicationKnowledgeRegulatorySubstitution(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    allowed = fields.BooleanField(blank=False, required=True)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        allowed = Attribute(getter="allowed", setter="allowed", searcher=StringSearch("allowed"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class MedicationKnowledgeRelatedMedicationKnowledge(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    reference = fields.EmbeddedDocumentListField("FHIRReference", blank=False, required=True)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        reference = EmbeddedAttribute(type="FHIRReference", getter="reference", setter="reference", searcher=StringSearch("reference"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class MedicationRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    courseOfTherapyType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    detectedIssue = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    dispenseRequest = fields.EmbeddedDocumentField("MedicationRequestDispenseRequest", blank=True, required=False)
    doNotPerform = fields.BooleanField(blank=True, required=False)
    dosageInstruction = fields.EmbeddedDocumentListField("Dosage", blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    eventHistory = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    groupIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    instantiatesCanonical = fields.ListField(fields.CharField(), blank=True, required=False)
    instantiatesUri = fields.ListField(fields.CharField(), blank=True, required=False)
    insurance = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    intent = fields.CharField(blank=False, required=True)
    medicationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    medicationReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    performer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    performerType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    priorPrescription = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    recorder = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    reportedBoolean = fields.BooleanField(blank=True, required=False)
    reportedReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    requester = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    substitution = fields.EmbeddedDocumentField("MedicationRequestSubstitution", blank=True, required=False)
    supportingInformation = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authoredOn = DateAttribute("authoredOn")
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        courseOfTherapyType = EmbeddedAttribute(type="CodeableConcept", getter="courseOfTherapyType", setter="courseOfTherapyType", searcher=StringSearch("courseOfTherapyType"))
        detectedIssue = EmbeddedAttribute(type="FHIRReference", getter="detectedIssue", setter="detectedIssue", searcher=StringSearch("detectedIssue"))
        dispenseRequest = EmbeddedAttribute(type="MedicationRequestDispenseRequest", getter="dispenseRequest", setter="dispenseRequest", searcher=StringSearch("dispenseRequest"))
        doNotPerform = Attribute(getter="doNotPerform", setter="doNotPerform", searcher=StringSearch("doNotPerform"))
        dosageInstruction = EmbeddedAttribute(type="Dosage", getter="dosageInstruction", setter="dosageInstruction", searcher=StringSearch("dosageInstruction"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        eventHistory = EmbeddedAttribute(type="FHIRReference", getter="eventHistory", setter="eventHistory", searcher=StringSearch("eventHistory"))
        groupIdentifier = EmbeddedAttribute(type="Identifier", getter="groupIdentifier", setter="groupIdentifier", searcher=StringSearch("groupIdentifier"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        instantiatesCanonical = Attribute(getter="instantiatesCanonical", setter="instantiatesCanonical", searcher=StringSearch("instantiatesCanonical"))
        instantiatesUri = Attribute(getter="instantiatesUri", setter="instantiatesUri", searcher=StringSearch("instantiatesUri"))
        insurance = EmbeddedAttribute(type="FHIRReference", getter="insurance", setter="insurance", searcher=StringSearch("insurance"))
        intent = Attribute(getter="intent", setter="intent", searcher=StringSearch("intent"))
        medicationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="medicationCodeableConcept", setter="medicationCodeableConcept", searcher=StringSearch("medicationCodeableConcept"))
        medicationReference = EmbeddedAttribute(type="FHIRReference", getter="medicationReference", setter="medicationReference", searcher=StringSearch("medicationReference"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        performer = EmbeddedAttribute(type="FHIRReference", getter="performer", setter="performer", searcher=StringSearch("performer"))
        performerType = EmbeddedAttribute(type="CodeableConcept", getter="performerType", setter="performerType", searcher=StringSearch("performerType"))
        priorPrescription = EmbeddedAttribute(type="FHIRReference", getter="priorPrescription", setter="priorPrescription", searcher=StringSearch("priorPrescription"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        recorder = EmbeddedAttribute(type="FHIRReference", getter="recorder", setter="recorder", searcher=StringSearch("recorder"))
        reportedBoolean = Attribute(getter="reportedBoolean", setter="reportedBoolean", searcher=StringSearch("reportedBoolean"))
        reportedReference = EmbeddedAttribute(type="FHIRReference", getter="reportedReference", setter="reportedReference", searcher=StringSearch("reportedReference"))
        requester = EmbeddedAttribute(type="FHIRReference", getter="requester", setter="requester", searcher=StringSearch("requester"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusReason = EmbeddedAttribute(type="CodeableConcept", getter="statusReason", setter="statusReason", searcher=StringSearch("statusReason"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        substitution = EmbeddedAttribute(type="MedicationRequestSubstitution", getter="substitution", setter="substitution", searcher=StringSearch("substitution"))
        supportingInformation = EmbeddedAttribute(type="FHIRReference", getter="supportingInformation", setter="supportingInformation", searcher=StringSearch("supportingInformation"))

class MedicationRequestDispenseRequest(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    dispenseInterval = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    expectedSupplyDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    initialFill = fields.EmbeddedDocumentField("MedicationRequestDispenseRequestInitialFill", blank=True, required=False)
    numberOfRepeatsAllowed = fields.IntegerField(blank=True, required=False)
    performer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    validityPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        dispenseInterval = EmbeddedAttribute(type="Duration", getter="dispenseInterval", setter="dispenseInterval", searcher=StringSearch("dispenseInterval"))
        expectedSupplyDuration = EmbeddedAttribute(type="Duration", getter="expectedSupplyDuration", setter="expectedSupplyDuration", searcher=StringSearch("expectedSupplyDuration"))
        initialFill = EmbeddedAttribute(type="MedicationRequestDispenseRequestInitialFill", getter="initialFill", setter="initialFill", searcher=StringSearch("initialFill"))
        numberOfRepeatsAllowed = Attribute(getter="numberOfRepeatsAllowed", setter="numberOfRepeatsAllowed", searcher=NumericSearch("numberOfRepeatsAllowed"))
        performer = EmbeddedAttribute(type="FHIRReference", getter="performer", setter="performer", searcher=StringSearch("performer"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        validityPeriod = EmbeddedAttribute(type="Period", getter="validityPeriod", setter="validityPeriod", searcher=StringSearch("validityPeriod"))

class MedicationRequestDispenseRequestInitialFill(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    duration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        duration = EmbeddedAttribute(type="Duration", getter="duration", setter="duration", searcher=StringSearch("duration"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))

class MedicationRequestSubstitution(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    allowedBoolean = fields.BooleanField(blank=True, required=False)
    allowedCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    reason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        allowedBoolean = Attribute(getter="allowedBoolean", setter="allowedBoolean", searcher=StringSearch("allowedBoolean"))
        allowedCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="allowedCodeableConcept", setter="allowedCodeableConcept", searcher=StringSearch("allowedCodeableConcept"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))

class MedicationStatement(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    context = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    dateAsserted = fields.DateTimeField(blank=True, required=False)
    derivedFrom = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    dosage = fields.EmbeddedDocumentListField("Dosage", blank=True, required=False)
    effectiveDateTime = fields.DateTimeField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    informationSource = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    medicationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    medicationReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    partOf = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusReason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        context = EmbeddedAttribute(type="FHIRReference", getter="context", setter="context", searcher=StringSearch("context"))
        dateAsserted = DateAttribute("dateAsserted")
        derivedFrom = EmbeddedAttribute(type="FHIRReference", getter="derivedFrom", setter="derivedFrom", searcher=StringSearch("derivedFrom"))
        dosage = EmbeddedAttribute(type="Dosage", getter="dosage", setter="dosage", searcher=StringSearch("dosage"))
        effectiveDateTime = DateAttribute("effectiveDateTime")
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        informationSource = EmbeddedAttribute(type="FHIRReference", getter="informationSource", setter="informationSource", searcher=StringSearch("informationSource"))
        medicationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="medicationCodeableConcept", setter="medicationCodeableConcept", searcher=StringSearch("medicationCodeableConcept"))
        medicationReference = EmbeddedAttribute(type="FHIRReference", getter="medicationReference", setter="medicationReference", searcher=StringSearch("medicationReference"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusReason = EmbeddedAttribute(type="CodeableConcept", getter="statusReason", setter="statusReason", searcher=StringSearch("statusReason"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))

class MedicinalProduct(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    additionalMonitoringIndicator = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    attachedDocument = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    clinicalTrial = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    combinedPharmaceuticalDoseForm = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    crossReference = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    domain = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    legalStatusOfSupply = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    manufacturingBusinessOperation = fields.EmbeddedDocumentListField("MedicinalProductManufacturingBusinessOperation", blank=True, required=False)
    marketingStatus = fields.EmbeddedDocumentListField("MarketingStatus", blank=True, required=False)
    masterFile = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    name = fields.EmbeddedDocumentListField("MedicinalProductName", blank=False, required=True)
    packagedMedicinalProduct = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    paediatricUseIndicator = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    pharmaceuticalProduct = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    productClassification = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    specialDesignation = fields.EmbeddedDocumentListField("MedicinalProductSpecialDesignation", blank=True, required=False)
    specialMeasures = fields.ListField(fields.CharField(), blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        additionalMonitoringIndicator = EmbeddedAttribute(type="CodeableConcept", getter="additionalMonitoringIndicator", setter="additionalMonitoringIndicator", searcher=StringSearch("additionalMonitoringIndicator"))
        attachedDocument = EmbeddedAttribute(type="FHIRReference", getter="attachedDocument", setter="attachedDocument", searcher=StringSearch("attachedDocument"))
        clinicalTrial = EmbeddedAttribute(type="FHIRReference", getter="clinicalTrial", setter="clinicalTrial", searcher=StringSearch("clinicalTrial"))
        combinedPharmaceuticalDoseForm = EmbeddedAttribute(type="CodeableConcept", getter="combinedPharmaceuticalDoseForm", setter="combinedPharmaceuticalDoseForm", searcher=StringSearch("combinedPharmaceuticalDoseForm"))
        contact = EmbeddedAttribute(type="FHIRReference", getter="contact", setter="contact", searcher=StringSearch("contact"))
        crossReference = EmbeddedAttribute(type="Identifier", getter="crossReference", setter="crossReference", searcher=StringSearch("crossReference"))
        domain = EmbeddedAttribute(type="Coding", getter="domain", setter="domain", searcher=StringSearch("domain"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        legalStatusOfSupply = EmbeddedAttribute(type="CodeableConcept", getter="legalStatusOfSupply", setter="legalStatusOfSupply", searcher=StringSearch("legalStatusOfSupply"))
        manufacturingBusinessOperation = EmbeddedAttribute(type="MedicinalProductManufacturingBusinessOperation", getter="manufacturingBusinessOperation", setter="manufacturingBusinessOperation", searcher=StringSearch("manufacturingBusinessOperation"))
        marketingStatus = EmbeddedAttribute(type="MarketingStatus", getter="marketingStatus", setter="marketingStatus", searcher=StringSearch("marketingStatus"))
        masterFile = EmbeddedAttribute(type="FHIRReference", getter="masterFile", setter="masterFile", searcher=StringSearch("masterFile"))
        name = EmbeddedAttribute(type="MedicinalProductName", getter="name", setter="name", searcher=StringSearch("name"))
        packagedMedicinalProduct = EmbeddedAttribute(type="FHIRReference", getter="packagedMedicinalProduct", setter="packagedMedicinalProduct", searcher=StringSearch("packagedMedicinalProduct"))
        paediatricUseIndicator = EmbeddedAttribute(type="CodeableConcept", getter="paediatricUseIndicator", setter="paediatricUseIndicator", searcher=StringSearch("paediatricUseIndicator"))
        pharmaceuticalProduct = EmbeddedAttribute(type="FHIRReference", getter="pharmaceuticalProduct", setter="pharmaceuticalProduct", searcher=StringSearch("pharmaceuticalProduct"))
        productClassification = EmbeddedAttribute(type="CodeableConcept", getter="productClassification", setter="productClassification", searcher=StringSearch("productClassification"))
        specialDesignation = EmbeddedAttribute(type="MedicinalProductSpecialDesignation", getter="specialDesignation", setter="specialDesignation", searcher=StringSearch("specialDesignation"))
        specialMeasures = Attribute(getter="specialMeasures", setter="specialMeasures", searcher=StringSearch("specialMeasures"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class MedicinalProductAuthorization(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    country = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    dataExclusivityPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    dateOfFirstAuthorization = fields.DateTimeField(blank=True, required=False)
    holder = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    internationalBirthDate = fields.DateTimeField(blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    jurisdictionalAuthorization = fields.EmbeddedDocumentListField("MedicinalProductAuthorizationJurisdictionalAuthorization", blank=True, required=False)
    legalBasis = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    procedure = fields.EmbeddedDocumentField("MedicinalProductAuthorizationProcedure", blank=True, required=False)
    regulator = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    restoreDate = fields.DateTimeField(blank=True, required=False)
    status = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    statusDate = fields.DateTimeField(blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    validityPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        country = EmbeddedAttribute(type="CodeableConcept", getter="country", setter="country", searcher=StringSearch("country"))
        dataExclusivityPeriod = EmbeddedAttribute(type="Period", getter="dataExclusivityPeriod", setter="dataExclusivityPeriod", searcher=StringSearch("dataExclusivityPeriod"))
        dateOfFirstAuthorization = DateAttribute("dateOfFirstAuthorization")
        holder = EmbeddedAttribute(type="FHIRReference", getter="holder", setter="holder", searcher=StringSearch("holder"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        internationalBirthDate = DateAttribute("internationalBirthDate")
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        jurisdictionalAuthorization = EmbeddedAttribute(type="MedicinalProductAuthorizationJurisdictionalAuthorization", getter="jurisdictionalAuthorization", setter="jurisdictionalAuthorization", searcher=StringSearch("jurisdictionalAuthorization"))
        legalBasis = EmbeddedAttribute(type="CodeableConcept", getter="legalBasis", setter="legalBasis", searcher=StringSearch("legalBasis"))
        procedure = EmbeddedAttribute(type="MedicinalProductAuthorizationProcedure", getter="procedure", setter="procedure", searcher=StringSearch("procedure"))
        regulator = EmbeddedAttribute(type="FHIRReference", getter="regulator", setter="regulator", searcher=StringSearch("regulator"))
        restoreDate = DateAttribute("restoreDate")
        status = EmbeddedAttribute(type="CodeableConcept", getter="status", setter="status", searcher=StringSearch("status"))
        statusDate = DateAttribute("statusDate")
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        validityPeriod = EmbeddedAttribute(type="Period", getter="validityPeriod", setter="validityPeriod", searcher=StringSearch("validityPeriod"))

class MedicinalProductAuthorizationJurisdictionalAuthorization(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    country = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    legalStatusOfSupply = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    validityPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        country = EmbeddedAttribute(type="CodeableConcept", getter="country", setter="country", searcher=StringSearch("country"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        legalStatusOfSupply = EmbeddedAttribute(type="CodeableConcept", getter="legalStatusOfSupply", setter="legalStatusOfSupply", searcher=StringSearch("legalStatusOfSupply"))
        validityPeriod = EmbeddedAttribute(type="Period", getter="validityPeriod", setter="validityPeriod", searcher=StringSearch("validityPeriod"))

class MedicinalProductAuthorizationProcedure(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    dateDateTime = fields.DateTimeField(blank=True, required=False)
    datePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        dateDateTime = DateAttribute("dateDateTime")
        datePeriod = EmbeddedAttribute(type="Period", getter="datePeriod", setter="datePeriod", searcher=StringSearch("datePeriod"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class MedicinalProductContraindication(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    comorbidity = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    disease = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    diseaseStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    otherTherapy = fields.EmbeddedDocumentListField("MedicinalProductContraindicationOtherTherapy", blank=True, required=False)
    population = fields.EmbeddedDocumentListField("Population", blank=True, required=False)
    subject = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    therapeuticIndication = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        comorbidity = EmbeddedAttribute(type="CodeableConcept", getter="comorbidity", setter="comorbidity", searcher=StringSearch("comorbidity"))
        disease = EmbeddedAttribute(type="CodeableConcept", getter="disease", setter="disease", searcher=StringSearch("disease"))
        diseaseStatus = EmbeddedAttribute(type="CodeableConcept", getter="diseaseStatus", setter="diseaseStatus", searcher=StringSearch("diseaseStatus"))
        otherTherapy = EmbeddedAttribute(type="MedicinalProductContraindicationOtherTherapy", getter="otherTherapy", setter="otherTherapy", searcher=StringSearch("otherTherapy"))
        population = EmbeddedAttribute(type="Population", getter="population", setter="population", searcher=StringSearch("population"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        therapeuticIndication = EmbeddedAttribute(type="FHIRReference", getter="therapeuticIndication", setter="therapeuticIndication", searcher=StringSearch("therapeuticIndication"))

class MedicinalProductContraindicationOtherTherapy(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    medicationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    medicationReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    therapyRelationshipType = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        medicationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="medicationCodeableConcept", setter="medicationCodeableConcept", searcher=StringSearch("medicationCodeableConcept"))
        medicationReference = EmbeddedAttribute(type="FHIRReference", getter="medicationReference", setter="medicationReference", searcher=StringSearch("medicationReference"))
        therapyRelationshipType = EmbeddedAttribute(type="CodeableConcept", getter="therapyRelationshipType", setter="therapyRelationshipType", searcher=StringSearch("therapyRelationshipType"))

class MedicinalProductIndication(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    comorbidity = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    diseaseStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    diseaseSymptomProcedure = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    duration = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    intendedEffect = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    otherTherapy = fields.EmbeddedDocumentListField("MedicinalProductIndicationOtherTherapy", blank=True, required=False)
    population = fields.EmbeddedDocumentListField("Population", blank=True, required=False)
    subject = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    undesirableEffect = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        comorbidity = EmbeddedAttribute(type="CodeableConcept", getter="comorbidity", setter="comorbidity", searcher=StringSearch("comorbidity"))
        diseaseStatus = EmbeddedAttribute(type="CodeableConcept", getter="diseaseStatus", setter="diseaseStatus", searcher=StringSearch("diseaseStatus"))
        diseaseSymptomProcedure = EmbeddedAttribute(type="CodeableConcept", getter="diseaseSymptomProcedure", setter="diseaseSymptomProcedure", searcher=StringSearch("diseaseSymptomProcedure"))
        duration = EmbeddedAttribute(type="Quantity", getter="duration", setter="duration", searcher=StringSearch("duration"))
        intendedEffect = EmbeddedAttribute(type="CodeableConcept", getter="intendedEffect", setter="intendedEffect", searcher=StringSearch("intendedEffect"))
        otherTherapy = EmbeddedAttribute(type="MedicinalProductIndicationOtherTherapy", getter="otherTherapy", setter="otherTherapy", searcher=StringSearch("otherTherapy"))
        population = EmbeddedAttribute(type="Population", getter="population", setter="population", searcher=StringSearch("population"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        undesirableEffect = EmbeddedAttribute(type="FHIRReference", getter="undesirableEffect", setter="undesirableEffect", searcher=StringSearch("undesirableEffect"))

class MedicinalProductIndicationOtherTherapy(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    medicationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    medicationReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    therapyRelationshipType = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        medicationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="medicationCodeableConcept", setter="medicationCodeableConcept", searcher=StringSearch("medicationCodeableConcept"))
        medicationReference = EmbeddedAttribute(type="FHIRReference", getter="medicationReference", setter="medicationReference", searcher=StringSearch("medicationReference"))
        therapyRelationshipType = EmbeddedAttribute(type="CodeableConcept", getter="therapyRelationshipType", setter="therapyRelationshipType", searcher=StringSearch("therapyRelationshipType"))

class MedicinalProductIngredient(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    allergenicIndicator = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    manufacturer = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    specifiedSubstance = fields.EmbeddedDocumentListField("MedicinalProductIngredientSpecifiedSubstance", blank=True, required=False)
    substance = fields.EmbeddedDocumentField("MedicinalProductIngredientSubstance", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        allergenicIndicator = Attribute(getter="allergenicIndicator", setter="allergenicIndicator", searcher=StringSearch("allergenicIndicator"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        manufacturer = EmbeddedAttribute(type="FHIRReference", getter="manufacturer", setter="manufacturer", searcher=StringSearch("manufacturer"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))
        specifiedSubstance = EmbeddedAttribute(type="MedicinalProductIngredientSpecifiedSubstance", getter="specifiedSubstance", setter="specifiedSubstance", searcher=StringSearch("specifiedSubstance"))
        substance = EmbeddedAttribute(type="MedicinalProductIngredientSubstance", getter="substance", setter="substance", searcher=StringSearch("substance"))

class MedicinalProductIngredientSpecifiedSubstance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    confidentiality = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    group = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    strength = fields.EmbeddedDocumentListField("MedicinalProductIngredientSpecifiedSubstanceStrength", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        confidentiality = EmbeddedAttribute(type="CodeableConcept", getter="confidentiality", setter="confidentiality", searcher=StringSearch("confidentiality"))
        group = EmbeddedAttribute(type="CodeableConcept", getter="group", setter="group", searcher=StringSearch("group"))
        strength = EmbeddedAttribute(type="MedicinalProductIngredientSpecifiedSubstanceStrength", getter="strength", setter="strength", searcher=StringSearch("strength"))

class MedicinalProductIngredientSpecifiedSubstanceStrength(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    concentration = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    concentrationLowLimit = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    country = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    measurementPoint = fields.CharField(blank=True, required=False)
    presentation = fields.EmbeddedDocumentField("Ratio", blank=False, required=True)
    presentationLowLimit = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    referenceStrength = fields.EmbeddedDocumentListField("MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        concentration = EmbeddedAttribute(type="Ratio", getter="concentration", setter="concentration", searcher=StringSearch("concentration"))
        concentrationLowLimit = EmbeddedAttribute(type="Ratio", getter="concentrationLowLimit", setter="concentrationLowLimit", searcher=StringSearch("concentrationLowLimit"))
        country = EmbeddedAttribute(type="CodeableConcept", getter="country", setter="country", searcher=StringSearch("country"))
        measurementPoint = Attribute(getter="measurementPoint", setter="measurementPoint", searcher=StringSearch("measurementPoint"))
        presentation = EmbeddedAttribute(type="Ratio", getter="presentation", setter="presentation", searcher=StringSearch("presentation"))
        presentationLowLimit = EmbeddedAttribute(type="Ratio", getter="presentationLowLimit", setter="presentationLowLimit", searcher=StringSearch("presentationLowLimit"))
        referenceStrength = EmbeddedAttribute(type="MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength", getter="referenceStrength", setter="referenceStrength", searcher=StringSearch("referenceStrength"))

class MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    country = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    measurementPoint = fields.CharField(blank=True, required=False)
    strength = fields.EmbeddedDocumentField("Ratio", blank=False, required=True)
    strengthLowLimit = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    substance = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        country = EmbeddedAttribute(type="CodeableConcept", getter="country", setter="country", searcher=StringSearch("country"))
        measurementPoint = Attribute(getter="measurementPoint", setter="measurementPoint", searcher=StringSearch("measurementPoint"))
        strength = EmbeddedAttribute(type="Ratio", getter="strength", setter="strength", searcher=StringSearch("strength"))
        strengthLowLimit = EmbeddedAttribute(type="Ratio", getter="strengthLowLimit", setter="strengthLowLimit", searcher=StringSearch("strengthLowLimit"))
        substance = EmbeddedAttribute(type="CodeableConcept", getter="substance", setter="substance", searcher=StringSearch("substance"))

class MedicinalProductIngredientSubstance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    strength = fields.EmbeddedDocumentListField("MedicinalProductIngredientSpecifiedSubstanceStrength", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        strength = EmbeddedAttribute(type="MedicinalProductIngredientSpecifiedSubstanceStrength", getter="strength", setter="strength", searcher=StringSearch("strength"))

class MedicinalProductInteraction(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    effect = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    incidence = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    interactant = fields.EmbeddedDocumentListField("MedicinalProductInteractionInteractant", blank=True, required=False)
    management = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subject = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        effect = EmbeddedAttribute(type="CodeableConcept", getter="effect", setter="effect", searcher=StringSearch("effect"))
        incidence = EmbeddedAttribute(type="CodeableConcept", getter="incidence", setter="incidence", searcher=StringSearch("incidence"))
        interactant = EmbeddedAttribute(type="MedicinalProductInteractionInteractant", getter="interactant", setter="interactant", searcher=StringSearch("interactant"))
        management = EmbeddedAttribute(type="CodeableConcept", getter="management", setter="management", searcher=StringSearch("management"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class MedicinalProductInteractionInteractant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    itemCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    itemReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        itemCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="itemCodeableConcept", setter="itemCodeableConcept", searcher=StringSearch("itemCodeableConcept"))
        itemReference = EmbeddedAttribute(type="FHIRReference", getter="itemReference", setter="itemReference", searcher=StringSearch("itemReference"))

class MedicinalProductManufactured(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    ingredient = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    manufacturedDoseForm = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    manufacturer = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    otherCharacteristics = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    physicalCharacteristics = fields.EmbeddedDocumentField("ProdCharacteristic", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=False, required=True)
    unitOfPresentation = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        ingredient = EmbeddedAttribute(type="FHIRReference", getter="ingredient", setter="ingredient", searcher=StringSearch("ingredient"))
        manufacturedDoseForm = EmbeddedAttribute(type="CodeableConcept", getter="manufacturedDoseForm", setter="manufacturedDoseForm", searcher=StringSearch("manufacturedDoseForm"))
        manufacturer = EmbeddedAttribute(type="FHIRReference", getter="manufacturer", setter="manufacturer", searcher=StringSearch("manufacturer"))
        otherCharacteristics = EmbeddedAttribute(type="CodeableConcept", getter="otherCharacteristics", setter="otherCharacteristics", searcher=StringSearch("otherCharacteristics"))
        physicalCharacteristics = EmbeddedAttribute(type="ProdCharacteristic", getter="physicalCharacteristics", setter="physicalCharacteristics", searcher=StringSearch("physicalCharacteristics"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        unitOfPresentation = EmbeddedAttribute(type="CodeableConcept", getter="unitOfPresentation", setter="unitOfPresentation", searcher=StringSearch("unitOfPresentation"))

class MedicinalProductManufacturingBusinessOperation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    authorisationReferenceNumber = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    confidentialityIndicator = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    effectiveDate = fields.DateTimeField(blank=True, required=False)
    manufacturer = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    operationType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    regulator = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        authorisationReferenceNumber = EmbeddedAttribute(type="Identifier", getter="authorisationReferenceNumber", setter="authorisationReferenceNumber", searcher=StringSearch("authorisationReferenceNumber"))
        confidentialityIndicator = EmbeddedAttribute(type="CodeableConcept", getter="confidentialityIndicator", setter="confidentialityIndicator", searcher=StringSearch("confidentialityIndicator"))
        effectiveDate = DateAttribute("effectiveDate")
        manufacturer = EmbeddedAttribute(type="FHIRReference", getter="manufacturer", setter="manufacturer", searcher=StringSearch("manufacturer"))
        operationType = EmbeddedAttribute(type="CodeableConcept", getter="operationType", setter="operationType", searcher=StringSearch("operationType"))
        regulator = EmbeddedAttribute(type="FHIRReference", getter="regulator", setter="regulator", searcher=StringSearch("regulator"))

class MedicinalProductName(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    countryLanguage = fields.EmbeddedDocumentListField("MedicinalProductNameCountryLanguage", blank=True, required=False)
    namePart = fields.EmbeddedDocumentListField("MedicinalProductNameNamePart", blank=True, required=False)
    productName = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        countryLanguage = EmbeddedAttribute(type="MedicinalProductNameCountryLanguage", getter="countryLanguage", setter="countryLanguage", searcher=StringSearch("countryLanguage"))
        namePart = EmbeddedAttribute(type="MedicinalProductNameNamePart", getter="namePart", setter="namePart", searcher=StringSearch("namePart"))
        productName = Attribute(getter="productName", setter="productName", searcher=StringSearch("productName"))

class MedicinalProductNameCountryLanguage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    country = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    jurisdiction = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    language = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        country = EmbeddedAttribute(type="CodeableConcept", getter="country", setter="country", searcher=StringSearch("country"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        language = EmbeddedAttribute(type="CodeableConcept", getter="language", setter="language", searcher=StringSearch("language"))

class MedicinalProductNameNamePart(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    part = fields.CharField(blank=False, required=True)
    type = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        part = Attribute(getter="part", setter="part", searcher=StringSearch("part"))
        type = EmbeddedAttribute(type="Coding", getter="type", setter="type", searcher=StringSearch("type"))

class MedicinalProductPackaged(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    batchIdentifier = fields.EmbeddedDocumentListField("MedicinalProductPackagedBatchIdentifier", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    legalStatusOfSupply = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    manufacturer = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    marketingAuthorization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    marketingStatus = fields.EmbeddedDocumentListField("MarketingStatus", blank=True, required=False)
    packageItem = fields.EmbeddedDocumentListField("MedicinalProductPackagedPackageItem", blank=False, required=True)
    subject = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        batchIdentifier = EmbeddedAttribute(type="MedicinalProductPackagedBatchIdentifier", getter="batchIdentifier", setter="batchIdentifier", searcher=StringSearch("batchIdentifier"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        legalStatusOfSupply = EmbeddedAttribute(type="CodeableConcept", getter="legalStatusOfSupply", setter="legalStatusOfSupply", searcher=StringSearch("legalStatusOfSupply"))
        manufacturer = EmbeddedAttribute(type="FHIRReference", getter="manufacturer", setter="manufacturer", searcher=StringSearch("manufacturer"))
        marketingAuthorization = EmbeddedAttribute(type="FHIRReference", getter="marketingAuthorization", setter="marketingAuthorization", searcher=StringSearch("marketingAuthorization"))
        marketingStatus = EmbeddedAttribute(type="MarketingStatus", getter="marketingStatus", setter="marketingStatus", searcher=StringSearch("marketingStatus"))
        packageItem = EmbeddedAttribute(type="MedicinalProductPackagedPackageItem", getter="packageItem", setter="packageItem", searcher=StringSearch("packageItem"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))

class MedicinalProductPackagedBatchIdentifier(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    immediatePackaging = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    outerPackaging = fields.EmbeddedDocumentField("Identifier", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        immediatePackaging = EmbeddedAttribute(type="Identifier", getter="immediatePackaging", setter="immediatePackaging", searcher=StringSearch("immediatePackaging"))
        outerPackaging = EmbeddedAttribute(type="Identifier", getter="outerPackaging", setter="outerPackaging", searcher=StringSearch("outerPackaging"))

class MedicinalProductPackagedPackageItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    alternateMaterial = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    device = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    manufacturedItem = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    manufacturer = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    material = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    otherCharacteristics = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    physicalCharacteristics = fields.EmbeddedDocumentField("ProdCharacteristic", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=False, required=True)
    shelfLifeStorage = fields.EmbeddedDocumentListField("ProductShelfLife", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        alternateMaterial = EmbeddedAttribute(type="CodeableConcept", getter="alternateMaterial", setter="alternateMaterial", searcher=StringSearch("alternateMaterial"))
        device = EmbeddedAttribute(type="FHIRReference", getter="device", setter="device", searcher=StringSearch("device"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        manufacturedItem = EmbeddedAttribute(type="FHIRReference", getter="manufacturedItem", setter="manufacturedItem", searcher=StringSearch("manufacturedItem"))
        manufacturer = EmbeddedAttribute(type="FHIRReference", getter="manufacturer", setter="manufacturer", searcher=StringSearch("manufacturer"))
        material = EmbeddedAttribute(type="CodeableConcept", getter="material", setter="material", searcher=StringSearch("material"))
        otherCharacteristics = EmbeddedAttribute(type="CodeableConcept", getter="otherCharacteristics", setter="otherCharacteristics", searcher=StringSearch("otherCharacteristics"))
        physicalCharacteristics = EmbeddedAttribute(type="ProdCharacteristic", getter="physicalCharacteristics", setter="physicalCharacteristics", searcher=StringSearch("physicalCharacteristics"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        shelfLifeStorage = EmbeddedAttribute(type="ProductShelfLife", getter="shelfLifeStorage", setter="shelfLifeStorage", searcher=StringSearch("shelfLifeStorage"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class MedicinalProductPharmaceutical(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    administrableDoseForm = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    characteristics = fields.EmbeddedDocumentListField("MedicinalProductPharmaceuticalCharacteristics", blank=True, required=False)
    device = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    ingredient = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    routeOfAdministration = fields.EmbeddedDocumentListField("MedicinalProductPharmaceuticalRouteOfAdministration", blank=False, required=True)
    unitOfPresentation = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        administrableDoseForm = EmbeddedAttribute(type="CodeableConcept", getter="administrableDoseForm", setter="administrableDoseForm", searcher=StringSearch("administrableDoseForm"))
        characteristics = EmbeddedAttribute(type="MedicinalProductPharmaceuticalCharacteristics", getter="characteristics", setter="characteristics", searcher=StringSearch("characteristics"))
        device = EmbeddedAttribute(type="FHIRReference", getter="device", setter="device", searcher=StringSearch("device"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        ingredient = EmbeddedAttribute(type="FHIRReference", getter="ingredient", setter="ingredient", searcher=StringSearch("ingredient"))
        routeOfAdministration = EmbeddedAttribute(type="MedicinalProductPharmaceuticalRouteOfAdministration", getter="routeOfAdministration", setter="routeOfAdministration", searcher=StringSearch("routeOfAdministration"))
        unitOfPresentation = EmbeddedAttribute(type="CodeableConcept", getter="unitOfPresentation", setter="unitOfPresentation", searcher=StringSearch("unitOfPresentation"))

class MedicinalProductPharmaceuticalCharacteristics(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    status = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        status = EmbeddedAttribute(type="CodeableConcept", getter="status", setter="status", searcher=StringSearch("status"))

class MedicinalProductPharmaceuticalRouteOfAdministration(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    firstDose = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    maxDosePerDay = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    maxDosePerTreatmentPeriod = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    maxSingleDose = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    maxTreatmentPeriod = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    targetSpecies = fields.EmbeddedDocumentListField("MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        firstDose = EmbeddedAttribute(type="Quantity", getter="firstDose", setter="firstDose", searcher=StringSearch("firstDose"))
        maxDosePerDay = EmbeddedAttribute(type="Quantity", getter="maxDosePerDay", setter="maxDosePerDay", searcher=StringSearch("maxDosePerDay"))
        maxDosePerTreatmentPeriod = EmbeddedAttribute(type="Ratio", getter="maxDosePerTreatmentPeriod", setter="maxDosePerTreatmentPeriod", searcher=StringSearch("maxDosePerTreatmentPeriod"))
        maxSingleDose = EmbeddedAttribute(type="Quantity", getter="maxSingleDose", setter="maxSingleDose", searcher=StringSearch("maxSingleDose"))
        maxTreatmentPeriod = EmbeddedAttribute(type="Duration", getter="maxTreatmentPeriod", setter="maxTreatmentPeriod", searcher=StringSearch("maxTreatmentPeriod"))
        targetSpecies = EmbeddedAttribute(type="MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies", getter="targetSpecies", setter="targetSpecies", searcher=StringSearch("targetSpecies"))

class MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    withdrawalPeriod = fields.EmbeddedDocumentListField("MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        withdrawalPeriod = EmbeddedAttribute(type="MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod", getter="withdrawalPeriod", setter="withdrawalPeriod", searcher=StringSearch("withdrawalPeriod"))

class MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    supportingInformation = fields.CharField(blank=True, required=False)
    tissue = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    value = fields.EmbeddedDocumentField("Quantity", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        supportingInformation = Attribute(getter="supportingInformation", setter="supportingInformation", searcher=StringSearch("supportingInformation"))
        tissue = EmbeddedAttribute(type="CodeableConcept", getter="tissue", setter="tissue", searcher=StringSearch("tissue"))
        value = EmbeddedAttribute(type="Quantity", getter="value", setter="value", searcher=StringSearch("value"))

class MedicinalProductSpecialDesignation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    indicationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    indicationReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    intendedUse = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    species = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    status = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        date = DateAttribute("date")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        indicationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="indicationCodeableConcept", setter="indicationCodeableConcept", searcher=StringSearch("indicationCodeableConcept"))
        indicationReference = EmbeddedAttribute(type="FHIRReference", getter="indicationReference", setter="indicationReference", searcher=StringSearch("indicationReference"))
        intendedUse = EmbeddedAttribute(type="CodeableConcept", getter="intendedUse", setter="intendedUse", searcher=StringSearch("intendedUse"))
        species = EmbeddedAttribute(type="CodeableConcept", getter="species", setter="species", searcher=StringSearch("species"))
        status = EmbeddedAttribute(type="CodeableConcept", getter="status", setter="status", searcher=StringSearch("status"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class MedicinalProductUndesirableEffect(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    classification = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    frequencyOfOccurrence = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    population = fields.EmbeddedDocumentListField("Population", blank=True, required=False)
    subject = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    symptomConditionEffect = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        classification = EmbeddedAttribute(type="CodeableConcept", getter="classification", setter="classification", searcher=StringSearch("classification"))
        frequencyOfOccurrence = EmbeddedAttribute(type="CodeableConcept", getter="frequencyOfOccurrence", setter="frequencyOfOccurrence", searcher=StringSearch("frequencyOfOccurrence"))
        population = EmbeddedAttribute(type="Population", getter="population", setter="population", searcher=StringSearch("population"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        symptomConditionEffect = EmbeddedAttribute(type="CodeableConcept", getter="symptomConditionEffect", setter="symptomConditionEffect", searcher=StringSearch("symptomConditionEffect"))

class MessageDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    allowedResponse = fields.EmbeddedDocumentListField("MessageDefinitionAllowedResponse", blank=True, required=False)
    base = fields.CharField(blank=True, required=False)
    category = fields.CharField(blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    eventCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    eventUri = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    focus = fields.EmbeddedDocumentListField("MessageDefinitionFocus", blank=True, required=False)
    graph = fields.ListField(fields.CharField(), blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    parent = fields.ListField(fields.CharField(), blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    replaces = fields.ListField(fields.CharField(), blank=True, required=False)
    responseRequired = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        allowedResponse = EmbeddedAttribute(type="MessageDefinitionAllowedResponse", getter="allowedResponse", setter="allowedResponse", searcher=StringSearch("allowedResponse"))
        base = Attribute(getter="base", setter="base", searcher=StringSearch("base"))
        category = Attribute(getter="category", setter="category", searcher=StringSearch("category"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        eventCoding = EmbeddedAttribute(type="Coding", getter="eventCoding", setter="eventCoding", searcher=StringSearch("eventCoding"))
        eventUri = Attribute(getter="eventUri", setter="eventUri", searcher=StringSearch("eventUri"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        focus = EmbeddedAttribute(type="MessageDefinitionFocus", getter="focus", setter="focus", searcher=StringSearch("focus"))
        graph = Attribute(getter="graph", setter="graph", searcher=StringSearch("graph"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        parent = Attribute(getter="parent", setter="parent", searcher=StringSearch("parent"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        replaces = Attribute(getter="replaces", setter="replaces", searcher=StringSearch("replaces"))
        responseRequired = Attribute(getter="responseRequired", setter="responseRequired", searcher=StringSearch("responseRequired"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class MessageDefinitionAllowedResponse(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    message = fields.CharField(blank=False, required=True)
    situation = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        message = Attribute(getter="message", setter="message", searcher=StringSearch("message"))
        situation = Attribute(getter="situation", setter="situation", searcher=StringSearch("situation"))

class MessageDefinitionFocus(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    max = fields.CharField(blank=True, required=False)
    min = fields.IntegerField(blank=False, required=True)
    profile = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        max = Attribute(getter="max", setter="max", searcher=StringSearch("max"))
        min = Attribute(getter="min", setter="min", searcher=NumericSearch("min"))
        profile = Attribute(getter="profile", setter="profile", searcher=StringSearch("profile"))

class MessageHeader(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    author = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    definition = fields.CharField(blank=True, required=False)
    destination = fields.EmbeddedDocumentListField("MessageHeaderDestination", blank=True, required=False)
    enterer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    eventCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    eventUri = fields.CharField(blank=True, required=False)
    focus = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    reason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    response = fields.EmbeddedDocumentField("MessageHeaderResponse", blank=True, required=False)
    responsible = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    sender = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    source = fields.EmbeddedDocumentField("MessageHeaderSource", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        author = EmbeddedAttribute(type="FHIRReference", getter="author", setter="author", searcher=StringSearch("author"))
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        destination = EmbeddedAttribute(type="MessageHeaderDestination", getter="destination", setter="destination", searcher=StringSearch("destination"))
        enterer = EmbeddedAttribute(type="FHIRReference", getter="enterer", setter="enterer", searcher=StringSearch("enterer"))
        eventCoding = EmbeddedAttribute(type="Coding", getter="eventCoding", setter="eventCoding", searcher=StringSearch("eventCoding"))
        eventUri = Attribute(getter="eventUri", setter="eventUri", searcher=StringSearch("eventUri"))
        focus = EmbeddedAttribute(type="FHIRReference", getter="focus", setter="focus", searcher=StringSearch("focus"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        response = EmbeddedAttribute(type="MessageHeaderResponse", getter="response", setter="response", searcher=StringSearch("response"))
        responsible = EmbeddedAttribute(type="FHIRReference", getter="responsible", setter="responsible", searcher=StringSearch("responsible"))
        sender = EmbeddedAttribute(type="FHIRReference", getter="sender", setter="sender", searcher=StringSearch("sender"))
        source = EmbeddedAttribute(type="MessageHeaderSource", getter="source", setter="source", searcher=StringSearch("source"))

class MessageHeaderDestination(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    endpoint = fields.CharField(blank=False, required=True)
    name = fields.CharField(blank=True, required=False)
    receiver = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    target = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        endpoint = Attribute(getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        receiver = EmbeddedAttribute(type="FHIRReference", getter="receiver", setter="receiver", searcher=StringSearch("receiver"))
        target = EmbeddedAttribute(type="FHIRReference", getter="target", setter="target", searcher=StringSearch("target"))

class MessageHeaderResponse(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    details = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        details = EmbeddedAttribute(type="FHIRReference", getter="details", setter="details", searcher=StringSearch("details"))
        identifier = Attribute(getter="identifier", setter="identifier", searcher=StringSearch("identifier"))

class MessageHeaderSource(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    contact = fields.EmbeddedDocumentField("ContactPoint", blank=True, required=False)
    endpoint = fields.CharField(blank=False, required=True)
    name = fields.CharField(blank=True, required=False)
    software = fields.CharField(blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        contact = EmbeddedAttribute(type="ContactPoint", getter="contact", setter="contact", searcher=StringSearch("contact"))
        endpoint = Attribute(getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        software = Attribute(getter="software", setter="software", searcher=StringSearch("software"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class Meta(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    lastUpdated = fields.DateTimeField(blank=True, required=False)
    profile = fields.ListField(fields.CharField(), blank=True, required=False)
    security = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    source = fields.CharField(blank=True, required=False)
    tag = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    versionId = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        lastUpdated = DateAttribute("lastUpdated")
        profile = Attribute(getter="profile", setter="profile", searcher=StringSearch("profile"))
        security = EmbeddedAttribute(type="Coding", getter="security", setter="security", searcher=StringSearch("security"))
        source = Attribute(getter="source", setter="source", searcher=StringSearch("source"))
        tag = EmbeddedAttribute(type="Coding", getter="tag", setter="tag", searcher=StringSearch("tag"))
        versionId = Attribute(getter="versionId", setter="versionId", searcher=StringSearch("versionId"))

class MetadataResource(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class MolecularSequence(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    coordinateSystem = fields.IntegerField(blank=False, required=True)
    device = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    observedSeq = fields.CharField(blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    performer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    pointer = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    quality = fields.EmbeddedDocumentListField("MolecularSequenceQuality", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    readCoverage = fields.IntegerField(blank=True, required=False)
    referenceSeq = fields.EmbeddedDocumentField("MolecularSequenceReferenceSeq", blank=True, required=False)
    repository = fields.EmbeddedDocumentListField("MolecularSequenceRepository", blank=True, required=False)
    specimen = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    structureVariant = fields.EmbeddedDocumentListField("MolecularSequenceStructureVariant", blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    variant = fields.EmbeddedDocumentListField("MolecularSequenceVariant", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        coordinateSystem = Attribute(getter="coordinateSystem", setter="coordinateSystem", searcher=NumericSearch("coordinateSystem"))
        device = EmbeddedAttribute(type="FHIRReference", getter="device", setter="device", searcher=StringSearch("device"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        observedSeq = Attribute(getter="observedSeq", setter="observedSeq", searcher=StringSearch("observedSeq"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        performer = EmbeddedAttribute(type="FHIRReference", getter="performer", setter="performer", searcher=StringSearch("performer"))
        pointer = EmbeddedAttribute(type="FHIRReference", getter="pointer", setter="pointer", searcher=StringSearch("pointer"))
        quality = EmbeddedAttribute(type="MolecularSequenceQuality", getter="quality", setter="quality", searcher=StringSearch("quality"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        readCoverage = Attribute(getter="readCoverage", setter="readCoverage", searcher=NumericSearch("readCoverage"))
        referenceSeq = EmbeddedAttribute(type="MolecularSequenceReferenceSeq", getter="referenceSeq", setter="referenceSeq", searcher=StringSearch("referenceSeq"))
        repository = EmbeddedAttribute(type="MolecularSequenceRepository", getter="repository", setter="repository", searcher=StringSearch("repository"))
        specimen = EmbeddedAttribute(type="FHIRReference", getter="specimen", setter="specimen", searcher=StringSearch("specimen"))
        structureVariant = EmbeddedAttribute(type="MolecularSequenceStructureVariant", getter="structureVariant", setter="structureVariant", searcher=StringSearch("structureVariant"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        variant = EmbeddedAttribute(type="MolecularSequenceVariant", getter="variant", setter="variant", searcher=StringSearch("variant"))

class MolecularSequenceQuality(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    end = fields.IntegerField(blank=True, required=False)
    fScore = fields.FloatField(blank=True, required=False)
    gtFP = fields.FloatField(blank=True, required=False)
    method = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    precision = fields.FloatField(blank=True, required=False)
    queryFP = fields.FloatField(blank=True, required=False)
    queryTP = fields.FloatField(blank=True, required=False)
    recall = fields.FloatField(blank=True, required=False)
    roc = fields.EmbeddedDocumentField("MolecularSequenceQualityRoc", blank=True, required=False)
    score = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    standardSequence = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    start = fields.IntegerField(blank=True, required=False)
    truthFN = fields.FloatField(blank=True, required=False)
    truthTP = fields.FloatField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        end = Attribute(getter="end", setter="end", searcher=NumericSearch("end"))
        fScore = Attribute(getter="fScore", setter="fScore", searcher=NumericSearch("fScore"))
        gtFP = Attribute(getter="gtFP", setter="gtFP", searcher=NumericSearch("gtFP"))
        method = EmbeddedAttribute(type="CodeableConcept", getter="method", setter="method", searcher=StringSearch("method"))
        precision = Attribute(getter="precision", setter="precision", searcher=NumericSearch("precision"))
        queryFP = Attribute(getter="queryFP", setter="queryFP", searcher=NumericSearch("queryFP"))
        queryTP = Attribute(getter="queryTP", setter="queryTP", searcher=NumericSearch("queryTP"))
        recall = Attribute(getter="recall", setter="recall", searcher=NumericSearch("recall"))
        roc = EmbeddedAttribute(type="MolecularSequenceQualityRoc", getter="roc", setter="roc", searcher=StringSearch("roc"))
        score = EmbeddedAttribute(type="Quantity", getter="score", setter="score", searcher=StringSearch("score"))
        standardSequence = EmbeddedAttribute(type="CodeableConcept", getter="standardSequence", setter="standardSequence", searcher=StringSearch("standardSequence"))
        start = Attribute(getter="start", setter="start", searcher=NumericSearch("start"))
        truthFN = Attribute(getter="truthFN", setter="truthFN", searcher=NumericSearch("truthFN"))
        truthTP = Attribute(getter="truthTP", setter="truthTP", searcher=NumericSearch("truthTP"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class MolecularSequenceQualityRoc(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    fMeasure = fields.ListField(fields.FloatField(), blank=True, required=False)
    numFN = fields.ListField(fields.IntegerField(), blank=True, required=False)
    numFP = fields.ListField(fields.IntegerField(), blank=True, required=False)
    numTP = fields.ListField(fields.IntegerField(), blank=True, required=False)
    precision = fields.ListField(fields.FloatField(), blank=True, required=False)
    score = fields.ListField(fields.IntegerField(), blank=True, required=False)
    sensitivity = fields.ListField(fields.FloatField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        fMeasure = Attribute(getter="fMeasure", setter="fMeasure", searcher=NumericSearch("fMeasure"))
        numFN = Attribute(getter="numFN", setter="numFN", searcher=NumericSearch("numFN"))
        numFP = Attribute(getter="numFP", setter="numFP", searcher=NumericSearch("numFP"))
        numTP = Attribute(getter="numTP", setter="numTP", searcher=NumericSearch("numTP"))
        precision = Attribute(getter="precision", setter="precision", searcher=NumericSearch("precision"))
        score = Attribute(getter="score", setter="score", searcher=NumericSearch("score"))
        sensitivity = Attribute(getter="sensitivity", setter="sensitivity", searcher=NumericSearch("sensitivity"))

class MolecularSequenceReferenceSeq(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    chromosome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    genomeBuild = fields.CharField(blank=True, required=False)
    orientation = fields.CharField(blank=True, required=False)
    referenceSeqId = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    referenceSeqPointer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    referenceSeqString = fields.CharField(blank=True, required=False)
    strand = fields.CharField(blank=True, required=False)
    windowEnd = fields.IntegerField(blank=True, required=False)
    windowStart = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        chromosome = EmbeddedAttribute(type="CodeableConcept", getter="chromosome", setter="chromosome", searcher=StringSearch("chromosome"))
        genomeBuild = Attribute(getter="genomeBuild", setter="genomeBuild", searcher=StringSearch("genomeBuild"))
        orientation = Attribute(getter="orientation", setter="orientation", searcher=StringSearch("orientation"))
        referenceSeqId = EmbeddedAttribute(type="CodeableConcept", getter="referenceSeqId", setter="referenceSeqId", searcher=StringSearch("referenceSeqId"))
        referenceSeqPointer = EmbeddedAttribute(type="FHIRReference", getter="referenceSeqPointer", setter="referenceSeqPointer", searcher=StringSearch("referenceSeqPointer"))
        referenceSeqString = Attribute(getter="referenceSeqString", setter="referenceSeqString", searcher=StringSearch("referenceSeqString"))
        strand = Attribute(getter="strand", setter="strand", searcher=StringSearch("strand"))
        windowEnd = Attribute(getter="windowEnd", setter="windowEnd", searcher=NumericSearch("windowEnd"))
        windowStart = Attribute(getter="windowStart", setter="windowStart", searcher=NumericSearch("windowStart"))

class MolecularSequenceRepository(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    datasetId = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    readsetId = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    variantsetId = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        datasetId = Attribute(getter="datasetId", setter="datasetId", searcher=StringSearch("datasetId"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        readsetId = Attribute(getter="readsetId", setter="readsetId", searcher=StringSearch("readsetId"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        variantsetId = Attribute(getter="variantsetId", setter="variantsetId", searcher=StringSearch("variantsetId"))

class MolecularSequenceStructureVariant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    exact = fields.BooleanField(blank=True, required=False)
    inner = fields.EmbeddedDocumentField("MolecularSequenceStructureVariantInner", blank=True, required=False)
    length = fields.IntegerField(blank=True, required=False)
    outer = fields.EmbeddedDocumentField("MolecularSequenceStructureVariantOuter", blank=True, required=False)
    variantType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        exact = Attribute(getter="exact", setter="exact", searcher=StringSearch("exact"))
        inner = EmbeddedAttribute(type="MolecularSequenceStructureVariantInner", getter="inner", setter="inner", searcher=StringSearch("inner"))
        length = Attribute(getter="length", setter="length", searcher=NumericSearch("length"))
        outer = EmbeddedAttribute(type="MolecularSequenceStructureVariantOuter", getter="outer", setter="outer", searcher=StringSearch("outer"))
        variantType = EmbeddedAttribute(type="CodeableConcept", getter="variantType", setter="variantType", searcher=StringSearch("variantType"))

class MolecularSequenceStructureVariantInner(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    end = fields.IntegerField(blank=True, required=False)
    start = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        end = Attribute(getter="end", setter="end", searcher=NumericSearch("end"))
        start = Attribute(getter="start", setter="start", searcher=NumericSearch("start"))

class MolecularSequenceStructureVariantOuter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    end = fields.IntegerField(blank=True, required=False)
    start = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        end = Attribute(getter="end", setter="end", searcher=NumericSearch("end"))
        start = Attribute(getter="start", setter="start", searcher=NumericSearch("start"))

class MolecularSequenceVariant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    cigar = fields.CharField(blank=True, required=False)
    end = fields.IntegerField(blank=True, required=False)
    observedAllele = fields.CharField(blank=True, required=False)
    referenceAllele = fields.CharField(blank=True, required=False)
    start = fields.IntegerField(blank=True, required=False)
    variantPointer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        cigar = Attribute(getter="cigar", setter="cigar", searcher=StringSearch("cigar"))
        end = Attribute(getter="end", setter="end", searcher=NumericSearch("end"))
        observedAllele = Attribute(getter="observedAllele", setter="observedAllele", searcher=StringSearch("observedAllele"))
        referenceAllele = Attribute(getter="referenceAllele", setter="referenceAllele", searcher=StringSearch("referenceAllele"))
        start = Attribute(getter="start", setter="start", searcher=NumericSearch("start"))
        variantPointer = EmbeddedAttribute(type="FHIRReference", getter="variantPointer", setter="variantPointer", searcher=StringSearch("variantPointer"))

class Money(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    currency = fields.CharField(blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        currency = Attribute(getter="currency", setter="currency", searcher=StringSearch("currency"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class NamingSystem(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    date = fields.DateTimeField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    kind = fields.CharField(blank=False, required=True)
    name = fields.CharField(blank=False, required=True)
    publisher = fields.CharField(blank=True, required=False)
    responsible = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    uniqueId = fields.EmbeddedDocumentListField("NamingSystemUniqueId", blank=False, required=True)
    usage = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        responsible = Attribute(getter="responsible", setter="responsible", searcher=StringSearch("responsible"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        uniqueId = EmbeddedAttribute(type="NamingSystemUniqueId", getter="uniqueId", setter="uniqueId", searcher=StringSearch("uniqueId"))
        usage = Attribute(getter="usage", setter="usage", searcher=StringSearch("usage"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))

class NamingSystemUniqueId(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    preferred = fields.BooleanField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        preferred = Attribute(getter="preferred", setter="preferred", searcher=StringSearch("preferred"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class Narrative(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    div = fields.CharField(blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        div = Attribute(getter="div", setter="div", searcher=StringSearch("div"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class NutritionOrder(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    allergyIntolerance = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    dateTime = fields.DateTimeField(blank=False, required=True)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    enteralFormula = fields.EmbeddedDocumentField("NutritionOrderEnteralFormula", blank=True, required=False)
    excludeFoodModifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    foodPreferenceModifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    instantiates = fields.ListField(fields.CharField(), blank=True, required=False)
    instantiatesCanonical = fields.ListField(fields.CharField(), blank=True, required=False)
    instantiatesUri = fields.ListField(fields.CharField(), blank=True, required=False)
    intent = fields.CharField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    oralDiet = fields.EmbeddedDocumentField("NutritionOrderOralDiet", blank=True, required=False)
    orderer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    supplement = fields.EmbeddedDocumentListField("NutritionOrderSupplement", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        allergyIntolerance = EmbeddedAttribute(type="FHIRReference", getter="allergyIntolerance", setter="allergyIntolerance", searcher=StringSearch("allergyIntolerance"))
        dateTime = DateAttribute("dateTime")
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        enteralFormula = EmbeddedAttribute(type="NutritionOrderEnteralFormula", getter="enteralFormula", setter="enteralFormula", searcher=StringSearch("enteralFormula"))
        excludeFoodModifier = EmbeddedAttribute(type="CodeableConcept", getter="excludeFoodModifier", setter="excludeFoodModifier", searcher=StringSearch("excludeFoodModifier"))
        foodPreferenceModifier = EmbeddedAttribute(type="CodeableConcept", getter="foodPreferenceModifier", setter="foodPreferenceModifier", searcher=StringSearch("foodPreferenceModifier"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        instantiates = Attribute(getter="instantiates", setter="instantiates", searcher=StringSearch("instantiates"))
        instantiatesCanonical = Attribute(getter="instantiatesCanonical", setter="instantiatesCanonical", searcher=StringSearch("instantiatesCanonical"))
        instantiatesUri = Attribute(getter="instantiatesUri", setter="instantiatesUri", searcher=StringSearch("instantiatesUri"))
        intent = Attribute(getter="intent", setter="intent", searcher=StringSearch("intent"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        oralDiet = EmbeddedAttribute(type="NutritionOrderOralDiet", getter="oralDiet", setter="oralDiet", searcher=StringSearch("oralDiet"))
        orderer = EmbeddedAttribute(type="FHIRReference", getter="orderer", setter="orderer", searcher=StringSearch("orderer"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        supplement = EmbeddedAttribute(type="NutritionOrderSupplement", getter="supplement", setter="supplement", searcher=StringSearch("supplement"))

class NutritionOrderEnteralFormula(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    additiveProductName = fields.CharField(blank=True, required=False)
    additiveType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    administration = fields.EmbeddedDocumentListField("NutritionOrderEnteralFormulaAdministration", blank=True, required=False)
    administrationInstruction = fields.CharField(blank=True, required=False)
    baseFormulaProductName = fields.CharField(blank=True, required=False)
    baseFormulaType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    caloricDensity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    maxVolumeToDeliver = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    routeofAdministration = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        additiveProductName = Attribute(getter="additiveProductName", setter="additiveProductName", searcher=StringSearch("additiveProductName"))
        additiveType = EmbeddedAttribute(type="CodeableConcept", getter="additiveType", setter="additiveType", searcher=StringSearch("additiveType"))
        administration = EmbeddedAttribute(type="NutritionOrderEnteralFormulaAdministration", getter="administration", setter="administration", searcher=StringSearch("administration"))
        administrationInstruction = Attribute(getter="administrationInstruction", setter="administrationInstruction", searcher=StringSearch("administrationInstruction"))
        baseFormulaProductName = Attribute(getter="baseFormulaProductName", setter="baseFormulaProductName", searcher=StringSearch("baseFormulaProductName"))
        baseFormulaType = EmbeddedAttribute(type="CodeableConcept", getter="baseFormulaType", setter="baseFormulaType", searcher=StringSearch("baseFormulaType"))
        caloricDensity = EmbeddedAttribute(type="Quantity", getter="caloricDensity", setter="caloricDensity", searcher=StringSearch("caloricDensity"))
        maxVolumeToDeliver = EmbeddedAttribute(type="Quantity", getter="maxVolumeToDeliver", setter="maxVolumeToDeliver", searcher=StringSearch("maxVolumeToDeliver"))
        routeofAdministration = EmbeddedAttribute(type="CodeableConcept", getter="routeofAdministration", setter="routeofAdministration", searcher=StringSearch("routeofAdministration"))

class NutritionOrderEnteralFormulaAdministration(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    rateQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    rateRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    schedule = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        rateQuantity = EmbeddedAttribute(type="Quantity", getter="rateQuantity", setter="rateQuantity", searcher=StringSearch("rateQuantity"))
        rateRatio = EmbeddedAttribute(type="Ratio", getter="rateRatio", setter="rateRatio", searcher=StringSearch("rateRatio"))
        schedule = EmbeddedAttribute(type="Timing", getter="schedule", setter="schedule", searcher=StringSearch("schedule"))

class NutritionOrderOralDiet(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    fluidConsistencyType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    instruction = fields.CharField(blank=True, required=False)
    nutrient = fields.EmbeddedDocumentListField("NutritionOrderOralDietNutrient", blank=True, required=False)
    schedule = fields.EmbeddedDocumentListField("Timing", blank=True, required=False)
    texture = fields.EmbeddedDocumentListField("NutritionOrderOralDietTexture", blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        fluidConsistencyType = EmbeddedAttribute(type="CodeableConcept", getter="fluidConsistencyType", setter="fluidConsistencyType", searcher=StringSearch("fluidConsistencyType"))
        instruction = Attribute(getter="instruction", setter="instruction", searcher=StringSearch("instruction"))
        nutrient = EmbeddedAttribute(type="NutritionOrderOralDietNutrient", getter="nutrient", setter="nutrient", searcher=StringSearch("nutrient"))
        schedule = EmbeddedAttribute(type="Timing", getter="schedule", setter="schedule", searcher=StringSearch("schedule"))
        texture = EmbeddedAttribute(type="NutritionOrderOralDietTexture", getter="texture", setter="texture", searcher=StringSearch("texture"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class NutritionOrderOralDietNutrient(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    modifier = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="Quantity", getter="amount", setter="amount", searcher=StringSearch("amount"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))

class NutritionOrderOralDietTexture(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    foodType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    modifier = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        foodType = EmbeddedAttribute(type="CodeableConcept", getter="foodType", setter="foodType", searcher=StringSearch("foodType"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))

class NutritionOrderSupplement(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    instruction = fields.CharField(blank=True, required=False)
    productName = fields.CharField(blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    schedule = fields.EmbeddedDocumentListField("Timing", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        instruction = Attribute(getter="instruction", setter="instruction", searcher=StringSearch("instruction"))
        productName = Attribute(getter="productName", setter="productName", searcher=StringSearch("productName"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        schedule = EmbeddedAttribute(type="Timing", getter="schedule", setter="schedule", searcher=StringSearch("schedule"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class Observation(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    component = fields.EmbeddedDocumentListField("ObservationComponent", blank=True, required=False)
    dataAbsentReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    derivedFrom = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    device = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    effectiveDateTime = fields.DateTimeField(blank=True, required=False)
    effectiveInstant = fields.DateTimeField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    effectiveTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    focus = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    hasMember = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    interpretation = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    issued = fields.DateTimeField(blank=True, required=False)
    method = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    partOf = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    performer = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    referenceRange = fields.EmbeddedDocumentListField("ObservationReferenceRange", blank=True, required=False)
    specimen = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valuePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    valueRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    valueSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueTime = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        component = EmbeddedAttribute(type="ObservationComponent", getter="component", setter="component", searcher=StringSearch("component"))
        dataAbsentReason = EmbeddedAttribute(type="CodeableConcept", getter="dataAbsentReason", setter="dataAbsentReason", searcher=StringSearch("dataAbsentReason"))
        derivedFrom = EmbeddedAttribute(type="FHIRReference", getter="derivedFrom", setter="derivedFrom", searcher=StringSearch("derivedFrom"))
        device = EmbeddedAttribute(type="FHIRReference", getter="device", setter="device", searcher=StringSearch("device"))
        effectiveDateTime = DateAttribute("effectiveDateTime")
        effectiveInstant = DateAttribute("effectiveInstant")
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        effectiveTiming = EmbeddedAttribute(type="Timing", getter="effectiveTiming", setter="effectiveTiming", searcher=StringSearch("effectiveTiming"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        focus = EmbeddedAttribute(type="FHIRReference", getter="focus", setter="focus", searcher=StringSearch("focus"))
        hasMember = EmbeddedAttribute(type="FHIRReference", getter="hasMember", setter="hasMember", searcher=StringSearch("hasMember"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        interpretation = EmbeddedAttribute(type="CodeableConcept", getter="interpretation", setter="interpretation", searcher=StringSearch("interpretation"))
        issued = DateAttribute("issued")
        method = EmbeddedAttribute(type="CodeableConcept", getter="method", setter="method", searcher=StringSearch("method"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        performer = EmbeddedAttribute(type="FHIRReference", getter="performer", setter="performer", searcher=StringSearch("performer"))
        referenceRange = EmbeddedAttribute(type="ObservationReferenceRange", getter="referenceRange", setter="referenceRange", searcher=StringSearch("referenceRange"))
        specimen = EmbeddedAttribute(type="FHIRReference", getter="specimen", setter="specimen", searcher=StringSearch("specimen"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueDateTime = DateAttribute("valueDateTime")
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valuePeriod = EmbeddedAttribute(type="Period", getter="valuePeriod", setter="valuePeriod", searcher=StringSearch("valuePeriod"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))
        valueRatio = EmbeddedAttribute(type="Ratio", getter="valueRatio", setter="valueRatio", searcher=StringSearch("valueRatio"))
        valueSampledData = EmbeddedAttribute(type="SampledData", getter="valueSampledData", setter="valueSampledData", searcher=StringSearch("valueSampledData"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")

class ObservationComponent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    dataAbsentReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    interpretation = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    referenceRange = fields.EmbeddedDocumentListField("ObservationReferenceRange", blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valuePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    valueRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    valueSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueTime = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        dataAbsentReason = EmbeddedAttribute(type="CodeableConcept", getter="dataAbsentReason", setter="dataAbsentReason", searcher=StringSearch("dataAbsentReason"))
        interpretation = EmbeddedAttribute(type="CodeableConcept", getter="interpretation", setter="interpretation", searcher=StringSearch("interpretation"))
        referenceRange = EmbeddedAttribute(type="ObservationReferenceRange", getter="referenceRange", setter="referenceRange", searcher=StringSearch("referenceRange"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueDateTime = DateAttribute("valueDateTime")
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valuePeriod = EmbeddedAttribute(type="Period", getter="valuePeriod", setter="valuePeriod", searcher=StringSearch("valuePeriod"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))
        valueRatio = EmbeddedAttribute(type="Ratio", getter="valueRatio", setter="valueRatio", searcher=StringSearch("valueRatio"))
        valueSampledData = EmbeddedAttribute(type="SampledData", getter="valueSampledData", setter="valueSampledData", searcher=StringSearch("valueSampledData"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")

class ObservationDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    abnormalCodedValueSet = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    criticalCodedValueSet = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    method = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    multipleResultsAllowed = fields.BooleanField(blank=True, required=False)
    normalCodedValueSet = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    permittedDataType = fields.ListField(fields.CharField(), blank=True, required=False)
    preferredReportName = fields.CharField(blank=True, required=False)
    qualifiedInterval = fields.EmbeddedDocumentListField("ObservationDefinitionQualifiedInterval", blank=True, required=False)
    quantitativeDetails = fields.EmbeddedDocumentField("ObservationDefinitionQuantitativeDetails", blank=True, required=False)
    validCodedValueSet = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        abnormalCodedValueSet = EmbeddedAttribute(type="FHIRReference", getter="abnormalCodedValueSet", setter="abnormalCodedValueSet", searcher=StringSearch("abnormalCodedValueSet"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        criticalCodedValueSet = EmbeddedAttribute(type="FHIRReference", getter="criticalCodedValueSet", setter="criticalCodedValueSet", searcher=StringSearch("criticalCodedValueSet"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        method = EmbeddedAttribute(type="CodeableConcept", getter="method", setter="method", searcher=StringSearch("method"))
        multipleResultsAllowed = Attribute(getter="multipleResultsAllowed", setter="multipleResultsAllowed", searcher=StringSearch("multipleResultsAllowed"))
        normalCodedValueSet = EmbeddedAttribute(type="FHIRReference", getter="normalCodedValueSet", setter="normalCodedValueSet", searcher=StringSearch("normalCodedValueSet"))
        permittedDataType = Attribute(getter="permittedDataType", setter="permittedDataType", searcher=StringSearch("permittedDataType"))
        preferredReportName = Attribute(getter="preferredReportName", setter="preferredReportName", searcher=StringSearch("preferredReportName"))
        qualifiedInterval = EmbeddedAttribute(type="ObservationDefinitionQualifiedInterval", getter="qualifiedInterval", setter="qualifiedInterval", searcher=StringSearch("qualifiedInterval"))
        quantitativeDetails = EmbeddedAttribute(type="ObservationDefinitionQuantitativeDetails", getter="quantitativeDetails", setter="quantitativeDetails", searcher=StringSearch("quantitativeDetails"))
        validCodedValueSet = EmbeddedAttribute(type="FHIRReference", getter="validCodedValueSet", setter="validCodedValueSet", searcher=StringSearch("validCodedValueSet"))

class ObservationDefinitionQualifiedInterval(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    age = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    appliesTo = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    category = fields.CharField(blank=True, required=False)
    condition = fields.CharField(blank=True, required=False)
    context = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    gender = fields.CharField(blank=True, required=False)
    gestationalAge = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    range = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        age = EmbeddedAttribute(type="Range", getter="age", setter="age", searcher=StringSearch("age"))
        appliesTo = EmbeddedAttribute(type="CodeableConcept", getter="appliesTo", setter="appliesTo", searcher=StringSearch("appliesTo"))
        category = Attribute(getter="category", setter="category", searcher=StringSearch("category"))
        condition = Attribute(getter="condition", setter="condition", searcher=StringSearch("condition"))
        context = EmbeddedAttribute(type="CodeableConcept", getter="context", setter="context", searcher=StringSearch("context"))
        gender = Attribute(getter="gender", setter="gender", searcher=StringSearch("gender"))
        gestationalAge = EmbeddedAttribute(type="Range", getter="gestationalAge", setter="gestationalAge", searcher=StringSearch("gestationalAge"))
        range = EmbeddedAttribute(type="Range", getter="range", setter="range", searcher=StringSearch("range"))

class ObservationDefinitionQuantitativeDetails(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    conversionFactor = fields.FloatField(blank=True, required=False)
    customaryUnit = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    decimalPrecision = fields.IntegerField(blank=True, required=False)
    unit = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        conversionFactor = Attribute(getter="conversionFactor", setter="conversionFactor", searcher=NumericSearch("conversionFactor"))
        customaryUnit = EmbeddedAttribute(type="CodeableConcept", getter="customaryUnit", setter="customaryUnit", searcher=StringSearch("customaryUnit"))
        decimalPrecision = Attribute(getter="decimalPrecision", setter="decimalPrecision", searcher=NumericSearch("decimalPrecision"))
        unit = EmbeddedAttribute(type="CodeableConcept", getter="unit", setter="unit", searcher=StringSearch("unit"))

class ObservationReferenceRange(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    age = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    appliesTo = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    high = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    low = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        age = EmbeddedAttribute(type="Range", getter="age", setter="age", searcher=StringSearch("age"))
        appliesTo = EmbeddedAttribute(type="CodeableConcept", getter="appliesTo", setter="appliesTo", searcher=StringSearch("appliesTo"))
        high = EmbeddedAttribute(type="Quantity", getter="high", setter="high", searcher=StringSearch("high"))
        low = EmbeddedAttribute(type="Quantity", getter="low", setter="low", searcher=StringSearch("low"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class OperationDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    affectsState = fields.BooleanField(blank=True, required=False)
    base = fields.CharField(blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    comment = fields.CharField(blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    inputProfile = fields.CharField(blank=True, required=False)
    instance = fields.BooleanField(blank=False, required=True)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    kind = fields.CharField(blank=False, required=True)
    name = fields.CharField(blank=False, required=True)
    outputProfile = fields.CharField(blank=True, required=False)
    overload = fields.EmbeddedDocumentListField("OperationDefinitionOverload", blank=True, required=False)
    parameter = fields.EmbeddedDocumentListField("OperationDefinitionParameter", blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    resource = fields.ListField(fields.CharField(), blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    system = fields.BooleanField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    type = fields.BooleanField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        affectsState = Attribute(getter="affectsState", setter="affectsState", searcher=StringSearch("affectsState"))
        base = Attribute(getter="base", setter="base", searcher=StringSearch("base"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        inputProfile = Attribute(getter="inputProfile", setter="inputProfile", searcher=StringSearch("inputProfile"))
        instance = Attribute(getter="instance", setter="instance", searcher=StringSearch("instance"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        outputProfile = Attribute(getter="outputProfile", setter="outputProfile", searcher=StringSearch("outputProfile"))
        overload = EmbeddedAttribute(type="OperationDefinitionOverload", getter="overload", setter="overload", searcher=StringSearch("overload"))
        parameter = EmbeddedAttribute(type="OperationDefinitionParameter", getter="parameter", setter="parameter", searcher=StringSearch("parameter"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        resource = Attribute(getter="resource", setter="resource", searcher=StringSearch("resource"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class OperationDefinitionOverload(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    parameterName = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        parameterName = Attribute(getter="parameterName", setter="parameterName", searcher=StringSearch("parameterName"))

class OperationDefinitionParameter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    binding = fields.EmbeddedDocumentField("OperationDefinitionParameterBinding", blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    max = fields.CharField(blank=False, required=True)
    min = fields.IntegerField(blank=False, required=True)
    name = fields.CharField(blank=False, required=True)
    referencedFrom = fields.EmbeddedDocumentListField("OperationDefinitionParameterReferencedFrom", blank=True, required=False)
    searchType = fields.CharField(blank=True, required=False)
    targetProfile = fields.ListField(fields.CharField(), blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    use = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        binding = EmbeddedAttribute(type="OperationDefinitionParameterBinding", getter="binding", setter="binding", searcher=StringSearch("binding"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        max = Attribute(getter="max", setter="max", searcher=StringSearch("max"))
        min = Attribute(getter="min", setter="min", searcher=NumericSearch("min"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        referencedFrom = EmbeddedAttribute(type="OperationDefinitionParameterReferencedFrom", getter="referencedFrom", setter="referencedFrom", searcher=StringSearch("referencedFrom"))
        searchType = Attribute(getter="searchType", setter="searchType", searcher=StringSearch("searchType"))
        targetProfile = Attribute(getter="targetProfile", setter="targetProfile", searcher=StringSearch("targetProfile"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))

class OperationDefinitionParameterBinding(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    strength = fields.CharField(blank=False, required=True)
    valueSet = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        strength = Attribute(getter="strength", setter="strength", searcher=StringSearch("strength"))
        valueSet = Attribute(getter="valueSet", setter="valueSet", searcher=StringSearch("valueSet"))

class OperationDefinitionParameterReferencedFrom(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    source = fields.CharField(blank=False, required=True)
    sourceId = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        source = Attribute(getter="source", setter="source", searcher=StringSearch("source"))
        sourceId = Attribute(getter="sourceId", setter="sourceId", searcher=StringSearch("sourceId"))

class OperationOutcome(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    issue = fields.EmbeddedDocumentListField("OperationOutcomeIssue", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        issue = EmbeddedAttribute(type="OperationOutcomeIssue", getter="issue", setter="issue", searcher=StringSearch("issue"))

class OperationOutcomeIssue(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    details = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    diagnostics = fields.CharField(blank=True, required=False)
    expression = fields.ListField(fields.CharField(), blank=True, required=False)
    location = fields.ListField(fields.CharField(), blank=True, required=False)
    severity = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        details = EmbeddedAttribute(type="CodeableConcept", getter="details", setter="details", searcher=StringSearch("details"))
        diagnostics = Attribute(getter="diagnostics", setter="diagnostics", searcher=StringSearch("diagnostics"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        location = Attribute(getter="location", setter="location", searcher=StringSearch("location"))
        severity = Attribute(getter="severity", setter="severity", searcher=StringSearch("severity"))

class Organization(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    address = fields.EmbeddedDocumentListField("Address", blank=True, required=False)
    alias = fields.ListField(fields.CharField(), blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("OrganizationContact", blank=True, required=False)
    endpoint = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    partOf = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        alias = Attribute(getter="alias", setter="alias", searcher=StringSearch("alias"))
        contact = EmbeddedAttribute(type="OrganizationContact", getter="contact", setter="contact", searcher=StringSearch("contact"))
        endpoint = EmbeddedAttribute(type="FHIRReference", getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class OrganizationAffiliation(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    code = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    endpoint = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    healthcareService = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    location = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    network = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    organization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    participatingOrganization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    specialty = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        endpoint = EmbeddedAttribute(type="FHIRReference", getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        healthcareService = EmbeddedAttribute(type="FHIRReference", getter="healthcareService", setter="healthcareService", searcher=StringSearch("healthcareService"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        location = EmbeddedAttribute(type="FHIRReference", getter="location", setter="location", searcher=StringSearch("location"))
        network = EmbeddedAttribute(type="FHIRReference", getter="network", setter="network", searcher=StringSearch("network"))
        organization = EmbeddedAttribute(type="FHIRReference", getter="organization", setter="organization", searcher=StringSearch("organization"))
        participatingOrganization = EmbeddedAttribute(type="FHIRReference", getter="participatingOrganization", setter="participatingOrganization", searcher=StringSearch("participatingOrganization"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        specialty = EmbeddedAttribute(type="CodeableConcept", getter="specialty", setter="specialty", searcher=StringSearch("specialty"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class OrganizationContact(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    address = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    name = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    purpose = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        name = EmbeddedAttribute(type="HumanName", getter="name", setter="name", searcher=StringSearch("name"))
        purpose = EmbeddedAttribute(type="CodeableConcept", getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class PaginatedBundle(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    entry = fields.EmbeddedDocumentListField("BundleEntry", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    link = fields.EmbeddedDocumentListField("BundleLink", blank=True, required=False)
    signature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    timestamp = fields.DateTimeField(blank=True, required=False)
    total = fields.IntegerField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        entry = EmbeddedAttribute(type="BundleEntry", getter="entry", setter="entry", searcher=StringSearch("entry"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        link = EmbeddedAttribute(type="BundleLink", getter="link", setter="link", searcher=StringSearch("link"))
        signature = EmbeddedAttribute(type="Signature", getter="signature", setter="signature", searcher=StringSearch("signature"))
        timestamp = DateAttribute("timestamp")
        total = Attribute(getter="total", setter="total", searcher=NumericSearch("total"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class ParameterDefinition(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    max = fields.CharField(blank=True, required=False)
    min = fields.IntegerField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    profile = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    use = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        max = Attribute(getter="max", setter="max", searcher=StringSearch("max"))
        min = Attribute(getter="min", setter="min", searcher=NumericSearch("min"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        profile = Attribute(getter="profile", setter="profile", searcher=StringSearch("profile"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))

class Parameters(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    parameter = fields.EmbeddedDocumentListField("ParametersParameter", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        parameter = EmbeddedAttribute(type="ParametersParameter", getter="parameter", setter="parameter", searcher=StringSearch("parameter"))

class ParametersParameter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    resource = fields.CharField(blank=True, required=False)
    valueAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    valueAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    valueAnnotation = fields.EmbeddedDocumentField("Annotation", blank=True, required=False)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    valueBase64Binary = fields.CharField(blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCanonical = fields.CharField(blank=True, required=False)
    valueCode = fields.CharField(blank=True, required=False)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    valueContactDetail = fields.EmbeddedDocumentField("ContactDetail", blank=True, required=False)
    valueContactPoint = fields.EmbeddedDocumentField("ContactPoint", blank=True, required=False)
    valueContributor = fields.EmbeddedDocumentField("Contributor", blank=True, required=False)
    valueCount = fields.EmbeddedDocumentField("Count", blank=True, required=False)
    valueDataRequirement = fields.EmbeddedDocumentField("DataRequirement", blank=True, required=False)
    valueDate = fields.DateTimeField(blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valueDecimal = fields.FloatField(blank=True, required=False)
    valueDistance = fields.EmbeddedDocumentField("Distance", blank=True, required=False)
    valueDosage = fields.EmbeddedDocumentField("Dosage", blank=True, required=False)
    valueDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    valueExpression = fields.EmbeddedDocumentField("Expression", blank=True, required=False)
    valueHumanName = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    valueId = fields.CharField(blank=True, required=False)
    valueIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    valueInstant = fields.DateTimeField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valueMarkdown = fields.CharField(blank=True, required=False)
    valueMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    valueOid = fields.CharField(blank=True, required=False)
    valueParameterDefinition = fields.EmbeddedDocumentField("ParameterDefinition", blank=True, required=False)
    valuePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    valuePositiveInt = fields.IntegerField(blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    valueRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    valueReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    valueRelatedArtifact = fields.EmbeddedDocumentField("RelatedArtifact", blank=True, required=False)
    valueSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    valueSignature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueTime = fields.DateTimeField(blank=True, required=False)
    valueTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    valueTriggerDefinition = fields.EmbeddedDocumentField("TriggerDefinition", blank=True, required=False)
    valueUnsignedInt = fields.IntegerField(blank=True, required=False)
    valueUri = fields.CharField(blank=True, required=False)
    valueUrl = fields.CharField(blank=True, required=False)
    valueUsageContext = fields.EmbeddedDocumentField("UsageContext", blank=True, required=False)
    valueUuid = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        resource = Attribute(getter="resource", setter="resource", searcher=StringSearch("resource"))
        valueAddress = EmbeddedAttribute(type="Address", getter="valueAddress", setter="valueAddress", searcher=StringSearch("valueAddress"))
        valueAge = EmbeddedAttribute(type="Age", getter="valueAge", setter="valueAge", searcher=StringSearch("valueAge"))
        valueAnnotation = EmbeddedAttribute(type="Annotation", getter="valueAnnotation", setter="valueAnnotation", searcher=StringSearch("valueAnnotation"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueBase64Binary = Attribute(getter="valueBase64Binary", setter="valueBase64Binary", searcher=StringSearch("valueBase64Binary"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCanonical = Attribute(getter="valueCanonical", setter="valueCanonical", searcher=StringSearch("valueCanonical"))
        valueCode = Attribute(getter="valueCode", setter="valueCode", searcher=StringSearch("valueCode"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueContactDetail = EmbeddedAttribute(type="ContactDetail", getter="valueContactDetail", setter="valueContactDetail", searcher=StringSearch("valueContactDetail"))
        valueContactPoint = EmbeddedAttribute(type="ContactPoint", getter="valueContactPoint", setter="valueContactPoint", searcher=StringSearch("valueContactPoint"))
        valueContributor = EmbeddedAttribute(type="Contributor", getter="valueContributor", setter="valueContributor", searcher=StringSearch("valueContributor"))
        valueCount = EmbeddedAttribute(type="Count", getter="valueCount", setter="valueCount", searcher=StringSearch("valueCount"))
        valueDataRequirement = EmbeddedAttribute(type="DataRequirement", getter="valueDataRequirement", setter="valueDataRequirement", searcher=StringSearch("valueDataRequirement"))
        valueDate = DateAttribute("valueDate")
        valueDateTime = DateAttribute("valueDateTime")
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueDistance = EmbeddedAttribute(type="Distance", getter="valueDistance", setter="valueDistance", searcher=StringSearch("valueDistance"))
        valueDosage = EmbeddedAttribute(type="Dosage", getter="valueDosage", setter="valueDosage", searcher=StringSearch("valueDosage"))
        valueDuration = EmbeddedAttribute(type="Duration", getter="valueDuration", setter="valueDuration", searcher=StringSearch("valueDuration"))
        valueExpression = EmbeddedAttribute(type="Expression", getter="valueExpression", setter="valueExpression", searcher=StringSearch("valueExpression"))
        valueHumanName = EmbeddedAttribute(type="HumanName", getter="valueHumanName", setter="valueHumanName", searcher=StringSearch("valueHumanName"))
        valueId = Attribute(getter="valueId", setter="valueId", searcher=StringSearch("valueId"))
        valueIdentifier = EmbeddedAttribute(type="Identifier", getter="valueIdentifier", setter="valueIdentifier", searcher=StringSearch("valueIdentifier"))
        valueInstant = DateAttribute("valueInstant")
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueMarkdown = Attribute(getter="valueMarkdown", setter="valueMarkdown", searcher=StringSearch("valueMarkdown"))
        valueMoney = EmbeddedAttribute(type="Money", getter="valueMoney", setter="valueMoney", searcher=StringSearch("valueMoney"))
        valueOid = Attribute(getter="valueOid", setter="valueOid", searcher=StringSearch("valueOid"))
        valueParameterDefinition = EmbeddedAttribute(type="ParameterDefinition", getter="valueParameterDefinition", setter="valueParameterDefinition", searcher=StringSearch("valueParameterDefinition"))
        valuePeriod = EmbeddedAttribute(type="Period", getter="valuePeriod", setter="valuePeriod", searcher=StringSearch("valuePeriod"))
        valuePositiveInt = Attribute(getter="valuePositiveInt", setter="valuePositiveInt", searcher=NumericSearch("valuePositiveInt"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))
        valueRatio = EmbeddedAttribute(type="Ratio", getter="valueRatio", setter="valueRatio", searcher=StringSearch("valueRatio"))
        valueReference = EmbeddedAttribute(type="FHIRReference", getter="valueReference", setter="valueReference", searcher=StringSearch("valueReference"))
        valueRelatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="valueRelatedArtifact", setter="valueRelatedArtifact", searcher=StringSearch("valueRelatedArtifact"))
        valueSampledData = EmbeddedAttribute(type="SampledData", getter="valueSampledData", setter="valueSampledData", searcher=StringSearch("valueSampledData"))
        valueSignature = EmbeddedAttribute(type="Signature", getter="valueSignature", setter="valueSignature", searcher=StringSearch("valueSignature"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")
        valueTiming = EmbeddedAttribute(type="Timing", getter="valueTiming", setter="valueTiming", searcher=StringSearch("valueTiming"))
        valueTriggerDefinition = EmbeddedAttribute(type="TriggerDefinition", getter="valueTriggerDefinition", setter="valueTriggerDefinition", searcher=StringSearch("valueTriggerDefinition"))
        valueUnsignedInt = Attribute(getter="valueUnsignedInt", setter="valueUnsignedInt", searcher=NumericSearch("valueUnsignedInt"))
        valueUri = Attribute(getter="valueUri", setter="valueUri", searcher=StringSearch("valueUri"))
        valueUrl = Attribute(getter="valueUrl", setter="valueUrl", searcher=StringSearch("valueUrl"))
        valueUsageContext = EmbeddedAttribute(type="UsageContext", getter="valueUsageContext", setter="valueUsageContext", searcher=StringSearch("valueUsageContext"))
        valueUuid = Attribute(getter="valueUuid", setter="valueUuid", searcher=StringSearch("valueUuid"))

class Patient(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    address = fields.EmbeddedDocumentListField("Address", blank=True, required=False)
    birthDate = fields.DateTimeField(blank=True, required=False)
    communication = fields.EmbeddedDocumentListField("PatientCommunication", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("PatientContact", blank=True, required=False)
    deceasedBoolean = fields.BooleanField(blank=True, required=False)
    deceasedDateTime = fields.DateTimeField(blank=True, required=False)
    gender = fields.CharField(blank=True, required=False)
    generalPractitioner = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    link = fields.EmbeddedDocumentListField("PatientLink", blank=True, required=False)
    managingOrganization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    maritalStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    multipleBirthBoolean = fields.BooleanField(blank=True, required=False)
    multipleBirthInteger = fields.IntegerField(blank=True, required=False)
    name = fields.EmbeddedDocumentListField("HumanName", blank=True, required=False)
    photo = fields.EmbeddedDocumentListField("Attachment", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        birthDate = DateAttribute("birthDate")
        communication = EmbeddedAttribute(type="PatientCommunication", getter="communication", setter="communication", searcher=StringSearch("communication"))
        contact = EmbeddedAttribute(type="PatientContact", getter="contact", setter="contact", searcher=StringSearch("contact"))
        deceasedBoolean = Attribute(getter="deceasedBoolean", setter="deceasedBoolean", searcher=StringSearch("deceasedBoolean"))
        deceasedDateTime = DateAttribute("deceasedDateTime")
        gender = Attribute(getter="gender", setter="gender", searcher=StringSearch("gender"))
        generalPractitioner = EmbeddedAttribute(type="FHIRReference", getter="generalPractitioner", setter="generalPractitioner", searcher=StringSearch("generalPractitioner"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        link = EmbeddedAttribute(type="PatientLink", getter="link", setter="link", searcher=StringSearch("link"))
        managingOrganization = EmbeddedAttribute(type="FHIRReference", getter="managingOrganization", setter="managingOrganization", searcher=StringSearch("managingOrganization"))
        maritalStatus = EmbeddedAttribute(type="CodeableConcept", getter="maritalStatus", setter="maritalStatus", searcher=StringSearch("maritalStatus"))
        multipleBirthBoolean = Attribute(getter="multipleBirthBoolean", setter="multipleBirthBoolean", searcher=StringSearch("multipleBirthBoolean"))
        multipleBirthInteger = Attribute(getter="multipleBirthInteger", setter="multipleBirthInteger", searcher=NumericSearch("multipleBirthInteger"))
        name = EmbeddedAttribute(type="HumanName", getter="name", setter="name", searcher=StringSearch("name"))
        photo = EmbeddedAttribute(type="Attachment", getter="photo", setter="photo", searcher=StringSearch("photo"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class PatientCommunication(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    language = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    preferred = fields.BooleanField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        language = EmbeddedAttribute(type="CodeableConcept", getter="language", setter="language", searcher=StringSearch("language"))
        preferred = Attribute(getter="preferred", setter="preferred", searcher=StringSearch("preferred"))

class PatientContact(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    address = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    gender = fields.CharField(blank=True, required=False)
    name = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    organization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    relationship = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        gender = Attribute(getter="gender", setter="gender", searcher=StringSearch("gender"))
        name = EmbeddedAttribute(type="HumanName", getter="name", setter="name", searcher=StringSearch("name"))
        organization = EmbeddedAttribute(type="FHIRReference", getter="organization", setter="organization", searcher=StringSearch("organization"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        relationship = EmbeddedAttribute(type="CodeableConcept", getter="relationship", setter="relationship", searcher=StringSearch("relationship"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class PatientLink(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    other = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        other = EmbeddedAttribute(type="FHIRReference", getter="other", setter="other", searcher=StringSearch("other"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class PaymentNotice(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Money", blank=False, required=True)
    created = fields.DateTimeField(blank=False, required=True)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    payee = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    payment = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    paymentDate = fields.DateTimeField(blank=True, required=False)
    paymentStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    provider = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    recipient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    request = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    response = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        amount = EmbeddedAttribute(type="Money", getter="amount", setter="amount", searcher=StringSearch("amount"))
        created = DateAttribute("created")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        payee = EmbeddedAttribute(type="FHIRReference", getter="payee", setter="payee", searcher=StringSearch("payee"))
        payment = EmbeddedAttribute(type="FHIRReference", getter="payment", setter="payment", searcher=StringSearch("payment"))
        paymentDate = DateAttribute("paymentDate")
        paymentStatus = EmbeddedAttribute(type="CodeableConcept", getter="paymentStatus", setter="paymentStatus", searcher=StringSearch("paymentStatus"))
        provider = EmbeddedAttribute(type="FHIRReference", getter="provider", setter="provider", searcher=StringSearch("provider"))
        recipient = EmbeddedAttribute(type="FHIRReference", getter="recipient", setter="recipient", searcher=StringSearch("recipient"))
        request = EmbeddedAttribute(type="FHIRReference", getter="request", setter="request", searcher=StringSearch("request"))
        response = EmbeddedAttribute(type="FHIRReference", getter="response", setter="response", searcher=StringSearch("response"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class PaymentReconciliation(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    created = fields.DateTimeField(blank=False, required=True)
    detail = fields.EmbeddedDocumentListField("PaymentReconciliationDetail", blank=True, required=False)
    disposition = fields.CharField(blank=True, required=False)
    formCode = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    outcome = fields.CharField(blank=True, required=False)
    paymentAmount = fields.EmbeddedDocumentField("Money", blank=False, required=True)
    paymentDate = fields.DateTimeField(blank=False, required=True)
    paymentIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    paymentIssuer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    processNote = fields.EmbeddedDocumentListField("PaymentReconciliationProcessNote", blank=True, required=False)
    request = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    requestor = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        created = DateAttribute("created")
        detail = EmbeddedAttribute(type="PaymentReconciliationDetail", getter="detail", setter="detail", searcher=StringSearch("detail"))
        disposition = Attribute(getter="disposition", setter="disposition", searcher=StringSearch("disposition"))
        formCode = EmbeddedAttribute(type="CodeableConcept", getter="formCode", setter="formCode", searcher=StringSearch("formCode"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        outcome = Attribute(getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        paymentAmount = EmbeddedAttribute(type="Money", getter="paymentAmount", setter="paymentAmount", searcher=StringSearch("paymentAmount"))
        paymentDate = DateAttribute("paymentDate")
        paymentIdentifier = EmbeddedAttribute(type="Identifier", getter="paymentIdentifier", setter="paymentIdentifier", searcher=StringSearch("paymentIdentifier"))
        paymentIssuer = EmbeddedAttribute(type="FHIRReference", getter="paymentIssuer", setter="paymentIssuer", searcher=StringSearch("paymentIssuer"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        processNote = EmbeddedAttribute(type="PaymentReconciliationProcessNote", getter="processNote", setter="processNote", searcher=StringSearch("processNote"))
        request = EmbeddedAttribute(type="FHIRReference", getter="request", setter="request", searcher=StringSearch("request"))
        requestor = EmbeddedAttribute(type="FHIRReference", getter="requestor", setter="requestor", searcher=StringSearch("requestor"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class PaymentReconciliationDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    payee = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    predecessor = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    request = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    response = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    responsible = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    submitter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="Money", getter="amount", setter="amount", searcher=StringSearch("amount"))
        date = DateAttribute("date")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        payee = EmbeddedAttribute(type="FHIRReference", getter="payee", setter="payee", searcher=StringSearch("payee"))
        predecessor = EmbeddedAttribute(type="Identifier", getter="predecessor", setter="predecessor", searcher=StringSearch("predecessor"))
        request = EmbeddedAttribute(type="FHIRReference", getter="request", setter="request", searcher=StringSearch("request"))
        response = EmbeddedAttribute(type="FHIRReference", getter="response", setter="response", searcher=StringSearch("response"))
        responsible = EmbeddedAttribute(type="FHIRReference", getter="responsible", setter="responsible", searcher=StringSearch("responsible"))
        submitter = EmbeddedAttribute(type="FHIRReference", getter="submitter", setter="submitter", searcher=StringSearch("submitter"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class PaymentReconciliationProcessNote(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class Period(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    end = fields.DateTimeField(blank=True, required=False)
    start = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        end = DateAttribute("end")
        start = DateAttribute("start")

class Person(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    address = fields.EmbeddedDocumentListField("Address", blank=True, required=False)
    birthDate = fields.DateTimeField(blank=True, required=False)
    gender = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    link = fields.EmbeddedDocumentListField("PersonLink", blank=True, required=False)
    managingOrganization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    name = fields.EmbeddedDocumentListField("HumanName", blank=True, required=False)
    photo = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        birthDate = DateAttribute("birthDate")
        gender = Attribute(getter="gender", setter="gender", searcher=StringSearch("gender"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        link = EmbeddedAttribute(type="PersonLink", getter="link", setter="link", searcher=StringSearch("link"))
        managingOrganization = EmbeddedAttribute(type="FHIRReference", getter="managingOrganization", setter="managingOrganization", searcher=StringSearch("managingOrganization"))
        name = EmbeddedAttribute(type="HumanName", getter="name", setter="name", searcher=StringSearch("name"))
        photo = EmbeddedAttribute(type="Attachment", getter="photo", setter="photo", searcher=StringSearch("photo"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class PersonLink(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    assurance = fields.CharField(blank=True, required=False)
    target = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        assurance = Attribute(getter="assurance", setter="assurance", searcher=StringSearch("assurance"))
        target = EmbeddedAttribute(type="FHIRReference", getter="target", setter="target", searcher=StringSearch("target"))

class PlanDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("PlanDefinitionAction", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    author = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    editor = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    endorser = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    goal = fields.EmbeddedDocumentListField("PlanDefinitionGoal", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    library = fields.ListField(fields.CharField(), blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    reviewer = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subjectCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subjectReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    subtitle = fields.CharField(blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    usage = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        action = EmbeddedAttribute(type="PlanDefinitionAction", getter="action", setter="action", searcher=StringSearch("action"))
        approvalDate = DateAttribute("approvalDate")
        author = EmbeddedAttribute(type="ContactDetail", getter="author", setter="author", searcher=StringSearch("author"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        editor = EmbeddedAttribute(type="ContactDetail", getter="editor", setter="editor", searcher=StringSearch("editor"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        endorser = EmbeddedAttribute(type="ContactDetail", getter="endorser", setter="endorser", searcher=StringSearch("endorser"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        goal = EmbeddedAttribute(type="PlanDefinitionGoal", getter="goal", setter="goal", searcher=StringSearch("goal"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        library = Attribute(getter="library", setter="library", searcher=StringSearch("library"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        reviewer = EmbeddedAttribute(type="ContactDetail", getter="reviewer", setter="reviewer", searcher=StringSearch("reviewer"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subjectCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="subjectCodeableConcept", setter="subjectCodeableConcept", searcher=StringSearch("subjectCodeableConcept"))
        subjectReference = EmbeddedAttribute(type="FHIRReference", getter="subjectReference", setter="subjectReference", searcher=StringSearch("subjectReference"))
        subtitle = Attribute(getter="subtitle", setter="subtitle", searcher=StringSearch("subtitle"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        usage = Attribute(getter="usage", setter="usage", searcher=StringSearch("usage"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class PlanDefinitionAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    cardinalityBehavior = fields.CharField(blank=True, required=False)
    code = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    condition = fields.EmbeddedDocumentListField("PlanDefinitionActionCondition", blank=True, required=False)
    definitionCanonical = fields.CharField(blank=True, required=False)
    definitionUri = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    documentation = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    dynamicValue = fields.EmbeddedDocumentListField("PlanDefinitionActionDynamicValue", blank=True, required=False)
    goalId = fields.ListField(fields.CharField(), blank=True, required=False)
    groupingBehavior = fields.CharField(blank=True, required=False)
    input = fields.EmbeddedDocumentListField("DataRequirement", blank=True, required=False)
    output = fields.EmbeddedDocumentListField("DataRequirement", blank=True, required=False)
    participant = fields.EmbeddedDocumentListField("PlanDefinitionActionParticipant", blank=True, required=False)
    precheckBehavior = fields.CharField(blank=True, required=False)
    prefix = fields.CharField(blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    relatedAction = fields.EmbeddedDocumentListField("PlanDefinitionActionRelatedAction", blank=True, required=False)
    requiredBehavior = fields.CharField(blank=True, required=False)
    selectionBehavior = fields.CharField(blank=True, required=False)
    subjectCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subjectReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    textEquivalent = fields.CharField(blank=True, required=False)
    timingAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    timingDateTime = fields.DateTimeField(blank=True, required=False)
    timingDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    timingPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    timingRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    timingTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    transform = fields.CharField(blank=True, required=False)
    trigger = fields.EmbeddedDocumentListField("TriggerDefinition", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        cardinalityBehavior = Attribute(getter="cardinalityBehavior", setter="cardinalityBehavior", searcher=StringSearch("cardinalityBehavior"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        condition = EmbeddedAttribute(type="PlanDefinitionActionCondition", getter="condition", setter="condition", searcher=StringSearch("condition"))
        definitionCanonical = Attribute(getter="definitionCanonical", setter="definitionCanonical", searcher=StringSearch("definitionCanonical"))
        definitionUri = Attribute(getter="definitionUri", setter="definitionUri", searcher=StringSearch("definitionUri"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        documentation = EmbeddedAttribute(type="RelatedArtifact", getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        dynamicValue = EmbeddedAttribute(type="PlanDefinitionActionDynamicValue", getter="dynamicValue", setter="dynamicValue", searcher=StringSearch("dynamicValue"))
        goalId = Attribute(getter="goalId", setter="goalId", searcher=StringSearch("goalId"))
        groupingBehavior = Attribute(getter="groupingBehavior", setter="groupingBehavior", searcher=StringSearch("groupingBehavior"))
        input = EmbeddedAttribute(type="DataRequirement", getter="input", setter="input", searcher=StringSearch("input"))
        output = EmbeddedAttribute(type="DataRequirement", getter="output", setter="output", searcher=StringSearch("output"))
        participant = EmbeddedAttribute(type="PlanDefinitionActionParticipant", getter="participant", setter="participant", searcher=StringSearch("participant"))
        precheckBehavior = Attribute(getter="precheckBehavior", setter="precheckBehavior", searcher=StringSearch("precheckBehavior"))
        prefix = Attribute(getter="prefix", setter="prefix", searcher=StringSearch("prefix"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        relatedAction = EmbeddedAttribute(type="PlanDefinitionActionRelatedAction", getter="relatedAction", setter="relatedAction", searcher=StringSearch("relatedAction"))
        requiredBehavior = Attribute(getter="requiredBehavior", setter="requiredBehavior", searcher=StringSearch("requiredBehavior"))
        selectionBehavior = Attribute(getter="selectionBehavior", setter="selectionBehavior", searcher=StringSearch("selectionBehavior"))
        subjectCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="subjectCodeableConcept", setter="subjectCodeableConcept", searcher=StringSearch("subjectCodeableConcept"))
        subjectReference = EmbeddedAttribute(type="FHIRReference", getter="subjectReference", setter="subjectReference", searcher=StringSearch("subjectReference"))
        textEquivalent = Attribute(getter="textEquivalent", setter="textEquivalent", searcher=StringSearch("textEquivalent"))
        timingAge = EmbeddedAttribute(type="Age", getter="timingAge", setter="timingAge", searcher=StringSearch("timingAge"))
        timingDateTime = DateAttribute("timingDateTime")
        timingDuration = EmbeddedAttribute(type="Duration", getter="timingDuration", setter="timingDuration", searcher=StringSearch("timingDuration"))
        timingPeriod = EmbeddedAttribute(type="Period", getter="timingPeriod", setter="timingPeriod", searcher=StringSearch("timingPeriod"))
        timingRange = EmbeddedAttribute(type="Range", getter="timingRange", setter="timingRange", searcher=StringSearch("timingRange"))
        timingTiming = EmbeddedAttribute(type="Timing", getter="timingTiming", setter="timingTiming", searcher=StringSearch("timingTiming"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        transform = Attribute(getter="transform", setter="transform", searcher=StringSearch("transform"))
        trigger = EmbeddedAttribute(type="TriggerDefinition", getter="trigger", setter="trigger", searcher=StringSearch("trigger"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class PlanDefinitionActionCondition(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    expression = fields.EmbeddedDocumentField("Expression", blank=True, required=False)
    kind = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        expression = EmbeddedAttribute(type="Expression", getter="expression", setter="expression", searcher=StringSearch("expression"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))

class PlanDefinitionActionDynamicValue(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    expression = fields.EmbeddedDocumentField("Expression", blank=True, required=False)
    path = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        expression = EmbeddedAttribute(type="Expression", getter="expression", setter="expression", searcher=StringSearch("expression"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))

class PlanDefinitionActionParticipant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class PlanDefinitionActionRelatedAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actionId = fields.CharField(blank=False, required=True)
    offsetDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    offsetRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    relationship = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actionId = Attribute(getter="actionId", setter="actionId", searcher=StringSearch("actionId"))
        offsetDuration = EmbeddedAttribute(type="Duration", getter="offsetDuration", setter="offsetDuration", searcher=StringSearch("offsetDuration"))
        offsetRange = EmbeddedAttribute(type="Range", getter="offsetRange", setter="offsetRange", searcher=StringSearch("offsetRange"))
        relationship = Attribute(getter="relationship", setter="relationship", searcher=StringSearch("relationship"))

class PlanDefinitionGoal(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    addresses = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    description = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    documentation = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    priority = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    start = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    target = fields.EmbeddedDocumentListField("PlanDefinitionGoalTarget", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        addresses = EmbeddedAttribute(type="CodeableConcept", getter="addresses", setter="addresses", searcher=StringSearch("addresses"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        description = EmbeddedAttribute(type="CodeableConcept", getter="description", setter="description", searcher=StringSearch("description"))
        documentation = EmbeddedAttribute(type="RelatedArtifact", getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        priority = EmbeddedAttribute(type="CodeableConcept", getter="priority", setter="priority", searcher=StringSearch("priority"))
        start = EmbeddedAttribute(type="CodeableConcept", getter="start", setter="start", searcher=StringSearch("start"))
        target = EmbeddedAttribute(type="PlanDefinitionGoalTarget", getter="target", setter="target", searcher=StringSearch("target"))

class PlanDefinitionGoalTarget(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    detailCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    detailQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    detailRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    due = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    measure = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        detailCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="detailCodeableConcept", setter="detailCodeableConcept", searcher=StringSearch("detailCodeableConcept"))
        detailQuantity = EmbeddedAttribute(type="Quantity", getter="detailQuantity", setter="detailQuantity", searcher=StringSearch("detailQuantity"))
        detailRange = EmbeddedAttribute(type="Range", getter="detailRange", setter="detailRange", searcher=StringSearch("detailRange"))
        due = EmbeddedAttribute(type="Duration", getter="due", setter="due", searcher=StringSearch("due"))
        measure = EmbeddedAttribute(type="CodeableConcept", getter="measure", setter="measure", searcher=StringSearch("measure"))

class Population(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    ageCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    ageRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    gender = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    physiologicalCondition = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    race = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        ageCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="ageCodeableConcept", setter="ageCodeableConcept", searcher=StringSearch("ageCodeableConcept"))
        ageRange = EmbeddedAttribute(type="Range", getter="ageRange", setter="ageRange", searcher=StringSearch("ageRange"))
        gender = EmbeddedAttribute(type="CodeableConcept", getter="gender", setter="gender", searcher=StringSearch("gender"))
        physiologicalCondition = EmbeddedAttribute(type="CodeableConcept", getter="physiologicalCondition", setter="physiologicalCondition", searcher=StringSearch("physiologicalCondition"))
        race = EmbeddedAttribute(type="CodeableConcept", getter="race", setter="race", searcher=StringSearch("race"))

class Practitioner(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    address = fields.EmbeddedDocumentListField("Address", blank=True, required=False)
    birthDate = fields.DateTimeField(blank=True, required=False)
    communication = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    gender = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    name = fields.EmbeddedDocumentListField("HumanName", blank=True, required=False)
    photo = fields.EmbeddedDocumentListField("Attachment", blank=True, required=False)
    qualification = fields.EmbeddedDocumentListField("PractitionerQualification", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        birthDate = DateAttribute("birthDate")
        communication = EmbeddedAttribute(type="CodeableConcept", getter="communication", setter="communication", searcher=StringSearch("communication"))
        gender = Attribute(getter="gender", setter="gender", searcher=StringSearch("gender"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        name = EmbeddedAttribute(type="HumanName", getter="name", setter="name", searcher=StringSearch("name"))
        photo = EmbeddedAttribute(type="Attachment", getter="photo", setter="photo", searcher=StringSearch("photo"))
        qualification = EmbeddedAttribute(type="PractitionerQualification", getter="qualification", setter="qualification", searcher=StringSearch("qualification"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class PractitionerQualification(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    issuer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        issuer = EmbeddedAttribute(type="FHIRReference", getter="issuer", setter="issuer", searcher=StringSearch("issuer"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))

class PractitionerRole(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    availabilityExceptions = fields.CharField(blank=True, required=False)
    availableTime = fields.EmbeddedDocumentListField("PractitionerRoleAvailableTime", blank=True, required=False)
    code = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    endpoint = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    healthcareService = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    location = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    notAvailable = fields.EmbeddedDocumentListField("PractitionerRoleNotAvailable", blank=True, required=False)
    organization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    practitioner = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    specialty = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        availabilityExceptions = Attribute(getter="availabilityExceptions", setter="availabilityExceptions", searcher=StringSearch("availabilityExceptions"))
        availableTime = EmbeddedAttribute(type="PractitionerRoleAvailableTime", getter="availableTime", setter="availableTime", searcher=StringSearch("availableTime"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        endpoint = EmbeddedAttribute(type="FHIRReference", getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        healthcareService = EmbeddedAttribute(type="FHIRReference", getter="healthcareService", setter="healthcareService", searcher=StringSearch("healthcareService"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        location = EmbeddedAttribute(type="FHIRReference", getter="location", setter="location", searcher=StringSearch("location"))
        notAvailable = EmbeddedAttribute(type="PractitionerRoleNotAvailable", getter="notAvailable", setter="notAvailable", searcher=StringSearch("notAvailable"))
        organization = EmbeddedAttribute(type="FHIRReference", getter="organization", setter="organization", searcher=StringSearch("organization"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        practitioner = EmbeddedAttribute(type="FHIRReference", getter="practitioner", setter="practitioner", searcher=StringSearch("practitioner"))
        specialty = EmbeddedAttribute(type="CodeableConcept", getter="specialty", setter="specialty", searcher=StringSearch("specialty"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class PractitionerRoleAvailableTime(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    allDay = fields.BooleanField(blank=True, required=False)
    availableEndTime = fields.DateTimeField(blank=True, required=False)
    availableStartTime = fields.DateTimeField(blank=True, required=False)
    daysOfWeek = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        allDay = Attribute(getter="allDay", setter="allDay", searcher=StringSearch("allDay"))
        availableEndTime = DateAttribute("availableEndTime")
        availableStartTime = DateAttribute("availableStartTime")
        daysOfWeek = Attribute(getter="daysOfWeek", setter="daysOfWeek", searcher=StringSearch("daysOfWeek"))

class PractitionerRoleNotAvailable(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=False, required=True)
    during = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        during = EmbeddedAttribute(type="Period", getter="during", setter="during", searcher=StringSearch("during"))

class Procedure(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    asserter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    complication = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    complicationDetail = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    focalDevice = fields.EmbeddedDocumentListField("ProcedureFocalDevice", blank=True, required=False)
    followUp = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    instantiatesCanonical = fields.ListField(fields.CharField(), blank=True, required=False)
    instantiatesUri = fields.ListField(fields.CharField(), blank=True, required=False)
    location = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    partOf = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    performedAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    performedDateTime = fields.DateTimeField(blank=True, required=False)
    performedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    performedRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    performedString = fields.CharField(blank=True, required=False)
    performer = fields.EmbeddedDocumentListField("ProcedurePerformer", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    recorder = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    report = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    usedCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    usedReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        asserter = EmbeddedAttribute(type="FHIRReference", getter="asserter", setter="asserter", searcher=StringSearch("asserter"))
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        complication = EmbeddedAttribute(type="CodeableConcept", getter="complication", setter="complication", searcher=StringSearch("complication"))
        complicationDetail = EmbeddedAttribute(type="FHIRReference", getter="complicationDetail", setter="complicationDetail", searcher=StringSearch("complicationDetail"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        focalDevice = EmbeddedAttribute(type="ProcedureFocalDevice", getter="focalDevice", setter="focalDevice", searcher=StringSearch("focalDevice"))
        followUp = EmbeddedAttribute(type="CodeableConcept", getter="followUp", setter="followUp", searcher=StringSearch("followUp"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        instantiatesCanonical = Attribute(getter="instantiatesCanonical", setter="instantiatesCanonical", searcher=StringSearch("instantiatesCanonical"))
        instantiatesUri = Attribute(getter="instantiatesUri", setter="instantiatesUri", searcher=StringSearch("instantiatesUri"))
        location = EmbeddedAttribute(type="FHIRReference", getter="location", setter="location", searcher=StringSearch("location"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        outcome = EmbeddedAttribute(type="CodeableConcept", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        performedAge = EmbeddedAttribute(type="Age", getter="performedAge", setter="performedAge", searcher=StringSearch("performedAge"))
        performedDateTime = DateAttribute("performedDateTime")
        performedPeriod = EmbeddedAttribute(type="Period", getter="performedPeriod", setter="performedPeriod", searcher=StringSearch("performedPeriod"))
        performedRange = EmbeddedAttribute(type="Range", getter="performedRange", setter="performedRange", searcher=StringSearch("performedRange"))
        performedString = Attribute(getter="performedString", setter="performedString", searcher=StringSearch("performedString"))
        performer = EmbeddedAttribute(type="ProcedurePerformer", getter="performer", setter="performer", searcher=StringSearch("performer"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        recorder = EmbeddedAttribute(type="FHIRReference", getter="recorder", setter="recorder", searcher=StringSearch("recorder"))
        report = EmbeddedAttribute(type="FHIRReference", getter="report", setter="report", searcher=StringSearch("report"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusReason = EmbeddedAttribute(type="CodeableConcept", getter="statusReason", setter="statusReason", searcher=StringSearch("statusReason"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        usedCode = EmbeddedAttribute(type="CodeableConcept", getter="usedCode", setter="usedCode", searcher=StringSearch("usedCode"))
        usedReference = EmbeddedAttribute(type="FHIRReference", getter="usedReference", setter="usedReference", searcher=StringSearch("usedReference"))

class ProcedureFocalDevice(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    manipulated = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="CodeableConcept", getter="action", setter="action", searcher=StringSearch("action"))
        manipulated = EmbeddedAttribute(type="FHIRReference", getter="manipulated", setter="manipulated", searcher=StringSearch("manipulated"))

class ProcedurePerformer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    function = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    onBehalfOf = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = EmbeddedAttribute(type="FHIRReference", getter="actor", setter="actor", searcher=StringSearch("actor"))
        function = EmbeddedAttribute(type="CodeableConcept", getter="function", setter="function", searcher=StringSearch("function"))
        onBehalfOf = EmbeddedAttribute(type="FHIRReference", getter="onBehalfOf", setter="onBehalfOf", searcher=StringSearch("onBehalfOf"))

class ProcedureRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    asNeededBoolean = fields.BooleanField(blank=True, required=False)
    asNeededCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    context = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    definition = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    doNotPerform = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    intent = fields.CharField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    occurrenceTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    performer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    performerType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    relevantHistory = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    replaces = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    requester = fields.EmbeddedDocumentField("ProcedureRequestRequester", blank=True, required=False)
    requisition = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    specimen = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    supportingInfo = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        asNeededBoolean = Attribute(getter="asNeededBoolean", setter="asNeededBoolean", searcher=StringSearch("asNeededBoolean"))
        asNeededCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="asNeededCodeableConcept", setter="asNeededCodeableConcept", searcher=StringSearch("asNeededCodeableConcept"))
        authoredOn = DateAttribute("authoredOn")
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        context = EmbeddedAttribute(type="FHIRReference", getter="context", setter="context", searcher=StringSearch("context"))
        definition = EmbeddedAttribute(type="FHIRReference", getter="definition", setter="definition", searcher=StringSearch("definition"))
        doNotPerform = Attribute(getter="doNotPerform", setter="doNotPerform", searcher=StringSearch("doNotPerform"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        intent = Attribute(getter="intent", setter="intent", searcher=StringSearch("intent"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        occurrenceTiming = EmbeddedAttribute(type="Timing", getter="occurrenceTiming", setter="occurrenceTiming", searcher=StringSearch("occurrenceTiming"))
        performer = EmbeddedAttribute(type="FHIRReference", getter="performer", setter="performer", searcher=StringSearch("performer"))
        performerType = EmbeddedAttribute(type="CodeableConcept", getter="performerType", setter="performerType", searcher=StringSearch("performerType"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        relevantHistory = EmbeddedAttribute(type="FHIRReference", getter="relevantHistory", setter="relevantHistory", searcher=StringSearch("relevantHistory"))
        replaces = EmbeddedAttribute(type="FHIRReference", getter="replaces", setter="replaces", searcher=StringSearch("replaces"))
        requester = EmbeddedAttribute(type="ProcedureRequestRequester", getter="requester", setter="requester", searcher=StringSearch("requester"))
        requisition = EmbeddedAttribute(type="Identifier", getter="requisition", setter="requisition", searcher=StringSearch("requisition"))
        specimen = EmbeddedAttribute(type="FHIRReference", getter="specimen", setter="specimen", searcher=StringSearch("specimen"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        supportingInfo = EmbeddedAttribute(type="FHIRReference", getter="supportingInfo", setter="supportingInfo", searcher=StringSearch("supportingInfo"))

class ProcedureRequestRequester(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    agent = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    onBehalfOf = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        agent = EmbeddedAttribute(type="FHIRReference", getter="agent", setter="agent", searcher=StringSearch("agent"))
        onBehalfOf = EmbeddedAttribute(type="FHIRReference", getter="onBehalfOf", setter="onBehalfOf", searcher=StringSearch("onBehalfOf"))

class ProcessRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    action = fields.CharField(blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    exclude = fields.ListField(fields.CharField(), blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    include = fields.ListField(fields.CharField(), blank=True, required=False)
    item = fields.EmbeddedDocumentListField("ProcessRequestItem", blank=True, required=False)
    nullify = fields.BooleanField(blank=True, required=False)
    organization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    provider = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    reference = fields.CharField(blank=True, required=False)
    request = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    response = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    target = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        action = Attribute(getter="action", setter="action", searcher=StringSearch("action"))
        created = DateAttribute("created")
        exclude = Attribute(getter="exclude", setter="exclude", searcher=StringSearch("exclude"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        include = Attribute(getter="include", setter="include", searcher=StringSearch("include"))
        item = EmbeddedAttribute(type="ProcessRequestItem", getter="item", setter="item", searcher=StringSearch("item"))
        nullify = Attribute(getter="nullify", setter="nullify", searcher=StringSearch("nullify"))
        organization = EmbeddedAttribute(type="FHIRReference", getter="organization", setter="organization", searcher=StringSearch("organization"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        provider = EmbeddedAttribute(type="FHIRReference", getter="provider", setter="provider", searcher=StringSearch("provider"))
        reference = Attribute(getter="reference", setter="reference", searcher=StringSearch("reference"))
        request = EmbeddedAttribute(type="FHIRReference", getter="request", setter="request", searcher=StringSearch("request"))
        response = EmbeddedAttribute(type="FHIRReference", getter="response", setter="response", searcher=StringSearch("response"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        target = EmbeddedAttribute(type="FHIRReference", getter="target", setter="target", searcher=StringSearch("target"))

class ProcessRequestItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    sequenceLinkId = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        sequenceLinkId = Attribute(getter="sequenceLinkId", setter="sequenceLinkId", searcher=NumericSearch("sequenceLinkId"))

class ProcessResponse(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    communicationRequest = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    disposition = fields.CharField(blank=True, required=False)
    error = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    form = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    organization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    processNote = fields.EmbeddedDocumentListField("ProcessResponseProcessNote", blank=True, required=False)
    request = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    requestOrganization = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    requestProvider = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        communicationRequest = EmbeddedAttribute(type="FHIRReference", getter="communicationRequest", setter="communicationRequest", searcher=StringSearch("communicationRequest"))
        created = DateAttribute("created")
        disposition = Attribute(getter="disposition", setter="disposition", searcher=StringSearch("disposition"))
        error = EmbeddedAttribute(type="CodeableConcept", getter="error", setter="error", searcher=StringSearch("error"))
        form = EmbeddedAttribute(type="CodeableConcept", getter="form", setter="form", searcher=StringSearch("form"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        organization = EmbeddedAttribute(type="FHIRReference", getter="organization", setter="organization", searcher=StringSearch("organization"))
        outcome = EmbeddedAttribute(type="CodeableConcept", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        processNote = EmbeddedAttribute(type="ProcessResponseProcessNote", getter="processNote", setter="processNote", searcher=StringSearch("processNote"))
        request = EmbeddedAttribute(type="FHIRReference", getter="request", setter="request", searcher=StringSearch("request"))
        requestOrganization = EmbeddedAttribute(type="FHIRReference", getter="requestOrganization", setter="requestOrganization", searcher=StringSearch("requestOrganization"))
        requestProvider = EmbeddedAttribute(type="FHIRReference", getter="requestProvider", setter="requestProvider", searcher=StringSearch("requestProvider"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class ProcessResponseProcessNote(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ProdCharacteristic(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    color = fields.ListField(fields.CharField(), blank=True, required=False)
    depth = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    externalDiameter = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    height = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    image = fields.EmbeddedDocumentListField("Attachment", blank=True, required=False)
    imprint = fields.ListField(fields.CharField(), blank=True, required=False)
    nominalVolume = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    scoring = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    shape = fields.CharField(blank=True, required=False)
    weight = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    width = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        color = Attribute(getter="color", setter="color", searcher=StringSearch("color"))
        depth = EmbeddedAttribute(type="Quantity", getter="depth", setter="depth", searcher=StringSearch("depth"))
        externalDiameter = EmbeddedAttribute(type="Quantity", getter="externalDiameter", setter="externalDiameter", searcher=StringSearch("externalDiameter"))
        height = EmbeddedAttribute(type="Quantity", getter="height", setter="height", searcher=StringSearch("height"))
        image = EmbeddedAttribute(type="Attachment", getter="image", setter="image", searcher=StringSearch("image"))
        imprint = Attribute(getter="imprint", setter="imprint", searcher=StringSearch("imprint"))
        nominalVolume = EmbeddedAttribute(type="Quantity", getter="nominalVolume", setter="nominalVolume", searcher=StringSearch("nominalVolume"))
        scoring = EmbeddedAttribute(type="CodeableConcept", getter="scoring", setter="scoring", searcher=StringSearch("scoring"))
        shape = Attribute(getter="shape", setter="shape", searcher=StringSearch("shape"))
        weight = EmbeddedAttribute(type="Quantity", getter="weight", setter="weight", searcher=StringSearch("weight"))
        width = EmbeddedAttribute(type="Quantity", getter="width", setter="width", searcher=StringSearch("width"))

class ProductShelfLife(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Quantity", blank=False, required=True)
    specialPrecautionsForStorage = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        period = EmbeddedAttribute(type="Quantity", getter="period", setter="period", searcher=StringSearch("period"))
        specialPrecautionsForStorage = EmbeddedAttribute(type="CodeableConcept", getter="specialPrecautionsForStorage", setter="specialPrecautionsForStorage", searcher=StringSearch("specialPrecautionsForStorage"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class Provenance(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    activity = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    agent = fields.EmbeddedDocumentListField("ProvenanceAgent", blank=False, required=True)
    entity = fields.EmbeddedDocumentListField("ProvenanceEntity", blank=True, required=False)
    location = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    occurredDateTime = fields.DateTimeField(blank=True, required=False)
    occurredPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    policy = fields.ListField(fields.CharField(), blank=True, required=False)
    reason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    recorded = fields.DateTimeField(blank=False, required=True)
    signature = fields.EmbeddedDocumentListField("Signature", blank=True, required=False)
    target = fields.EmbeddedDocumentListField("FHIRReference", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        activity = EmbeddedAttribute(type="CodeableConcept", getter="activity", setter="activity", searcher=StringSearch("activity"))
        agent = EmbeddedAttribute(type="ProvenanceAgent", getter="agent", setter="agent", searcher=StringSearch("agent"))
        entity = EmbeddedAttribute(type="ProvenanceEntity", getter="entity", setter="entity", searcher=StringSearch("entity"))
        location = EmbeddedAttribute(type="FHIRReference", getter="location", setter="location", searcher=StringSearch("location"))
        occurredDateTime = DateAttribute("occurredDateTime")
        occurredPeriod = EmbeddedAttribute(type="Period", getter="occurredPeriod", setter="occurredPeriod", searcher=StringSearch("occurredPeriod"))
        policy = Attribute(getter="policy", setter="policy", searcher=StringSearch("policy"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        recorded = DateAttribute("recorded")
        signature = EmbeddedAttribute(type="Signature", getter="signature", setter="signature", searcher=StringSearch("signature"))
        target = EmbeddedAttribute(type="FHIRReference", getter="target", setter="target", searcher=StringSearch("target"))

class ProvenanceAgent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    onBehalfOf = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    role = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    who = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        onBehalfOf = EmbeddedAttribute(type="FHIRReference", getter="onBehalfOf", setter="onBehalfOf", searcher=StringSearch("onBehalfOf"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        who = EmbeddedAttribute(type="FHIRReference", getter="who", setter="who", searcher=StringSearch("who"))

class ProvenanceEntity(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    agent = fields.EmbeddedDocumentListField("ProvenanceAgent", blank=True, required=False)
    role = fields.CharField(blank=False, required=True)
    what = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        agent = EmbeddedAttribute(type="ProvenanceAgent", getter="agent", setter="agent", searcher=StringSearch("agent"))
        role = Attribute(getter="role", setter="role", searcher=StringSearch("role"))
        what = EmbeddedAttribute(type="FHIRReference", getter="what", setter="what", searcher=StringSearch("what"))

class Quantity(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    comparator = fields.CharField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    unit = fields.CharField(blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comparator = Attribute(getter="comparator", setter="comparator", searcher=StringSearch("comparator"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        unit = Attribute(getter="unit", setter="unit", searcher=StringSearch("unit"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class Questionnaire(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    code = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    derivedFrom = fields.ListField(fields.CharField(), blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    item = fields.EmbeddedDocumentListField("QuestionnaireItem", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subjectType = fields.ListField(fields.CharField(), blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        code = EmbeddedAttribute(type="Coding", getter="code", setter="code", searcher=StringSearch("code"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        derivedFrom = Attribute(getter="derivedFrom", setter="derivedFrom", searcher=StringSearch("derivedFrom"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        item = EmbeddedAttribute(type="QuestionnaireItem", getter="item", setter="item", searcher=StringSearch("item"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subjectType = Attribute(getter="subjectType", setter="subjectType", searcher=StringSearch("subjectType"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class QuestionnaireItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    answerOption = fields.EmbeddedDocumentListField("QuestionnaireItemAnswerOption", blank=True, required=False)
    answerValueSet = fields.CharField(blank=True, required=False)
    code = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    definition = fields.CharField(blank=True, required=False)
    enableBehavior = fields.CharField(blank=True, required=False)
    enableWhen = fields.EmbeddedDocumentListField("QuestionnaireItemEnableWhen", blank=True, required=False)
    initial = fields.EmbeddedDocumentListField("QuestionnaireItemInitial", blank=True, required=False)
    linkId = fields.CharField(blank=False, required=True)
    maxLength = fields.IntegerField(blank=True, required=False)
    prefix = fields.CharField(blank=True, required=False)
    readOnly = fields.BooleanField(blank=True, required=False)
    repeats = fields.BooleanField(blank=True, required=False)
    required = fields.BooleanField(blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        answerOption = EmbeddedAttribute(type="QuestionnaireItemAnswerOption", getter="answerOption", setter="answerOption", searcher=StringSearch("answerOption"))
        answerValueSet = Attribute(getter="answerValueSet", setter="answerValueSet", searcher=StringSearch("answerValueSet"))
        code = EmbeddedAttribute(type="Coding", getter="code", setter="code", searcher=StringSearch("code"))
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        enableBehavior = Attribute(getter="enableBehavior", setter="enableBehavior", searcher=StringSearch("enableBehavior"))
        enableWhen = EmbeddedAttribute(type="QuestionnaireItemEnableWhen", getter="enableWhen", setter="enableWhen", searcher=StringSearch("enableWhen"))
        initial = EmbeddedAttribute(type="QuestionnaireItemInitial", getter="initial", setter="initial", searcher=StringSearch("initial"))
        linkId = Attribute(getter="linkId", setter="linkId", searcher=StringSearch("linkId"))
        maxLength = Attribute(getter="maxLength", setter="maxLength", searcher=NumericSearch("maxLength"))
        prefix = Attribute(getter="prefix", setter="prefix", searcher=StringSearch("prefix"))
        readOnly = Attribute(getter="readOnly", setter="readOnly", searcher=StringSearch("readOnly"))
        repeats = Attribute(getter="repeats", setter="repeats", searcher=StringSearch("repeats"))
        required = Attribute(getter="required", setter="required", searcher=StringSearch("required"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class QuestionnaireItemAnswerOption(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    initialSelected = fields.BooleanField(blank=True, required=False)
    valueCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    valueDate = fields.DateTimeField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valueReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueTime = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        initialSelected = Attribute(getter="initialSelected", setter="initialSelected", searcher=StringSearch("initialSelected"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueDate = DateAttribute("valueDate")
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueReference = EmbeddedAttribute(type="FHIRReference", getter="valueReference", setter="valueReference", searcher=StringSearch("valueReference"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")

class QuestionnaireItemEnableWhen(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    answerBoolean = fields.BooleanField(blank=True, required=False)
    answerCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    answerDate = fields.DateTimeField(blank=True, required=False)
    answerDateTime = fields.DateTimeField(blank=True, required=False)
    answerDecimal = fields.FloatField(blank=True, required=False)
    answerInteger = fields.IntegerField(blank=True, required=False)
    answerQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    answerReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    answerString = fields.CharField(blank=True, required=False)
    answerTime = fields.DateTimeField(blank=True, required=False)
    operator = fields.CharField(blank=False, required=True)
    question = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        answerBoolean = Attribute(getter="answerBoolean", setter="answerBoolean", searcher=StringSearch("answerBoolean"))
        answerCoding = EmbeddedAttribute(type="Coding", getter="answerCoding", setter="answerCoding", searcher=StringSearch("answerCoding"))
        answerDate = DateAttribute("answerDate")
        answerDateTime = DateAttribute("answerDateTime")
        answerDecimal = Attribute(getter="answerDecimal", setter="answerDecimal", searcher=NumericSearch("answerDecimal"))
        answerInteger = Attribute(getter="answerInteger", setter="answerInteger", searcher=NumericSearch("answerInteger"))
        answerQuantity = EmbeddedAttribute(type="Quantity", getter="answerQuantity", setter="answerQuantity", searcher=StringSearch("answerQuantity"))
        answerReference = EmbeddedAttribute(type="FHIRReference", getter="answerReference", setter="answerReference", searcher=StringSearch("answerReference"))
        answerString = Attribute(getter="answerString", setter="answerString", searcher=StringSearch("answerString"))
        answerTime = DateAttribute("answerTime")
        operator = Attribute(getter="operator", setter="operator", searcher=StringSearch("operator"))
        question = Attribute(getter="question", setter="question", searcher=StringSearch("question"))

class QuestionnaireItemInitial(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    valueDate = fields.DateTimeField(blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valueDecimal = fields.FloatField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueTime = fields.DateTimeField(blank=True, required=False)
    valueUri = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueDate = DateAttribute("valueDate")
        valueDateTime = DateAttribute("valueDateTime")
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueReference = EmbeddedAttribute(type="FHIRReference", getter="valueReference", setter="valueReference", searcher=StringSearch("valueReference"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")
        valueUri = Attribute(getter="valueUri", setter="valueUri", searcher=StringSearch("valueUri"))

class QuestionnaireResponse(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    author = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    authored = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    item = fields.EmbeddedDocumentListField("QuestionnaireResponseItem", blank=True, required=False)
    partOf = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    questionnaire = fields.CharField(blank=True, required=False)
    source = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        author = EmbeddedAttribute(type="FHIRReference", getter="author", setter="author", searcher=StringSearch("author"))
        authored = DateAttribute("authored")
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        item = EmbeddedAttribute(type="QuestionnaireResponseItem", getter="item", setter="item", searcher=StringSearch("item"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        questionnaire = Attribute(getter="questionnaire", setter="questionnaire", searcher=StringSearch("questionnaire"))
        source = EmbeddedAttribute(type="FHIRReference", getter="source", setter="source", searcher=StringSearch("source"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))

class QuestionnaireResponseItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    answer = fields.EmbeddedDocumentListField("QuestionnaireResponseItemAnswer", blank=True, required=False)
    definition = fields.CharField(blank=True, required=False)
    linkId = fields.CharField(blank=False, required=True)
    text = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        answer = EmbeddedAttribute(type="QuestionnaireResponseItemAnswer", getter="answer", setter="answer", searcher=StringSearch("answer"))
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        linkId = Attribute(getter="linkId", setter="linkId", searcher=StringSearch("linkId"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))

class QuestionnaireResponseItemAnswer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    valueDate = fields.DateTimeField(blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valueDecimal = fields.FloatField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueTime = fields.DateTimeField(blank=True, required=False)
    valueUri = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueDate = DateAttribute("valueDate")
        valueDateTime = DateAttribute("valueDateTime")
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueReference = EmbeddedAttribute(type="FHIRReference", getter="valueReference", setter="valueReference", searcher=StringSearch("valueReference"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")
        valueUri = Attribute(getter="valueUri", setter="valueUri", searcher=StringSearch("valueUri"))

class Range(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    high = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    low = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        high = EmbeddedAttribute(type="Quantity", getter="high", setter="high", searcher=StringSearch("high"))
        low = EmbeddedAttribute(type="Quantity", getter="low", setter="low", searcher=StringSearch("low"))

class Ratio(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    denominator = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    numerator = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        denominator = EmbeddedAttribute(type="Quantity", getter="denominator", setter="denominator", searcher=StringSearch("denominator"))
        numerator = EmbeddedAttribute(type="Quantity", getter="numerator", setter="numerator", searcher=StringSearch("numerator"))

class Reference(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    reference = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        reference = Attribute(getter="reference", setter="reference", searcher=StringSearch("reference"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class ReferralRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    context = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    definition = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    groupIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    intent = fields.CharField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    recipient = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    relevantHistory = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    replaces = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    requester = fields.EmbeddedDocumentField("ReferralRequestRequester", blank=True, required=False)
    serviceRequested = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    specialty = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    supportingInfo = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authoredOn = DateAttribute("authoredOn")
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        context = EmbeddedAttribute(type="FHIRReference", getter="context", setter="context", searcher=StringSearch("context"))
        definition = EmbeddedAttribute(type="FHIRReference", getter="definition", setter="definition", searcher=StringSearch("definition"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        groupIdentifier = EmbeddedAttribute(type="Identifier", getter="groupIdentifier", setter="groupIdentifier", searcher=StringSearch("groupIdentifier"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        intent = Attribute(getter="intent", setter="intent", searcher=StringSearch("intent"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        recipient = EmbeddedAttribute(type="FHIRReference", getter="recipient", setter="recipient", searcher=StringSearch("recipient"))
        relevantHistory = EmbeddedAttribute(type="FHIRReference", getter="relevantHistory", setter="relevantHistory", searcher=StringSearch("relevantHistory"))
        replaces = EmbeddedAttribute(type="FHIRReference", getter="replaces", setter="replaces", searcher=StringSearch("replaces"))
        requester = EmbeddedAttribute(type="ReferralRequestRequester", getter="requester", setter="requester", searcher=StringSearch("requester"))
        serviceRequested = EmbeddedAttribute(type="CodeableConcept", getter="serviceRequested", setter="serviceRequested", searcher=StringSearch("serviceRequested"))
        specialty = EmbeddedAttribute(type="CodeableConcept", getter="specialty", setter="specialty", searcher=StringSearch("specialty"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        supportingInfo = EmbeddedAttribute(type="FHIRReference", getter="supportingInfo", setter="supportingInfo", searcher=StringSearch("supportingInfo"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ReferralRequestRequester(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    agent = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    onBehalfOf = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        agent = EmbeddedAttribute(type="FHIRReference", getter="agent", setter="agent", searcher=StringSearch("agent"))
        onBehalfOf = EmbeddedAttribute(type="FHIRReference", getter="onBehalfOf", setter="onBehalfOf", searcher=StringSearch("onBehalfOf"))

class RelatedArtifact(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    citation = fields.CharField(blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    document = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    label = fields.CharField(blank=True, required=False)
    resource = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        citation = Attribute(getter="citation", setter="citation", searcher=StringSearch("citation"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        document = EmbeddedAttribute(type="Attachment", getter="document", setter="document", searcher=StringSearch("document"))
        label = Attribute(getter="label", setter="label", searcher=StringSearch("label"))
        resource = Attribute(getter="resource", setter="resource", searcher=StringSearch("resource"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class RelatedPerson(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    address = fields.EmbeddedDocumentListField("Address", blank=True, required=False)
    birthDate = fields.DateTimeField(blank=True, required=False)
    communication = fields.EmbeddedDocumentListField("RelatedPersonCommunication", blank=True, required=False)
    gender = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    name = fields.EmbeddedDocumentListField("HumanName", blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    photo = fields.EmbeddedDocumentListField("Attachment", blank=True, required=False)
    relationship = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        birthDate = DateAttribute("birthDate")
        communication = EmbeddedAttribute(type="RelatedPersonCommunication", getter="communication", setter="communication", searcher=StringSearch("communication"))
        gender = Attribute(getter="gender", setter="gender", searcher=StringSearch("gender"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        name = EmbeddedAttribute(type="HumanName", getter="name", setter="name", searcher=StringSearch("name"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        photo = EmbeddedAttribute(type="Attachment", getter="photo", setter="photo", searcher=StringSearch("photo"))
        relationship = EmbeddedAttribute(type="CodeableConcept", getter="relationship", setter="relationship", searcher=StringSearch("relationship"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class RelatedPersonCommunication(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    language = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    preferred = fields.BooleanField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        language = EmbeddedAttribute(type="CodeableConcept", getter="language", setter="language", searcher=StringSearch("language"))
        preferred = Attribute(getter="preferred", setter="preferred", searcher=StringSearch("preferred"))

class RequestGroup(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("RequestGroupAction", blank=True, required=False)
    author = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    groupIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    instantiatesCanonical = fields.ListField(fields.CharField(), blank=True, required=False)
    instantiatesUri = fields.ListField(fields.CharField(), blank=True, required=False)
    intent = fields.CharField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    replaces = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        action = EmbeddedAttribute(type="RequestGroupAction", getter="action", setter="action", searcher=StringSearch("action"))
        author = EmbeddedAttribute(type="FHIRReference", getter="author", setter="author", searcher=StringSearch("author"))
        authoredOn = DateAttribute("authoredOn")
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        groupIdentifier = EmbeddedAttribute(type="Identifier", getter="groupIdentifier", setter="groupIdentifier", searcher=StringSearch("groupIdentifier"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        instantiatesCanonical = Attribute(getter="instantiatesCanonical", setter="instantiatesCanonical", searcher=StringSearch("instantiatesCanonical"))
        instantiatesUri = Attribute(getter="instantiatesUri", setter="instantiatesUri", searcher=StringSearch("instantiatesUri"))
        intent = Attribute(getter="intent", setter="intent", searcher=StringSearch("intent"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        replaces = EmbeddedAttribute(type="FHIRReference", getter="replaces", setter="replaces", searcher=StringSearch("replaces"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))

class RequestGroupAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    cardinalityBehavior = fields.CharField(blank=True, required=False)
    code = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    condition = fields.EmbeddedDocumentListField("RequestGroupActionCondition", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    documentation = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    groupingBehavior = fields.CharField(blank=True, required=False)
    participant = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    precheckBehavior = fields.CharField(blank=True, required=False)
    prefix = fields.CharField(blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    relatedAction = fields.EmbeddedDocumentListField("RequestGroupActionRelatedAction", blank=True, required=False)
    requiredBehavior = fields.CharField(blank=True, required=False)
    resource = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    selectionBehavior = fields.CharField(blank=True, required=False)
    textEquivalent = fields.CharField(blank=True, required=False)
    timingAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    timingDateTime = fields.DateTimeField(blank=True, required=False)
    timingDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    timingPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    timingRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    timingTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        cardinalityBehavior = Attribute(getter="cardinalityBehavior", setter="cardinalityBehavior", searcher=StringSearch("cardinalityBehavior"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        condition = EmbeddedAttribute(type="RequestGroupActionCondition", getter="condition", setter="condition", searcher=StringSearch("condition"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        documentation = EmbeddedAttribute(type="RelatedArtifact", getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        groupingBehavior = Attribute(getter="groupingBehavior", setter="groupingBehavior", searcher=StringSearch("groupingBehavior"))
        participant = EmbeddedAttribute(type="FHIRReference", getter="participant", setter="participant", searcher=StringSearch("participant"))
        precheckBehavior = Attribute(getter="precheckBehavior", setter="precheckBehavior", searcher=StringSearch("precheckBehavior"))
        prefix = Attribute(getter="prefix", setter="prefix", searcher=StringSearch("prefix"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        relatedAction = EmbeddedAttribute(type="RequestGroupActionRelatedAction", getter="relatedAction", setter="relatedAction", searcher=StringSearch("relatedAction"))
        requiredBehavior = Attribute(getter="requiredBehavior", setter="requiredBehavior", searcher=StringSearch("requiredBehavior"))
        resource = EmbeddedAttribute(type="FHIRReference", getter="resource", setter="resource", searcher=StringSearch("resource"))
        selectionBehavior = Attribute(getter="selectionBehavior", setter="selectionBehavior", searcher=StringSearch("selectionBehavior"))
        textEquivalent = Attribute(getter="textEquivalent", setter="textEquivalent", searcher=StringSearch("textEquivalent"))
        timingAge = EmbeddedAttribute(type="Age", getter="timingAge", setter="timingAge", searcher=StringSearch("timingAge"))
        timingDateTime = DateAttribute("timingDateTime")
        timingDuration = EmbeddedAttribute(type="Duration", getter="timingDuration", setter="timingDuration", searcher=StringSearch("timingDuration"))
        timingPeriod = EmbeddedAttribute(type="Period", getter="timingPeriod", setter="timingPeriod", searcher=StringSearch("timingPeriod"))
        timingRange = EmbeddedAttribute(type="Range", getter="timingRange", setter="timingRange", searcher=StringSearch("timingRange"))
        timingTiming = EmbeddedAttribute(type="Timing", getter="timingTiming", setter="timingTiming", searcher=StringSearch("timingTiming"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class RequestGroupActionCondition(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    expression = fields.EmbeddedDocumentField("Expression", blank=True, required=False)
    kind = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        expression = EmbeddedAttribute(type="Expression", getter="expression", setter="expression", searcher=StringSearch("expression"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))

class RequestGroupActionRelatedAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actionId = fields.CharField(blank=False, required=True)
    offsetDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    offsetRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    relationship = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actionId = Attribute(getter="actionId", setter="actionId", searcher=StringSearch("actionId"))
        offsetDuration = EmbeddedAttribute(type="Duration", getter="offsetDuration", setter="offsetDuration", searcher=StringSearch("offsetDuration"))
        offsetRange = EmbeddedAttribute(type="Range", getter="offsetRange", setter="offsetRange", searcher=StringSearch("offsetRange"))
        relationship = Attribute(getter="relationship", setter="relationship", searcher=StringSearch("relationship"))

class ResearchDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    author = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    comment = fields.ListField(fields.CharField(), blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    editor = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    endorser = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    exposure = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    exposureAlternative = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    library = fields.ListField(fields.CharField(), blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    population = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    reviewer = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    shortTitle = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subjectCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subjectReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    subtitle = fields.CharField(blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    usage = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        author = EmbeddedAttribute(type="ContactDetail", getter="author", setter="author", searcher=StringSearch("author"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        editor = EmbeddedAttribute(type="ContactDetail", getter="editor", setter="editor", searcher=StringSearch("editor"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        endorser = EmbeddedAttribute(type="ContactDetail", getter="endorser", setter="endorser", searcher=StringSearch("endorser"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        exposure = EmbeddedAttribute(type="FHIRReference", getter="exposure", setter="exposure", searcher=StringSearch("exposure"))
        exposureAlternative = EmbeddedAttribute(type="FHIRReference", getter="exposureAlternative", setter="exposureAlternative", searcher=StringSearch("exposureAlternative"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        library = Attribute(getter="library", setter="library", searcher=StringSearch("library"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        outcome = EmbeddedAttribute(type="FHIRReference", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        population = EmbeddedAttribute(type="FHIRReference", getter="population", setter="population", searcher=StringSearch("population"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        reviewer = EmbeddedAttribute(type="ContactDetail", getter="reviewer", setter="reviewer", searcher=StringSearch("reviewer"))
        shortTitle = Attribute(getter="shortTitle", setter="shortTitle", searcher=StringSearch("shortTitle"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subjectCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="subjectCodeableConcept", setter="subjectCodeableConcept", searcher=StringSearch("subjectCodeableConcept"))
        subjectReference = EmbeddedAttribute(type="FHIRReference", getter="subjectReference", setter="subjectReference", searcher=StringSearch("subjectReference"))
        subtitle = Attribute(getter="subtitle", setter="subtitle", searcher=StringSearch("subtitle"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        usage = Attribute(getter="usage", setter="usage", searcher=StringSearch("usage"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ResearchElementDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    author = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    characteristic = fields.EmbeddedDocumentListField("ResearchElementDefinitionCharacteristic", blank=False, required=True)
    comment = fields.ListField(fields.CharField(), blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    editor = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    endorser = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    library = fields.ListField(fields.CharField(), blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    reviewer = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    shortTitle = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subjectCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subjectReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    subtitle = fields.CharField(blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    usage = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    variableType = fields.CharField(blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        author = EmbeddedAttribute(type="ContactDetail", getter="author", setter="author", searcher=StringSearch("author"))
        characteristic = EmbeddedAttribute(type="ResearchElementDefinitionCharacteristic", getter="characteristic", setter="characteristic", searcher=StringSearch("characteristic"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        editor = EmbeddedAttribute(type="ContactDetail", getter="editor", setter="editor", searcher=StringSearch("editor"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        endorser = EmbeddedAttribute(type="ContactDetail", getter="endorser", setter="endorser", searcher=StringSearch("endorser"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        library = Attribute(getter="library", setter="library", searcher=StringSearch("library"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        reviewer = EmbeddedAttribute(type="ContactDetail", getter="reviewer", setter="reviewer", searcher=StringSearch("reviewer"))
        shortTitle = Attribute(getter="shortTitle", setter="shortTitle", searcher=StringSearch("shortTitle"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subjectCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="subjectCodeableConcept", setter="subjectCodeableConcept", searcher=StringSearch("subjectCodeableConcept"))
        subjectReference = EmbeddedAttribute(type="FHIRReference", getter="subjectReference", setter="subjectReference", searcher=StringSearch("subjectReference"))
        subtitle = Attribute(getter="subtitle", setter="subtitle", searcher=StringSearch("subtitle"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        usage = Attribute(getter="usage", setter="usage", searcher=StringSearch("usage"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        variableType = Attribute(getter="variableType", setter="variableType", searcher=StringSearch("variableType"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ResearchElementDefinitionCharacteristic(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    definitionCanonical = fields.CharField(blank=True, required=False)
    definitionCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    definitionDataRequirement = fields.EmbeddedDocumentField("DataRequirement", blank=True, required=False)
    definitionExpression = fields.EmbeddedDocumentField("Expression", blank=True, required=False)
    exclude = fields.BooleanField(blank=True, required=False)
    participantEffectiveDateTime = fields.DateTimeField(blank=True, required=False)
    participantEffectiveDescription = fields.CharField(blank=True, required=False)
    participantEffectiveDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    participantEffectiveGroupMeasure = fields.CharField(blank=True, required=False)
    participantEffectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    participantEffectiveTimeFromStart = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    participantEffectiveTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    studyEffectiveDateTime = fields.DateTimeField(blank=True, required=False)
    studyEffectiveDescription = fields.CharField(blank=True, required=False)
    studyEffectiveDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    studyEffectiveGroupMeasure = fields.CharField(blank=True, required=False)
    studyEffectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    studyEffectiveTimeFromStart = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    studyEffectiveTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    unitOfMeasure = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    usageContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        definitionCanonical = Attribute(getter="definitionCanonical", setter="definitionCanonical", searcher=StringSearch("definitionCanonical"))
        definitionCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="definitionCodeableConcept", setter="definitionCodeableConcept", searcher=StringSearch("definitionCodeableConcept"))
        definitionDataRequirement = EmbeddedAttribute(type="DataRequirement", getter="definitionDataRequirement", setter="definitionDataRequirement", searcher=StringSearch("definitionDataRequirement"))
        definitionExpression = EmbeddedAttribute(type="Expression", getter="definitionExpression", setter="definitionExpression", searcher=StringSearch("definitionExpression"))
        exclude = Attribute(getter="exclude", setter="exclude", searcher=StringSearch("exclude"))
        participantEffectiveDateTime = DateAttribute("participantEffectiveDateTime")
        participantEffectiveDescription = Attribute(getter="participantEffectiveDescription", setter="participantEffectiveDescription", searcher=StringSearch("participantEffectiveDescription"))
        participantEffectiveDuration = EmbeddedAttribute(type="Duration", getter="participantEffectiveDuration", setter="participantEffectiveDuration", searcher=StringSearch("participantEffectiveDuration"))
        participantEffectiveGroupMeasure = Attribute(getter="participantEffectiveGroupMeasure", setter="participantEffectiveGroupMeasure", searcher=StringSearch("participantEffectiveGroupMeasure"))
        participantEffectivePeriod = EmbeddedAttribute(type="Period", getter="participantEffectivePeriod", setter="participantEffectivePeriod", searcher=StringSearch("participantEffectivePeriod"))
        participantEffectiveTimeFromStart = EmbeddedAttribute(type="Duration", getter="participantEffectiveTimeFromStart", setter="participantEffectiveTimeFromStart", searcher=StringSearch("participantEffectiveTimeFromStart"))
        participantEffectiveTiming = EmbeddedAttribute(type="Timing", getter="participantEffectiveTiming", setter="participantEffectiveTiming", searcher=StringSearch("participantEffectiveTiming"))
        studyEffectiveDateTime = DateAttribute("studyEffectiveDateTime")
        studyEffectiveDescription = Attribute(getter="studyEffectiveDescription", setter="studyEffectiveDescription", searcher=StringSearch("studyEffectiveDescription"))
        studyEffectiveDuration = EmbeddedAttribute(type="Duration", getter="studyEffectiveDuration", setter="studyEffectiveDuration", searcher=StringSearch("studyEffectiveDuration"))
        studyEffectiveGroupMeasure = Attribute(getter="studyEffectiveGroupMeasure", setter="studyEffectiveGroupMeasure", searcher=StringSearch("studyEffectiveGroupMeasure"))
        studyEffectivePeriod = EmbeddedAttribute(type="Period", getter="studyEffectivePeriod", setter="studyEffectivePeriod", searcher=StringSearch("studyEffectivePeriod"))
        studyEffectiveTimeFromStart = EmbeddedAttribute(type="Duration", getter="studyEffectiveTimeFromStart", setter="studyEffectiveTimeFromStart", searcher=StringSearch("studyEffectiveTimeFromStart"))
        studyEffectiveTiming = EmbeddedAttribute(type="Timing", getter="studyEffectiveTiming", setter="studyEffectiveTiming", searcher=StringSearch("studyEffectiveTiming"))
        unitOfMeasure = EmbeddedAttribute(type="CodeableConcept", getter="unitOfMeasure", setter="unitOfMeasure", searcher=StringSearch("unitOfMeasure"))
        usageContext = EmbeddedAttribute(type="UsageContext", getter="usageContext", setter="usageContext", searcher=StringSearch("usageContext"))

class ResearchStudy(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    arm = fields.EmbeddedDocumentListField("ResearchStudyArm", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    condition = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    enrollment = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    focus = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    keyword = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    location = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    objective = fields.EmbeddedDocumentListField("ResearchStudyObjective", blank=True, required=False)
    partOf = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    phase = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    primaryPurposeType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    principalInvestigator = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    protocol = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    reasonStopped = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    site = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    sponsor = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        arm = EmbeddedAttribute(type="ResearchStudyArm", getter="arm", setter="arm", searcher=StringSearch("arm"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        condition = EmbeddedAttribute(type="CodeableConcept", getter="condition", setter="condition", searcher=StringSearch("condition"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        enrollment = EmbeddedAttribute(type="FHIRReference", getter="enrollment", setter="enrollment", searcher=StringSearch("enrollment"))
        focus = EmbeddedAttribute(type="CodeableConcept", getter="focus", setter="focus", searcher=StringSearch("focus"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        keyword = EmbeddedAttribute(type="CodeableConcept", getter="keyword", setter="keyword", searcher=StringSearch("keyword"))
        location = EmbeddedAttribute(type="CodeableConcept", getter="location", setter="location", searcher=StringSearch("location"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        objective = EmbeddedAttribute(type="ResearchStudyObjective", getter="objective", setter="objective", searcher=StringSearch("objective"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        phase = EmbeddedAttribute(type="CodeableConcept", getter="phase", setter="phase", searcher=StringSearch("phase"))
        primaryPurposeType = EmbeddedAttribute(type="CodeableConcept", getter="primaryPurposeType", setter="primaryPurposeType", searcher=StringSearch("primaryPurposeType"))
        principalInvestigator = EmbeddedAttribute(type="FHIRReference", getter="principalInvestigator", setter="principalInvestigator", searcher=StringSearch("principalInvestigator"))
        protocol = EmbeddedAttribute(type="FHIRReference", getter="protocol", setter="protocol", searcher=StringSearch("protocol"))
        reasonStopped = EmbeddedAttribute(type="CodeableConcept", getter="reasonStopped", setter="reasonStopped", searcher=StringSearch("reasonStopped"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        site = EmbeddedAttribute(type="FHIRReference", getter="site", setter="site", searcher=StringSearch("site"))
        sponsor = EmbeddedAttribute(type="FHIRReference", getter="sponsor", setter="sponsor", searcher=StringSearch("sponsor"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))

class ResearchStudyArm(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ResearchStudyObjective(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ResearchSubject(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    actualArm = fields.CharField(blank=True, required=False)
    assignedArm = fields.CharField(blank=True, required=False)
    consent = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    individual = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    study = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        actualArm = Attribute(getter="actualArm", setter="actualArm", searcher=StringSearch("actualArm"))
        assignedArm = Attribute(getter="assignedArm", setter="assignedArm", searcher=StringSearch("assignedArm"))
        consent = EmbeddedAttribute(type="FHIRReference", getter="consent", setter="consent", searcher=StringSearch("consent"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        individual = EmbeddedAttribute(type="FHIRReference", getter="individual", setter="individual", searcher=StringSearch("individual"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        study = EmbeddedAttribute(type="FHIRReference", getter="study", setter="study", searcher=StringSearch("study"))

class Resource(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))

class RiskAssessment(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    basedOn = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    basis = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    condition = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    method = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    mitigation = fields.CharField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    parent = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    performer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    prediction = fields.EmbeddedDocumentListField("RiskAssessmentPrediction", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        basis = EmbeddedAttribute(type="FHIRReference", getter="basis", setter="basis", searcher=StringSearch("basis"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        condition = EmbeddedAttribute(type="FHIRReference", getter="condition", setter="condition", searcher=StringSearch("condition"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        method = EmbeddedAttribute(type="CodeableConcept", getter="method", setter="method", searcher=StringSearch("method"))
        mitigation = Attribute(getter="mitigation", setter="mitigation", searcher=StringSearch("mitigation"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        parent = EmbeddedAttribute(type="FHIRReference", getter="parent", setter="parent", searcher=StringSearch("parent"))
        performer = EmbeddedAttribute(type="FHIRReference", getter="performer", setter="performer", searcher=StringSearch("performer"))
        prediction = EmbeddedAttribute(type="RiskAssessmentPrediction", getter="prediction", setter="prediction", searcher=StringSearch("prediction"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))

class RiskAssessmentPrediction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    probabilityDecimal = fields.FloatField(blank=True, required=False)
    probabilityRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    qualitativeRisk = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    rationale = fields.CharField(blank=True, required=False)
    relativeRisk = fields.FloatField(blank=True, required=False)
    whenPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    whenRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        outcome = EmbeddedAttribute(type="CodeableConcept", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        probabilityDecimal = Attribute(getter="probabilityDecimal", setter="probabilityDecimal", searcher=NumericSearch("probabilityDecimal"))
        probabilityRange = EmbeddedAttribute(type="Range", getter="probabilityRange", setter="probabilityRange", searcher=StringSearch("probabilityRange"))
        qualitativeRisk = EmbeddedAttribute(type="CodeableConcept", getter="qualitativeRisk", setter="qualitativeRisk", searcher=StringSearch("qualitativeRisk"))
        rationale = Attribute(getter="rationale", setter="rationale", searcher=StringSearch("rationale"))
        relativeRisk = Attribute(getter="relativeRisk", setter="relativeRisk", searcher=NumericSearch("relativeRisk"))
        whenPeriod = EmbeddedAttribute(type="Period", getter="whenPeriod", setter="whenPeriod", searcher=StringSearch("whenPeriod"))
        whenRange = EmbeddedAttribute(type="Range", getter="whenRange", setter="whenRange", searcher=StringSearch("whenRange"))

class RiskEvidenceSynthesis(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    author = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    certainty = fields.EmbeddedDocumentListField("RiskEvidenceSynthesisCertainty", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    editor = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    endorser = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    exposure = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    population = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    publisher = fields.CharField(blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    reviewer = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    riskEstimate = fields.EmbeddedDocumentField("RiskEvidenceSynthesisRiskEstimate", blank=True, required=False)
    sampleSize = fields.EmbeddedDocumentField("RiskEvidenceSynthesisSampleSize", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    studyType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    synthesisType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        author = EmbeddedAttribute(type="ContactDetail", getter="author", setter="author", searcher=StringSearch("author"))
        certainty = EmbeddedAttribute(type="RiskEvidenceSynthesisCertainty", getter="certainty", setter="certainty", searcher=StringSearch("certainty"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        editor = EmbeddedAttribute(type="ContactDetail", getter="editor", setter="editor", searcher=StringSearch("editor"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        endorser = EmbeddedAttribute(type="ContactDetail", getter="endorser", setter="endorser", searcher=StringSearch("endorser"))
        exposure = EmbeddedAttribute(type="FHIRReference", getter="exposure", setter="exposure", searcher=StringSearch("exposure"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        outcome = EmbeddedAttribute(type="FHIRReference", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        population = EmbeddedAttribute(type="FHIRReference", getter="population", setter="population", searcher=StringSearch("population"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        reviewer = EmbeddedAttribute(type="ContactDetail", getter="reviewer", setter="reviewer", searcher=StringSearch("reviewer"))
        riskEstimate = EmbeddedAttribute(type="RiskEvidenceSynthesisRiskEstimate", getter="riskEstimate", setter="riskEstimate", searcher=StringSearch("riskEstimate"))
        sampleSize = EmbeddedAttribute(type="RiskEvidenceSynthesisSampleSize", getter="sampleSize", setter="sampleSize", searcher=StringSearch("sampleSize"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        studyType = EmbeddedAttribute(type="CodeableConcept", getter="studyType", setter="studyType", searcher=StringSearch("studyType"))
        synthesisType = EmbeddedAttribute(type="CodeableConcept", getter="synthesisType", setter="synthesisType", searcher=StringSearch("synthesisType"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class RiskEvidenceSynthesisCertainty(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    certaintySubcomponent = fields.EmbeddedDocumentListField("RiskEvidenceSynthesisCertaintyCertaintySubcomponent", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    rating = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        certaintySubcomponent = EmbeddedAttribute(type="RiskEvidenceSynthesisCertaintyCertaintySubcomponent", getter="certaintySubcomponent", setter="certaintySubcomponent", searcher=StringSearch("certaintySubcomponent"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        rating = EmbeddedAttribute(type="CodeableConcept", getter="rating", setter="rating", searcher=StringSearch("rating"))

class RiskEvidenceSynthesisCertaintyCertaintySubcomponent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    rating = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        rating = EmbeddedAttribute(type="CodeableConcept", getter="rating", setter="rating", searcher=StringSearch("rating"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class RiskEvidenceSynthesisRiskEstimate(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    denominatorCount = fields.IntegerField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    numeratorCount = fields.IntegerField(blank=True, required=False)
    precisionEstimate = fields.EmbeddedDocumentListField("RiskEvidenceSynthesisRiskEstimatePrecisionEstimate", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    unitOfMeasure = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        denominatorCount = Attribute(getter="denominatorCount", setter="denominatorCount", searcher=NumericSearch("denominatorCount"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        numeratorCount = Attribute(getter="numeratorCount", setter="numeratorCount", searcher=NumericSearch("numeratorCount"))
        precisionEstimate = EmbeddedAttribute(type="RiskEvidenceSynthesisRiskEstimatePrecisionEstimate", getter="precisionEstimate", setter="precisionEstimate", searcher=StringSearch("precisionEstimate"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        unitOfMeasure = EmbeddedAttribute(type="CodeableConcept", getter="unitOfMeasure", setter="unitOfMeasure", searcher=StringSearch("unitOfMeasure"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class RiskEvidenceSynthesisRiskEstimatePrecisionEstimate(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    from_ = fields.FloatField(blank=True, required=False)
    level = fields.FloatField(blank=True, required=False)
    to = fields.FloatField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        from_ = Attribute(getter="from_", setter="from_", searcher=NumericSearch("from_"))
        level = Attribute(getter="level", setter="level", searcher=NumericSearch("level"))
        to = Attribute(getter="to", setter="to", searcher=NumericSearch("to"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class RiskEvidenceSynthesisSampleSize(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    numberOfParticipants = fields.IntegerField(blank=True, required=False)
    numberOfStudies = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        numberOfParticipants = Attribute(getter="numberOfParticipants", setter="numberOfParticipants", searcher=NumericSearch("numberOfParticipants"))
        numberOfStudies = Attribute(getter="numberOfStudies", setter="numberOfStudies", searcher=NumericSearch("numberOfStudies"))

class SampledData(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    data = fields.CharField(blank=True, required=False)
    dimensions = fields.IntegerField(blank=False, required=True)
    factor = fields.FloatField(blank=True, required=False)
    lowerLimit = fields.FloatField(blank=True, required=False)
    origin = fields.EmbeddedDocumentField("Quantity", blank=False, required=True)
    period = fields.FloatField(blank=False, required=True)
    upperLimit = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        data = Attribute(getter="data", setter="data", searcher=StringSearch("data"))
        dimensions = Attribute(getter="dimensions", setter="dimensions", searcher=NumericSearch("dimensions"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        lowerLimit = Attribute(getter="lowerLimit", setter="lowerLimit", searcher=NumericSearch("lowerLimit"))
        origin = EmbeddedAttribute(type="Quantity", getter="origin", setter="origin", searcher=StringSearch("origin"))
        period = Attribute(getter="period", setter="period", searcher=NumericSearch("period"))
        upperLimit = Attribute(getter="upperLimit", setter="upperLimit", searcher=NumericSearch("upperLimit"))

class Schedule(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    actor = fields.EmbeddedDocumentListField("FHIRReference", blank=False, required=True)
    comment = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    planningHorizon = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    serviceCategory = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    serviceType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    specialty = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        actor = EmbeddedAttribute(type="FHIRReference", getter="actor", setter="actor", searcher=StringSearch("actor"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        planningHorizon = EmbeddedAttribute(type="Period", getter="planningHorizon", setter="planningHorizon", searcher=StringSearch("planningHorizon"))
        serviceCategory = EmbeddedAttribute(type="CodeableConcept", getter="serviceCategory", setter="serviceCategory", searcher=StringSearch("serviceCategory"))
        serviceType = EmbeddedAttribute(type="CodeableConcept", getter="serviceType", setter="serviceType", searcher=StringSearch("serviceType"))
        specialty = EmbeddedAttribute(type="CodeableConcept", getter="specialty", setter="specialty", searcher=StringSearch("specialty"))

class SearchParameter(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    base = fields.ListField(fields.CharField(), blank=False, required=True)
    chain = fields.ListField(fields.CharField(), blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    comparator = fields.ListField(fields.CharField(), blank=True, required=False)
    component = fields.EmbeddedDocumentListField("SearchParameterComponent", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    derivedFrom = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=False, required=True)
    experimental = fields.BooleanField(blank=True, required=False)
    expression = fields.CharField(blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    modifier = fields.ListField(fields.CharField(), blank=True, required=False)
    multipleAnd = fields.BooleanField(blank=True, required=False)
    multipleOr = fields.BooleanField(blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    target = fields.ListField(fields.CharField(), blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=False, required=True)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    xpath = fields.CharField(blank=True, required=False)
    xpathUsage = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        base = Attribute(getter="base", setter="base", searcher=StringSearch("base"))
        chain = Attribute(getter="chain", setter="chain", searcher=StringSearch("chain"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comparator = Attribute(getter="comparator", setter="comparator", searcher=StringSearch("comparator"))
        component = EmbeddedAttribute(type="SearchParameterComponent", getter="component", setter="component", searcher=StringSearch("component"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        date = DateAttribute("date")
        derivedFrom = Attribute(getter="derivedFrom", setter="derivedFrom", searcher=StringSearch("derivedFrom"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        modifier = Attribute(getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        multipleAnd = Attribute(getter="multipleAnd", setter="multipleAnd", searcher=StringSearch("multipleAnd"))
        multipleOr = Attribute(getter="multipleOr", setter="multipleOr", searcher=StringSearch("multipleOr"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        target = Attribute(getter="target", setter="target", searcher=StringSearch("target"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))
        xpath = Attribute(getter="xpath", setter="xpath", searcher=StringSearch("xpath"))
        xpathUsage = Attribute(getter="xpathUsage", setter="xpathUsage", searcher=StringSearch("xpathUsage"))

class SearchParameterComponent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    definition = fields.CharField(blank=False, required=True)
    expression = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))

class Sequence(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    coordinateSystem = fields.IntegerField(blank=False, required=True)
    device = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    observedSeq = fields.CharField(blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    performer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    pointer = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    quality = fields.EmbeddedDocumentListField("SequenceQuality", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    readCoverage = fields.IntegerField(blank=True, required=False)
    referenceSeq = fields.EmbeddedDocumentField("SequenceReferenceSeq", blank=True, required=False)
    repository = fields.EmbeddedDocumentListField("SequenceRepository", blank=True, required=False)
    specimen = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    variant = fields.EmbeddedDocumentListField("SequenceVariant", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        coordinateSystem = Attribute(getter="coordinateSystem", setter="coordinateSystem", searcher=NumericSearch("coordinateSystem"))
        device = EmbeddedAttribute(type="FHIRReference", getter="device", setter="device", searcher=StringSearch("device"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        observedSeq = Attribute(getter="observedSeq", setter="observedSeq", searcher=StringSearch("observedSeq"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        performer = EmbeddedAttribute(type="FHIRReference", getter="performer", setter="performer", searcher=StringSearch("performer"))
        pointer = EmbeddedAttribute(type="FHIRReference", getter="pointer", setter="pointer", searcher=StringSearch("pointer"))
        quality = EmbeddedAttribute(type="SequenceQuality", getter="quality", setter="quality", searcher=StringSearch("quality"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        readCoverage = Attribute(getter="readCoverage", setter="readCoverage", searcher=NumericSearch("readCoverage"))
        referenceSeq = EmbeddedAttribute(type="SequenceReferenceSeq", getter="referenceSeq", setter="referenceSeq", searcher=StringSearch("referenceSeq"))
        repository = EmbeddedAttribute(type="SequenceRepository", getter="repository", setter="repository", searcher=StringSearch("repository"))
        specimen = EmbeddedAttribute(type="FHIRReference", getter="specimen", setter="specimen", searcher=StringSearch("specimen"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        variant = EmbeddedAttribute(type="SequenceVariant", getter="variant", setter="variant", searcher=StringSearch("variant"))

class SequenceQuality(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    end = fields.IntegerField(blank=True, required=False)
    fScore = fields.FloatField(blank=True, required=False)
    gtFP = fields.FloatField(blank=True, required=False)
    method = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    precision = fields.FloatField(blank=True, required=False)
    queryFP = fields.FloatField(blank=True, required=False)
    queryTP = fields.FloatField(blank=True, required=False)
    recall = fields.FloatField(blank=True, required=False)
    score = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    standardSequence = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    start = fields.IntegerField(blank=True, required=False)
    truthFN = fields.FloatField(blank=True, required=False)
    truthTP = fields.FloatField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        end = Attribute(getter="end", setter="end", searcher=NumericSearch("end"))
        fScore = Attribute(getter="fScore", setter="fScore", searcher=NumericSearch("fScore"))
        gtFP = Attribute(getter="gtFP", setter="gtFP", searcher=NumericSearch("gtFP"))
        method = EmbeddedAttribute(type="CodeableConcept", getter="method", setter="method", searcher=StringSearch("method"))
        precision = Attribute(getter="precision", setter="precision", searcher=NumericSearch("precision"))
        queryFP = Attribute(getter="queryFP", setter="queryFP", searcher=NumericSearch("queryFP"))
        queryTP = Attribute(getter="queryTP", setter="queryTP", searcher=NumericSearch("queryTP"))
        recall = Attribute(getter="recall", setter="recall", searcher=NumericSearch("recall"))
        score = EmbeddedAttribute(type="Quantity", getter="score", setter="score", searcher=StringSearch("score"))
        standardSequence = EmbeddedAttribute(type="CodeableConcept", getter="standardSequence", setter="standardSequence", searcher=StringSearch("standardSequence"))
        start = Attribute(getter="start", setter="start", searcher=NumericSearch("start"))
        truthFN = Attribute(getter="truthFN", setter="truthFN", searcher=NumericSearch("truthFN"))
        truthTP = Attribute(getter="truthTP", setter="truthTP", searcher=NumericSearch("truthTP"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class SequenceReferenceSeq(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    chromosome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    genomeBuild = fields.CharField(blank=True, required=False)
    referenceSeqId = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    referenceSeqPointer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    referenceSeqString = fields.CharField(blank=True, required=False)
    strand = fields.IntegerField(blank=True, required=False)
    windowEnd = fields.IntegerField(blank=False, required=True)
    windowStart = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        chromosome = EmbeddedAttribute(type="CodeableConcept", getter="chromosome", setter="chromosome", searcher=StringSearch("chromosome"))
        genomeBuild = Attribute(getter="genomeBuild", setter="genomeBuild", searcher=StringSearch("genomeBuild"))
        referenceSeqId = EmbeddedAttribute(type="CodeableConcept", getter="referenceSeqId", setter="referenceSeqId", searcher=StringSearch("referenceSeqId"))
        referenceSeqPointer = EmbeddedAttribute(type="FHIRReference", getter="referenceSeqPointer", setter="referenceSeqPointer", searcher=StringSearch("referenceSeqPointer"))
        referenceSeqString = Attribute(getter="referenceSeqString", setter="referenceSeqString", searcher=StringSearch("referenceSeqString"))
        strand = Attribute(getter="strand", setter="strand", searcher=NumericSearch("strand"))
        windowEnd = Attribute(getter="windowEnd", setter="windowEnd", searcher=NumericSearch("windowEnd"))
        windowStart = Attribute(getter="windowStart", setter="windowStart", searcher=NumericSearch("windowStart"))

class SequenceRepository(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    datasetId = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    readsetId = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    variantsetId = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        datasetId = Attribute(getter="datasetId", setter="datasetId", searcher=StringSearch("datasetId"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        readsetId = Attribute(getter="readsetId", setter="readsetId", searcher=StringSearch("readsetId"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        variantsetId = Attribute(getter="variantsetId", setter="variantsetId", searcher=StringSearch("variantsetId"))

class SequenceVariant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    cigar = fields.CharField(blank=True, required=False)
    end = fields.IntegerField(blank=True, required=False)
    observedAllele = fields.CharField(blank=True, required=False)
    referenceAllele = fields.CharField(blank=True, required=False)
    start = fields.IntegerField(blank=True, required=False)
    variantPointer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        cigar = Attribute(getter="cigar", setter="cigar", searcher=StringSearch("cigar"))
        end = Attribute(getter="end", setter="end", searcher=NumericSearch("end"))
        observedAllele = Attribute(getter="observedAllele", setter="observedAllele", searcher=StringSearch("observedAllele"))
        referenceAllele = Attribute(getter="referenceAllele", setter="referenceAllele", searcher=StringSearch("referenceAllele"))
        start = Attribute(getter="start", setter="start", searcher=NumericSearch("start"))
        variantPointer = EmbeddedAttribute(type="FHIRReference", getter="variantPointer", setter="variantPointer", searcher=StringSearch("variantPointer"))

class ServiceDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    contributor = fields.EmbeddedDocumentListField("Contributor", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    dataRequirement = fields.EmbeddedDocumentListField("DataRequirement", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    operationDefinition = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    trigger = fields.EmbeddedDocumentListField("TriggerDefinition", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    usage = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        contributor = EmbeddedAttribute(type="Contributor", getter="contributor", setter="contributor", searcher=StringSearch("contributor"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        dataRequirement = EmbeddedAttribute(type="DataRequirement", getter="dataRequirement", setter="dataRequirement", searcher=StringSearch("dataRequirement"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        operationDefinition = EmbeddedAttribute(type="FHIRReference", getter="operationDefinition", setter="operationDefinition", searcher=StringSearch("operationDefinition"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        trigger = EmbeddedAttribute(type="TriggerDefinition", getter="trigger", setter="trigger", searcher=StringSearch("trigger"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        usage = Attribute(getter="usage", setter="usage", searcher=StringSearch("usage"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ServiceRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    asNeededBoolean = fields.BooleanField(blank=True, required=False)
    asNeededCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    doNotPerform = fields.BooleanField(blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    instantiatesCanonical = fields.ListField(fields.CharField(), blank=True, required=False)
    instantiatesUri = fields.ListField(fields.CharField(), blank=True, required=False)
    insurance = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    intent = fields.CharField(blank=False, required=True)
    locationCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    locationReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    occurrenceTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    orderDetail = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    patientInstruction = fields.CharField(blank=True, required=False)
    performer = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    performerType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    quantityQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    quantityRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    quantityRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    relevantHistory = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    replaces = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    requester = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    requisition = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    specimen = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    supportingInfo = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        asNeededBoolean = Attribute(getter="asNeededBoolean", setter="asNeededBoolean", searcher=StringSearch("asNeededBoolean"))
        asNeededCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="asNeededCodeableConcept", setter="asNeededCodeableConcept", searcher=StringSearch("asNeededCodeableConcept"))
        authoredOn = DateAttribute("authoredOn")
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        doNotPerform = Attribute(getter="doNotPerform", setter="doNotPerform", searcher=StringSearch("doNotPerform"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        instantiatesCanonical = Attribute(getter="instantiatesCanonical", setter="instantiatesCanonical", searcher=StringSearch("instantiatesCanonical"))
        instantiatesUri = Attribute(getter="instantiatesUri", setter="instantiatesUri", searcher=StringSearch("instantiatesUri"))
        insurance = EmbeddedAttribute(type="FHIRReference", getter="insurance", setter="insurance", searcher=StringSearch("insurance"))
        intent = Attribute(getter="intent", setter="intent", searcher=StringSearch("intent"))
        locationCode = EmbeddedAttribute(type="CodeableConcept", getter="locationCode", setter="locationCode", searcher=StringSearch("locationCode"))
        locationReference = EmbeddedAttribute(type="FHIRReference", getter="locationReference", setter="locationReference", searcher=StringSearch("locationReference"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        occurrenceTiming = EmbeddedAttribute(type="Timing", getter="occurrenceTiming", setter="occurrenceTiming", searcher=StringSearch("occurrenceTiming"))
        orderDetail = EmbeddedAttribute(type="CodeableConcept", getter="orderDetail", setter="orderDetail", searcher=StringSearch("orderDetail"))
        patientInstruction = Attribute(getter="patientInstruction", setter="patientInstruction", searcher=StringSearch("patientInstruction"))
        performer = EmbeddedAttribute(type="FHIRReference", getter="performer", setter="performer", searcher=StringSearch("performer"))
        performerType = EmbeddedAttribute(type="CodeableConcept", getter="performerType", setter="performerType", searcher=StringSearch("performerType"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        quantityQuantity = EmbeddedAttribute(type="Quantity", getter="quantityQuantity", setter="quantityQuantity", searcher=StringSearch("quantityQuantity"))
        quantityRange = EmbeddedAttribute(type="Range", getter="quantityRange", setter="quantityRange", searcher=StringSearch("quantityRange"))
        quantityRatio = EmbeddedAttribute(type="Ratio", getter="quantityRatio", setter="quantityRatio", searcher=StringSearch("quantityRatio"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        relevantHistory = EmbeddedAttribute(type="FHIRReference", getter="relevantHistory", setter="relevantHistory", searcher=StringSearch("relevantHistory"))
        replaces = EmbeddedAttribute(type="FHIRReference", getter="replaces", setter="replaces", searcher=StringSearch("replaces"))
        requester = EmbeddedAttribute(type="FHIRReference", getter="requester", setter="requester", searcher=StringSearch("requester"))
        requisition = EmbeddedAttribute(type="Identifier", getter="requisition", setter="requisition", searcher=StringSearch("requisition"))
        specimen = EmbeddedAttribute(type="FHIRReference", getter="specimen", setter="specimen", searcher=StringSearch("specimen"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        supportingInfo = EmbeddedAttribute(type="FHIRReference", getter="supportingInfo", setter="supportingInfo", searcher=StringSearch("supportingInfo"))

class Signature(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    data = fields.CharField(blank=True, required=False)
    onBehalfOf = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    sigFormat = fields.CharField(blank=True, required=False)
    targetFormat = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentListField("Coding", blank=False, required=True)
    when = fields.DateTimeField(blank=False, required=True)
    who = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        data = Attribute(getter="data", setter="data", searcher=StringSearch("data"))
        onBehalfOf = EmbeddedAttribute(type="FHIRReference", getter="onBehalfOf", setter="onBehalfOf", searcher=StringSearch("onBehalfOf"))
        sigFormat = Attribute(getter="sigFormat", setter="sigFormat", searcher=StringSearch("sigFormat"))
        targetFormat = Attribute(getter="targetFormat", setter="targetFormat", searcher=StringSearch("targetFormat"))
        type = EmbeddedAttribute(type="Coding", getter="type", setter="type", searcher=StringSearch("type"))
        when = DateAttribute("when")
        who = EmbeddedAttribute(type="FHIRReference", getter="who", setter="who", searcher=StringSearch("who"))

class Slot(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    appointmentType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    end = fields.DateTimeField(blank=False, required=True)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    overbooked = fields.BooleanField(blank=True, required=False)
    schedule = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    serviceCategory = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    serviceType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    specialty = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    start = fields.DateTimeField(blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        appointmentType = EmbeddedAttribute(type="CodeableConcept", getter="appointmentType", setter="appointmentType", searcher=StringSearch("appointmentType"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        end = DateAttribute("end")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        overbooked = Attribute(getter="overbooked", setter="overbooked", searcher=StringSearch("overbooked"))
        schedule = EmbeddedAttribute(type="FHIRReference", getter="schedule", setter="schedule", searcher=StringSearch("schedule"))
        serviceCategory = EmbeddedAttribute(type="CodeableConcept", getter="serviceCategory", setter="serviceCategory", searcher=StringSearch("serviceCategory"))
        serviceType = EmbeddedAttribute(type="CodeableConcept", getter="serviceType", setter="serviceType", searcher=StringSearch("serviceType"))
        specialty = EmbeddedAttribute(type="CodeableConcept", getter="specialty", setter="specialty", searcher=StringSearch("specialty"))
        start = DateAttribute("start")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class Specimen(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    accessionIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    collection = fields.EmbeddedDocumentField("SpecimenCollection", blank=True, required=False)
    condition = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    container = fields.EmbeddedDocumentListField("SpecimenContainer", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    parent = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    processing = fields.EmbeddedDocumentListField("SpecimenProcessing", blank=True, required=False)
    receivedTime = fields.DateTimeField(blank=True, required=False)
    request = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    subject = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        accessionIdentifier = EmbeddedAttribute(type="Identifier", getter="accessionIdentifier", setter="accessionIdentifier", searcher=StringSearch("accessionIdentifier"))
        collection = EmbeddedAttribute(type="SpecimenCollection", getter="collection", setter="collection", searcher=StringSearch("collection"))
        condition = EmbeddedAttribute(type="CodeableConcept", getter="condition", setter="condition", searcher=StringSearch("condition"))
        container = EmbeddedAttribute(type="SpecimenContainer", getter="container", setter="container", searcher=StringSearch("container"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        parent = EmbeddedAttribute(type="FHIRReference", getter="parent", setter="parent", searcher=StringSearch("parent"))
        processing = EmbeddedAttribute(type="SpecimenProcessing", getter="processing", setter="processing", searcher=StringSearch("processing"))
        receivedTime = DateAttribute("receivedTime")
        request = EmbeddedAttribute(type="FHIRReference", getter="request", setter="request", searcher=StringSearch("request"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = EmbeddedAttribute(type="FHIRReference", getter="subject", setter="subject", searcher=StringSearch("subject"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class SpecimenCollection(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    collectedDateTime = fields.DateTimeField(blank=True, required=False)
    collectedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    collector = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    duration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    fastingStatusCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    fastingStatusDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    method = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        collectedDateTime = DateAttribute("collectedDateTime")
        collectedPeriod = EmbeddedAttribute(type="Period", getter="collectedPeriod", setter="collectedPeriod", searcher=StringSearch("collectedPeriod"))
        collector = EmbeddedAttribute(type="FHIRReference", getter="collector", setter="collector", searcher=StringSearch("collector"))
        duration = EmbeddedAttribute(type="Duration", getter="duration", setter="duration", searcher=StringSearch("duration"))
        fastingStatusCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="fastingStatusCodeableConcept", setter="fastingStatusCodeableConcept", searcher=StringSearch("fastingStatusCodeableConcept"))
        fastingStatusDuration = EmbeddedAttribute(type="Duration", getter="fastingStatusDuration", setter="fastingStatusDuration", searcher=StringSearch("fastingStatusDuration"))
        method = EmbeddedAttribute(type="CodeableConcept", getter="method", setter="method", searcher=StringSearch("method"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))

class SpecimenContainer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    additiveCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    additiveReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    capacity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    specimenQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        additiveCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="additiveCodeableConcept", setter="additiveCodeableConcept", searcher=StringSearch("additiveCodeableConcept"))
        additiveReference = EmbeddedAttribute(type="FHIRReference", getter="additiveReference", setter="additiveReference", searcher=StringSearch("additiveReference"))
        capacity = EmbeddedAttribute(type="Quantity", getter="capacity", setter="capacity", searcher=StringSearch("capacity"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        specimenQuantity = EmbeddedAttribute(type="Quantity", getter="specimenQuantity", setter="specimenQuantity", searcher=StringSearch("specimenQuantity"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class SpecimenDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    collection = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    patientPreparation = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    timeAspect = fields.CharField(blank=True, required=False)
    typeCollected = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    typeTested = fields.EmbeddedDocumentListField("SpecimenDefinitionTypeTested", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        collection = EmbeddedAttribute(type="CodeableConcept", getter="collection", setter="collection", searcher=StringSearch("collection"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        patientPreparation = EmbeddedAttribute(type="CodeableConcept", getter="patientPreparation", setter="patientPreparation", searcher=StringSearch("patientPreparation"))
        timeAspect = Attribute(getter="timeAspect", setter="timeAspect", searcher=StringSearch("timeAspect"))
        typeCollected = EmbeddedAttribute(type="CodeableConcept", getter="typeCollected", setter="typeCollected", searcher=StringSearch("typeCollected"))
        typeTested = EmbeddedAttribute(type="SpecimenDefinitionTypeTested", getter="typeTested", setter="typeTested", searcher=StringSearch("typeTested"))

class SpecimenDefinitionTypeTested(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    container = fields.EmbeddedDocumentField("SpecimenDefinitionTypeTestedContainer", blank=True, required=False)
    handling = fields.EmbeddedDocumentListField("SpecimenDefinitionTypeTestedHandling", blank=True, required=False)
    isDerived = fields.BooleanField(blank=True, required=False)
    preference = fields.CharField(blank=False, required=True)
    rejectionCriterion = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    requirement = fields.CharField(blank=True, required=False)
    retentionTime = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        container = EmbeddedAttribute(type="SpecimenDefinitionTypeTestedContainer", getter="container", setter="container", searcher=StringSearch("container"))
        handling = EmbeddedAttribute(type="SpecimenDefinitionTypeTestedHandling", getter="handling", setter="handling", searcher=StringSearch("handling"))
        isDerived = Attribute(getter="isDerived", setter="isDerived", searcher=StringSearch("isDerived"))
        preference = Attribute(getter="preference", setter="preference", searcher=StringSearch("preference"))
        rejectionCriterion = EmbeddedAttribute(type="CodeableConcept", getter="rejectionCriterion", setter="rejectionCriterion", searcher=StringSearch("rejectionCriterion"))
        requirement = Attribute(getter="requirement", setter="requirement", searcher=StringSearch("requirement"))
        retentionTime = EmbeddedAttribute(type="Duration", getter="retentionTime", setter="retentionTime", searcher=StringSearch("retentionTime"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class SpecimenDefinitionTypeTestedContainer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    additive = fields.EmbeddedDocumentListField("SpecimenDefinitionTypeTestedContainerAdditive", blank=True, required=False)
    cap = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    capacity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    material = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    minimumVolumeQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    minimumVolumeString = fields.CharField(blank=True, required=False)
    preparation = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        additive = EmbeddedAttribute(type="SpecimenDefinitionTypeTestedContainerAdditive", getter="additive", setter="additive", searcher=StringSearch("additive"))
        cap = EmbeddedAttribute(type="CodeableConcept", getter="cap", setter="cap", searcher=StringSearch("cap"))
        capacity = EmbeddedAttribute(type="Quantity", getter="capacity", setter="capacity", searcher=StringSearch("capacity"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        material = EmbeddedAttribute(type="CodeableConcept", getter="material", setter="material", searcher=StringSearch("material"))
        minimumVolumeQuantity = EmbeddedAttribute(type="Quantity", getter="minimumVolumeQuantity", setter="minimumVolumeQuantity", searcher=StringSearch("minimumVolumeQuantity"))
        minimumVolumeString = Attribute(getter="minimumVolumeString", setter="minimumVolumeString", searcher=StringSearch("minimumVolumeString"))
        preparation = Attribute(getter="preparation", setter="preparation", searcher=StringSearch("preparation"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class SpecimenDefinitionTypeTestedContainerAdditive(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    additiveCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    additiveReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        additiveCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="additiveCodeableConcept", setter="additiveCodeableConcept", searcher=StringSearch("additiveCodeableConcept"))
        additiveReference = EmbeddedAttribute(type="FHIRReference", getter="additiveReference", setter="additiveReference", searcher=StringSearch("additiveReference"))

class SpecimenDefinitionTypeTestedHandling(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    instruction = fields.CharField(blank=True, required=False)
    maxDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    temperatureQualifier = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    temperatureRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        instruction = Attribute(getter="instruction", setter="instruction", searcher=StringSearch("instruction"))
        maxDuration = EmbeddedAttribute(type="Duration", getter="maxDuration", setter="maxDuration", searcher=StringSearch("maxDuration"))
        temperatureQualifier = EmbeddedAttribute(type="CodeableConcept", getter="temperatureQualifier", setter="temperatureQualifier", searcher=StringSearch("temperatureQualifier"))
        temperatureRange = EmbeddedAttribute(type="Range", getter="temperatureRange", setter="temperatureRange", searcher=StringSearch("temperatureRange"))

class SpecimenProcessing(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    additive = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    procedure = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    timeDateTime = fields.DateTimeField(blank=True, required=False)
    timePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        additive = EmbeddedAttribute(type="FHIRReference", getter="additive", setter="additive", searcher=StringSearch("additive"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        procedure = EmbeddedAttribute(type="CodeableConcept", getter="procedure", setter="procedure", searcher=StringSearch("procedure"))
        timeDateTime = DateAttribute("timeDateTime")
        timePeriod = EmbeddedAttribute(type="Period", getter="timePeriod", setter="timePeriod", searcher=StringSearch("timePeriod"))

class StructureDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    abstract = fields.BooleanField(blank=False, required=True)
    baseDefinition = fields.CharField(blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    context = fields.EmbeddedDocumentListField("StructureDefinitionContext", blank=True, required=False)
    contextInvariant = fields.ListField(fields.CharField(), blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    derivation = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    differential = fields.EmbeddedDocumentField("StructureDefinitionDifferential", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    fhirVersion = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    keyword = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    kind = fields.CharField(blank=False, required=True)
    mapping = fields.EmbeddedDocumentListField("StructureDefinitionMapping", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    snapshot = fields.EmbeddedDocumentField("StructureDefinitionSnapshot", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=False, required=True)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        abstract = Attribute(getter="abstract", setter="abstract", searcher=StringSearch("abstract"))
        baseDefinition = Attribute(getter="baseDefinition", setter="baseDefinition", searcher=StringSearch("baseDefinition"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        context = EmbeddedAttribute(type="StructureDefinitionContext", getter="context", setter="context", searcher=StringSearch("context"))
        contextInvariant = Attribute(getter="contextInvariant", setter="contextInvariant", searcher=StringSearch("contextInvariant"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        derivation = Attribute(getter="derivation", setter="derivation", searcher=StringSearch("derivation"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        differential = EmbeddedAttribute(type="StructureDefinitionDifferential", getter="differential", setter="differential", searcher=StringSearch("differential"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        fhirVersion = Attribute(getter="fhirVersion", setter="fhirVersion", searcher=StringSearch("fhirVersion"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        keyword = EmbeddedAttribute(type="Coding", getter="keyword", setter="keyword", searcher=StringSearch("keyword"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))
        mapping = EmbeddedAttribute(type="StructureDefinitionMapping", getter="mapping", setter="mapping", searcher=StringSearch("mapping"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        snapshot = EmbeddedAttribute(type="StructureDefinitionSnapshot", getter="snapshot", setter="snapshot", searcher=StringSearch("snapshot"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class StructureDefinitionContext(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    expression = fields.CharField(blank=False, required=True)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class StructureDefinitionDifferential(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    element = fields.EmbeddedDocumentListField("ElementDefinition", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        element = EmbeddedAttribute(type="ElementDefinition", getter="element", setter="element", searcher=StringSearch("element"))

class StructureDefinitionMapping(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    identity = fields.CharField(blank=False, required=True)
    name = fields.CharField(blank=True, required=False)
    uri = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        identity = Attribute(getter="identity", setter="identity", searcher=StringSearch("identity"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        uri = Attribute(getter="uri", setter="uri", searcher=StringSearch("uri"))

class StructureDefinitionSnapshot(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    element = fields.EmbeddedDocumentListField("ElementDefinition", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        element = EmbeddedAttribute(type="ElementDefinition", getter="element", setter="element", searcher=StringSearch("element"))

class StructureMap(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    group = fields.EmbeddedDocumentListField("StructureMapGroup", blank=False, required=True)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    import_ = fields.ListField(fields.CharField(), blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    structure = fields.EmbeddedDocumentListField("StructureMapStructure", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=False, required=True)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        group = EmbeddedAttribute(type="StructureMapGroup", getter="group", setter="group", searcher=StringSearch("group"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        import_ = Attribute(getter="import_", setter="import_", searcher=StringSearch("import_"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        structure = EmbeddedAttribute(type="StructureMapStructure", getter="structure", setter="structure", searcher=StringSearch("structure"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class StructureMapGroup(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    extends = fields.CharField(blank=True, required=False)
    input = fields.EmbeddedDocumentListField("StructureMapGroupInput", blank=False, required=True)
    name = fields.CharField(blank=False, required=True)
    rule = fields.EmbeddedDocumentListField("StructureMapGroupRule", blank=False, required=True)
    typeMode = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        extends = Attribute(getter="extends", setter="extends", searcher=StringSearch("extends"))
        input = EmbeddedAttribute(type="StructureMapGroupInput", getter="input", setter="input", searcher=StringSearch("input"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        rule = EmbeddedAttribute(type="StructureMapGroupRule", getter="rule", setter="rule", searcher=StringSearch("rule"))
        typeMode = Attribute(getter="typeMode", setter="typeMode", searcher=StringSearch("typeMode"))

class StructureMapGroupInput(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    mode = fields.CharField(blank=False, required=True)
    name = fields.CharField(blank=False, required=True)
    type = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class StructureMapGroupRule(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    dependent = fields.EmbeddedDocumentListField("StructureMapGroupRuleDependent", blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    source = fields.EmbeddedDocumentListField("StructureMapGroupRuleSource", blank=False, required=True)
    target = fields.EmbeddedDocumentListField("StructureMapGroupRuleTarget", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        dependent = EmbeddedAttribute(type="StructureMapGroupRuleDependent", getter="dependent", setter="dependent", searcher=StringSearch("dependent"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        source = EmbeddedAttribute(type="StructureMapGroupRuleSource", getter="source", setter="source", searcher=StringSearch("source"))
        target = EmbeddedAttribute(type="StructureMapGroupRuleTarget", getter="target", setter="target", searcher=StringSearch("target"))

class StructureMapGroupRuleDependent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    variable = fields.ListField(fields.CharField(), blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        variable = Attribute(getter="variable", setter="variable", searcher=StringSearch("variable"))

class StructureMapGroupRuleSource(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    check = fields.CharField(blank=True, required=False)
    condition = fields.CharField(blank=True, required=False)
    context = fields.CharField(blank=False, required=True)
    defaultValueAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    defaultValueAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    defaultValueAnnotation = fields.EmbeddedDocumentField("Annotation", blank=True, required=False)
    defaultValueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    defaultValueBase64Binary = fields.CharField(blank=True, required=False)
    defaultValueBoolean = fields.BooleanField(blank=True, required=False)
    defaultValueCanonical = fields.CharField(blank=True, required=False)
    defaultValueCode = fields.CharField(blank=True, required=False)
    defaultValueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    defaultValueCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    defaultValueContactDetail = fields.EmbeddedDocumentField("ContactDetail", blank=True, required=False)
    defaultValueContactPoint = fields.EmbeddedDocumentField("ContactPoint", blank=True, required=False)
    defaultValueContributor = fields.EmbeddedDocumentField("Contributor", blank=True, required=False)
    defaultValueCount = fields.EmbeddedDocumentField("Count", blank=True, required=False)
    defaultValueDataRequirement = fields.EmbeddedDocumentField("DataRequirement", blank=True, required=False)
    defaultValueDate = fields.DateTimeField(blank=True, required=False)
    defaultValueDateTime = fields.DateTimeField(blank=True, required=False)
    defaultValueDecimal = fields.FloatField(blank=True, required=False)
    defaultValueDistance = fields.EmbeddedDocumentField("Distance", blank=True, required=False)
    defaultValueDosage = fields.EmbeddedDocumentField("Dosage", blank=True, required=False)
    defaultValueDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    defaultValueExpression = fields.EmbeddedDocumentField("Expression", blank=True, required=False)
    defaultValueHumanName = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    defaultValueId = fields.CharField(blank=True, required=False)
    defaultValueIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    defaultValueInstant = fields.DateTimeField(blank=True, required=False)
    defaultValueInteger = fields.IntegerField(blank=True, required=False)
    defaultValueMarkdown = fields.CharField(blank=True, required=False)
    defaultValueMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    defaultValueOid = fields.CharField(blank=True, required=False)
    defaultValueParameterDefinition = fields.EmbeddedDocumentField("ParameterDefinition", blank=True, required=False)
    defaultValuePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    defaultValuePositiveInt = fields.IntegerField(blank=True, required=False)
    defaultValueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    defaultValueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    defaultValueRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    defaultValueReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    defaultValueRelatedArtifact = fields.EmbeddedDocumentField("RelatedArtifact", blank=True, required=False)
    defaultValueSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    defaultValueSignature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    defaultValueString = fields.CharField(blank=True, required=False)
    defaultValueTime = fields.DateTimeField(blank=True, required=False)
    defaultValueTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    defaultValueTriggerDefinition = fields.EmbeddedDocumentField("TriggerDefinition", blank=True, required=False)
    defaultValueUnsignedInt = fields.IntegerField(blank=True, required=False)
    defaultValueUri = fields.CharField(blank=True, required=False)
    defaultValueUrl = fields.CharField(blank=True, required=False)
    defaultValueUsageContext = fields.EmbeddedDocumentField("UsageContext", blank=True, required=False)
    defaultValueUuid = fields.CharField(blank=True, required=False)
    element = fields.CharField(blank=True, required=False)
    listMode = fields.CharField(blank=True, required=False)
    logMessage = fields.CharField(blank=True, required=False)
    max = fields.CharField(blank=True, required=False)
    min = fields.IntegerField(blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    variable = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        check = Attribute(getter="check", setter="check", searcher=StringSearch("check"))
        condition = Attribute(getter="condition", setter="condition", searcher=StringSearch("condition"))
        context = Attribute(getter="context", setter="context", searcher=StringSearch("context"))
        defaultValueAddress = EmbeddedAttribute(type="Address", getter="defaultValueAddress", setter="defaultValueAddress", searcher=StringSearch("defaultValueAddress"))
        defaultValueAge = EmbeddedAttribute(type="Age", getter="defaultValueAge", setter="defaultValueAge", searcher=StringSearch("defaultValueAge"))
        defaultValueAnnotation = EmbeddedAttribute(type="Annotation", getter="defaultValueAnnotation", setter="defaultValueAnnotation", searcher=StringSearch("defaultValueAnnotation"))
        defaultValueAttachment = EmbeddedAttribute(type="Attachment", getter="defaultValueAttachment", setter="defaultValueAttachment", searcher=StringSearch("defaultValueAttachment"))
        defaultValueBase64Binary = Attribute(getter="defaultValueBase64Binary", setter="defaultValueBase64Binary", searcher=StringSearch("defaultValueBase64Binary"))
        defaultValueBoolean = Attribute(getter="defaultValueBoolean", setter="defaultValueBoolean", searcher=StringSearch("defaultValueBoolean"))
        defaultValueCanonical = Attribute(getter="defaultValueCanonical", setter="defaultValueCanonical", searcher=StringSearch("defaultValueCanonical"))
        defaultValueCode = Attribute(getter="defaultValueCode", setter="defaultValueCode", searcher=StringSearch("defaultValueCode"))
        defaultValueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="defaultValueCodeableConcept", setter="defaultValueCodeableConcept", searcher=StringSearch("defaultValueCodeableConcept"))
        defaultValueCoding = EmbeddedAttribute(type="Coding", getter="defaultValueCoding", setter="defaultValueCoding", searcher=StringSearch("defaultValueCoding"))
        defaultValueContactDetail = EmbeddedAttribute(type="ContactDetail", getter="defaultValueContactDetail", setter="defaultValueContactDetail", searcher=StringSearch("defaultValueContactDetail"))
        defaultValueContactPoint = EmbeddedAttribute(type="ContactPoint", getter="defaultValueContactPoint", setter="defaultValueContactPoint", searcher=StringSearch("defaultValueContactPoint"))
        defaultValueContributor = EmbeddedAttribute(type="Contributor", getter="defaultValueContributor", setter="defaultValueContributor", searcher=StringSearch("defaultValueContributor"))
        defaultValueCount = EmbeddedAttribute(type="Count", getter="defaultValueCount", setter="defaultValueCount", searcher=StringSearch("defaultValueCount"))
        defaultValueDataRequirement = EmbeddedAttribute(type="DataRequirement", getter="defaultValueDataRequirement", setter="defaultValueDataRequirement", searcher=StringSearch("defaultValueDataRequirement"))
        defaultValueDate = DateAttribute("defaultValueDate")
        defaultValueDateTime = DateAttribute("defaultValueDateTime")
        defaultValueDecimal = Attribute(getter="defaultValueDecimal", setter="defaultValueDecimal", searcher=NumericSearch("defaultValueDecimal"))
        defaultValueDistance = EmbeddedAttribute(type="Distance", getter="defaultValueDistance", setter="defaultValueDistance", searcher=StringSearch("defaultValueDistance"))
        defaultValueDosage = EmbeddedAttribute(type="Dosage", getter="defaultValueDosage", setter="defaultValueDosage", searcher=StringSearch("defaultValueDosage"))
        defaultValueDuration = EmbeddedAttribute(type="Duration", getter="defaultValueDuration", setter="defaultValueDuration", searcher=StringSearch("defaultValueDuration"))
        defaultValueExpression = EmbeddedAttribute(type="Expression", getter="defaultValueExpression", setter="defaultValueExpression", searcher=StringSearch("defaultValueExpression"))
        defaultValueHumanName = EmbeddedAttribute(type="HumanName", getter="defaultValueHumanName", setter="defaultValueHumanName", searcher=StringSearch("defaultValueHumanName"))
        defaultValueId = Attribute(getter="defaultValueId", setter="defaultValueId", searcher=StringSearch("defaultValueId"))
        defaultValueIdentifier = EmbeddedAttribute(type="Identifier", getter="defaultValueIdentifier", setter="defaultValueIdentifier", searcher=StringSearch("defaultValueIdentifier"))
        defaultValueInstant = DateAttribute("defaultValueInstant")
        defaultValueInteger = Attribute(getter="defaultValueInteger", setter="defaultValueInteger", searcher=NumericSearch("defaultValueInteger"))
        defaultValueMarkdown = Attribute(getter="defaultValueMarkdown", setter="defaultValueMarkdown", searcher=StringSearch("defaultValueMarkdown"))
        defaultValueMoney = EmbeddedAttribute(type="Money", getter="defaultValueMoney", setter="defaultValueMoney", searcher=StringSearch("defaultValueMoney"))
        defaultValueOid = Attribute(getter="defaultValueOid", setter="defaultValueOid", searcher=StringSearch("defaultValueOid"))
        defaultValueParameterDefinition = EmbeddedAttribute(type="ParameterDefinition", getter="defaultValueParameterDefinition", setter="defaultValueParameterDefinition", searcher=StringSearch("defaultValueParameterDefinition"))
        defaultValuePeriod = EmbeddedAttribute(type="Period", getter="defaultValuePeriod", setter="defaultValuePeriod", searcher=StringSearch("defaultValuePeriod"))
        defaultValuePositiveInt = Attribute(getter="defaultValuePositiveInt", setter="defaultValuePositiveInt", searcher=NumericSearch("defaultValuePositiveInt"))
        defaultValueQuantity = EmbeddedAttribute(type="Quantity", getter="defaultValueQuantity", setter="defaultValueQuantity", searcher=StringSearch("defaultValueQuantity"))
        defaultValueRange = EmbeddedAttribute(type="Range", getter="defaultValueRange", setter="defaultValueRange", searcher=StringSearch("defaultValueRange"))
        defaultValueRatio = EmbeddedAttribute(type="Ratio", getter="defaultValueRatio", setter="defaultValueRatio", searcher=StringSearch("defaultValueRatio"))
        defaultValueReference = EmbeddedAttribute(type="FHIRReference", getter="defaultValueReference", setter="defaultValueReference", searcher=StringSearch("defaultValueReference"))
        defaultValueRelatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="defaultValueRelatedArtifact", setter="defaultValueRelatedArtifact", searcher=StringSearch("defaultValueRelatedArtifact"))
        defaultValueSampledData = EmbeddedAttribute(type="SampledData", getter="defaultValueSampledData", setter="defaultValueSampledData", searcher=StringSearch("defaultValueSampledData"))
        defaultValueSignature = EmbeddedAttribute(type="Signature", getter="defaultValueSignature", setter="defaultValueSignature", searcher=StringSearch("defaultValueSignature"))
        defaultValueString = Attribute(getter="defaultValueString", setter="defaultValueString", searcher=StringSearch("defaultValueString"))
        defaultValueTime = DateAttribute("defaultValueTime")
        defaultValueTiming = EmbeddedAttribute(type="Timing", getter="defaultValueTiming", setter="defaultValueTiming", searcher=StringSearch("defaultValueTiming"))
        defaultValueTriggerDefinition = EmbeddedAttribute(type="TriggerDefinition", getter="defaultValueTriggerDefinition", setter="defaultValueTriggerDefinition", searcher=StringSearch("defaultValueTriggerDefinition"))
        defaultValueUnsignedInt = Attribute(getter="defaultValueUnsignedInt", setter="defaultValueUnsignedInt", searcher=NumericSearch("defaultValueUnsignedInt"))
        defaultValueUri = Attribute(getter="defaultValueUri", setter="defaultValueUri", searcher=StringSearch("defaultValueUri"))
        defaultValueUrl = Attribute(getter="defaultValueUrl", setter="defaultValueUrl", searcher=StringSearch("defaultValueUrl"))
        defaultValueUsageContext = EmbeddedAttribute(type="UsageContext", getter="defaultValueUsageContext", setter="defaultValueUsageContext", searcher=StringSearch("defaultValueUsageContext"))
        defaultValueUuid = Attribute(getter="defaultValueUuid", setter="defaultValueUuid", searcher=StringSearch("defaultValueUuid"))
        element = Attribute(getter="element", setter="element", searcher=StringSearch("element"))
        listMode = Attribute(getter="listMode", setter="listMode", searcher=StringSearch("listMode"))
        logMessage = Attribute(getter="logMessage", setter="logMessage", searcher=StringSearch("logMessage"))
        max = Attribute(getter="max", setter="max", searcher=StringSearch("max"))
        min = Attribute(getter="min", setter="min", searcher=NumericSearch("min"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        variable = Attribute(getter="variable", setter="variable", searcher=StringSearch("variable"))

class StructureMapGroupRuleTarget(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    context = fields.CharField(blank=True, required=False)
    contextType = fields.CharField(blank=True, required=False)
    element = fields.CharField(blank=True, required=False)
    listMode = fields.ListField(fields.CharField(), blank=True, required=False)
    listRuleId = fields.CharField(blank=True, required=False)
    parameter = fields.EmbeddedDocumentListField("StructureMapGroupRuleTargetParameter", blank=True, required=False)
    transform = fields.CharField(blank=True, required=False)
    variable = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        context = Attribute(getter="context", setter="context", searcher=StringSearch("context"))
        contextType = Attribute(getter="contextType", setter="contextType", searcher=StringSearch("contextType"))
        element = Attribute(getter="element", setter="element", searcher=StringSearch("element"))
        listMode = Attribute(getter="listMode", setter="listMode", searcher=StringSearch("listMode"))
        listRuleId = Attribute(getter="listRuleId", setter="listRuleId", searcher=StringSearch("listRuleId"))
        parameter = EmbeddedAttribute(type="StructureMapGroupRuleTargetParameter", getter="parameter", setter="parameter", searcher=StringSearch("parameter"))
        transform = Attribute(getter="transform", setter="transform", searcher=StringSearch("transform"))
        variable = Attribute(getter="variable", setter="variable", searcher=StringSearch("variable"))

class StructureMapGroupRuleTargetParameter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueDecimal = fields.FloatField(blank=True, required=False)
    valueId = fields.CharField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueId = Attribute(getter="valueId", setter="valueId", searcher=StringSearch("valueId"))
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))

class StructureMapStructure(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    alias = fields.CharField(blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    mode = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        alias = Attribute(getter="alias", setter="alias", searcher=StringSearch("alias"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class Subscription(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    channel = fields.EmbeddedDocumentField("SubscriptionChannel", blank=False, required=True)
    contact = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    criteria = fields.CharField(blank=False, required=True)
    end = fields.DateTimeField(blank=True, required=False)
    error = fields.CharField(blank=True, required=False)
    reason = fields.CharField(blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        channel = EmbeddedAttribute(type="SubscriptionChannel", getter="channel", setter="channel", searcher=StringSearch("channel"))
        contact = EmbeddedAttribute(type="ContactPoint", getter="contact", setter="contact", searcher=StringSearch("contact"))
        criteria = Attribute(getter="criteria", setter="criteria", searcher=StringSearch("criteria"))
        end = DateAttribute("end")
        error = Attribute(getter="error", setter="error", searcher=StringSearch("error"))
        reason = Attribute(getter="reason", setter="reason", searcher=StringSearch("reason"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class SubscriptionChannel(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    endpoint = fields.CharField(blank=True, required=False)
    header = fields.ListField(fields.CharField(), blank=True, required=False)
    payload = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        endpoint = Attribute(getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        header = Attribute(getter="header", setter="header", searcher=StringSearch("header"))
        payload = Attribute(getter="payload", setter="payload", searcher=StringSearch("payload"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class Substance(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    ingredient = fields.EmbeddedDocumentListField("SubstanceIngredient", blank=True, required=False)
    instance = fields.EmbeddedDocumentListField("SubstanceInstance", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        ingredient = EmbeddedAttribute(type="SubstanceIngredient", getter="ingredient", setter="ingredient", searcher=StringSearch("ingredient"))
        instance = EmbeddedAttribute(type="SubstanceInstance", getter="instance", setter="instance", searcher=StringSearch("instance"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class SubstanceAmount(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amountQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    amountRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    amountString = fields.CharField(blank=True, required=False)
    amountText = fields.CharField(blank=True, required=False)
    amountType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    referenceRange = fields.EmbeddedDocumentField("SubstanceAmountReferenceRange", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amountQuantity = EmbeddedAttribute(type="Quantity", getter="amountQuantity", setter="amountQuantity", searcher=StringSearch("amountQuantity"))
        amountRange = EmbeddedAttribute(type="Range", getter="amountRange", setter="amountRange", searcher=StringSearch("amountRange"))
        amountString = Attribute(getter="amountString", setter="amountString", searcher=StringSearch("amountString"))
        amountText = Attribute(getter="amountText", setter="amountText", searcher=StringSearch("amountText"))
        amountType = EmbeddedAttribute(type="CodeableConcept", getter="amountType", setter="amountType", searcher=StringSearch("amountType"))
        referenceRange = EmbeddedAttribute(type="SubstanceAmountReferenceRange", getter="referenceRange", setter="referenceRange", searcher=StringSearch("referenceRange"))

class SubstanceAmountReferenceRange(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    highLimit = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    lowLimit = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        highLimit = EmbeddedAttribute(type="Quantity", getter="highLimit", setter="highLimit", searcher=StringSearch("highLimit"))
        lowLimit = EmbeddedAttribute(type="Quantity", getter="lowLimit", setter="lowLimit", searcher=StringSearch("lowLimit"))

class SubstanceIngredient(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    substanceCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    substanceReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        quantity = EmbeddedAttribute(type="Ratio", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        substanceCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="substanceCodeableConcept", setter="substanceCodeableConcept", searcher=StringSearch("substanceCodeableConcept"))
        substanceReference = EmbeddedAttribute(type="FHIRReference", getter="substanceReference", setter="substanceReference", searcher=StringSearch("substanceReference"))

class SubstanceInstance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    expiry = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        expiry = DateAttribute("expiry")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))

class SubstanceNucleicAcid(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    areaOfHybridisation = fields.CharField(blank=True, required=False)
    numberOfSubunits = fields.IntegerField(blank=True, required=False)
    oligoNucleotideType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequenceType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subunit = fields.EmbeddedDocumentListField("SubstanceNucleicAcidSubunit", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        areaOfHybridisation = Attribute(getter="areaOfHybridisation", setter="areaOfHybridisation", searcher=StringSearch("areaOfHybridisation"))
        numberOfSubunits = Attribute(getter="numberOfSubunits", setter="numberOfSubunits", searcher=NumericSearch("numberOfSubunits"))
        oligoNucleotideType = EmbeddedAttribute(type="CodeableConcept", getter="oligoNucleotideType", setter="oligoNucleotideType", searcher=StringSearch("oligoNucleotideType"))
        sequenceType = EmbeddedAttribute(type="CodeableConcept", getter="sequenceType", setter="sequenceType", searcher=StringSearch("sequenceType"))
        subunit = EmbeddedAttribute(type="SubstanceNucleicAcidSubunit", getter="subunit", setter="subunit", searcher=StringSearch("subunit"))

class SubstanceNucleicAcidSubunit(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    fivePrime = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    length = fields.IntegerField(blank=True, required=False)
    linkage = fields.EmbeddedDocumentListField("SubstanceNucleicAcidSubunitLinkage", blank=True, required=False)
    sequence = fields.CharField(blank=True, required=False)
    sequenceAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    subunit = fields.IntegerField(blank=True, required=False)
    sugar = fields.EmbeddedDocumentListField("SubstanceNucleicAcidSubunitSugar", blank=True, required=False)
    threePrime = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        fivePrime = EmbeddedAttribute(type="CodeableConcept", getter="fivePrime", setter="fivePrime", searcher=StringSearch("fivePrime"))
        length = Attribute(getter="length", setter="length", searcher=NumericSearch("length"))
        linkage = EmbeddedAttribute(type="SubstanceNucleicAcidSubunitLinkage", getter="linkage", setter="linkage", searcher=StringSearch("linkage"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=StringSearch("sequence"))
        sequenceAttachment = EmbeddedAttribute(type="Attachment", getter="sequenceAttachment", setter="sequenceAttachment", searcher=StringSearch("sequenceAttachment"))
        subunit = Attribute(getter="subunit", setter="subunit", searcher=NumericSearch("subunit"))
        sugar = EmbeddedAttribute(type="SubstanceNucleicAcidSubunitSugar", getter="sugar", setter="sugar", searcher=StringSearch("sugar"))
        threePrime = EmbeddedAttribute(type="CodeableConcept", getter="threePrime", setter="threePrime", searcher=StringSearch("threePrime"))

class SubstanceNucleicAcidSubunitLinkage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    connectivity = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    residueSite = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        connectivity = Attribute(getter="connectivity", setter="connectivity", searcher=StringSearch("connectivity"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        residueSite = Attribute(getter="residueSite", setter="residueSite", searcher=StringSearch("residueSite"))

class SubstanceNucleicAcidSubunitSugar(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    residueSite = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        residueSite = Attribute(getter="residueSite", setter="residueSite", searcher=StringSearch("residueSite"))

class SubstancePolymer(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    class_ = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    copolymerConnectivity = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    geometry = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    modification = fields.ListField(fields.CharField(), blank=True, required=False)
    monomerSet = fields.EmbeddedDocumentListField("SubstancePolymerMonomerSet", blank=True, required=False)
    repeat = fields.EmbeddedDocumentListField("SubstancePolymerRepeat", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        class_ = EmbeddedAttribute(type="CodeableConcept", getter="class_", setter="class_", searcher=StringSearch("class_"))
        copolymerConnectivity = EmbeddedAttribute(type="CodeableConcept", getter="copolymerConnectivity", setter="copolymerConnectivity", searcher=StringSearch("copolymerConnectivity"))
        geometry = EmbeddedAttribute(type="CodeableConcept", getter="geometry", setter="geometry", searcher=StringSearch("geometry"))
        modification = Attribute(getter="modification", setter="modification", searcher=StringSearch("modification"))
        monomerSet = EmbeddedAttribute(type="SubstancePolymerMonomerSet", getter="monomerSet", setter="monomerSet", searcher=StringSearch("monomerSet"))
        repeat = EmbeddedAttribute(type="SubstancePolymerRepeat", getter="repeat", setter="repeat", searcher=StringSearch("repeat"))

class SubstancePolymerMonomerSet(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    ratioType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    startingMaterial = fields.EmbeddedDocumentListField("SubstancePolymerMonomerSetStartingMaterial", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        ratioType = EmbeddedAttribute(type="CodeableConcept", getter="ratioType", setter="ratioType", searcher=StringSearch("ratioType"))
        startingMaterial = EmbeddedAttribute(type="SubstancePolymerMonomerSetStartingMaterial", getter="startingMaterial", setter="startingMaterial", searcher=StringSearch("startingMaterial"))

class SubstancePolymerMonomerSetStartingMaterial(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("SubstanceAmount", blank=True, required=False)
    isDefining = fields.BooleanField(blank=True, required=False)
    material = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="SubstanceAmount", getter="amount", setter="amount", searcher=StringSearch("amount"))
        isDefining = Attribute(getter="isDefining", setter="isDefining", searcher=StringSearch("isDefining"))
        material = EmbeddedAttribute(type="CodeableConcept", getter="material", setter="material", searcher=StringSearch("material"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class SubstancePolymerRepeat(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    averageMolecularFormula = fields.CharField(blank=True, required=False)
    numberOfUnits = fields.IntegerField(blank=True, required=False)
    repeatUnit = fields.EmbeddedDocumentListField("SubstancePolymerRepeatRepeatUnit", blank=True, required=False)
    repeatUnitAmountType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        averageMolecularFormula = Attribute(getter="averageMolecularFormula", setter="averageMolecularFormula", searcher=StringSearch("averageMolecularFormula"))
        numberOfUnits = Attribute(getter="numberOfUnits", setter="numberOfUnits", searcher=NumericSearch("numberOfUnits"))
        repeatUnit = EmbeddedAttribute(type="SubstancePolymerRepeatRepeatUnit", getter="repeatUnit", setter="repeatUnit", searcher=StringSearch("repeatUnit"))
        repeatUnitAmountType = EmbeddedAttribute(type="CodeableConcept", getter="repeatUnitAmountType", setter="repeatUnitAmountType", searcher=StringSearch("repeatUnitAmountType"))

class SubstancePolymerRepeatRepeatUnit(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("SubstanceAmount", blank=True, required=False)
    degreeOfPolymerisation = fields.EmbeddedDocumentListField("SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation", blank=True, required=False)
    orientationOfPolymerisation = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    repeatUnit = fields.CharField(blank=True, required=False)
    structuralRepresentation = fields.EmbeddedDocumentListField("SubstancePolymerRepeatRepeatUnitStructuralRepresentation", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="SubstanceAmount", getter="amount", setter="amount", searcher=StringSearch("amount"))
        degreeOfPolymerisation = EmbeddedAttribute(type="SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation", getter="degreeOfPolymerisation", setter="degreeOfPolymerisation", searcher=StringSearch("degreeOfPolymerisation"))
        orientationOfPolymerisation = EmbeddedAttribute(type="CodeableConcept", getter="orientationOfPolymerisation", setter="orientationOfPolymerisation", searcher=StringSearch("orientationOfPolymerisation"))
        repeatUnit = Attribute(getter="repeatUnit", setter="repeatUnit", searcher=StringSearch("repeatUnit"))
        structuralRepresentation = EmbeddedAttribute(type="SubstancePolymerRepeatRepeatUnitStructuralRepresentation", getter="structuralRepresentation", setter="structuralRepresentation", searcher=StringSearch("structuralRepresentation"))

class SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("SubstanceAmount", blank=True, required=False)
    degree = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="SubstanceAmount", getter="amount", setter="amount", searcher=StringSearch("amount"))
        degree = EmbeddedAttribute(type="CodeableConcept", getter="degree", setter="degree", searcher=StringSearch("degree"))

class SubstancePolymerRepeatRepeatUnitStructuralRepresentation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    attachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    representation = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        attachment = EmbeddedAttribute(type="Attachment", getter="attachment", setter="attachment", searcher=StringSearch("attachment"))
        representation = Attribute(getter="representation", setter="representation", searcher=StringSearch("representation"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class SubstanceProtein(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    disulfideLinkage = fields.ListField(fields.CharField(), blank=True, required=False)
    numberOfSubunits = fields.IntegerField(blank=True, required=False)
    sequenceType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subunit = fields.EmbeddedDocumentListField("SubstanceProteinSubunit", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        disulfideLinkage = Attribute(getter="disulfideLinkage", setter="disulfideLinkage", searcher=StringSearch("disulfideLinkage"))
        numberOfSubunits = Attribute(getter="numberOfSubunits", setter="numberOfSubunits", searcher=NumericSearch("numberOfSubunits"))
        sequenceType = EmbeddedAttribute(type="CodeableConcept", getter="sequenceType", setter="sequenceType", searcher=StringSearch("sequenceType"))
        subunit = EmbeddedAttribute(type="SubstanceProteinSubunit", getter="subunit", setter="subunit", searcher=StringSearch("subunit"))

class SubstanceProteinSubunit(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    cTerminalModification = fields.CharField(blank=True, required=False)
    cTerminalModificationId = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    length = fields.IntegerField(blank=True, required=False)
    nTerminalModification = fields.CharField(blank=True, required=False)
    nTerminalModificationId = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    sequence = fields.CharField(blank=True, required=False)
    sequenceAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    subunit = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        cTerminalModification = Attribute(getter="cTerminalModification", setter="cTerminalModification", searcher=StringSearch("cTerminalModification"))
        cTerminalModificationId = EmbeddedAttribute(type="Identifier", getter="cTerminalModificationId", setter="cTerminalModificationId", searcher=StringSearch("cTerminalModificationId"))
        length = Attribute(getter="length", setter="length", searcher=NumericSearch("length"))
        nTerminalModification = Attribute(getter="nTerminalModification", setter="nTerminalModification", searcher=StringSearch("nTerminalModification"))
        nTerminalModificationId = EmbeddedAttribute(type="Identifier", getter="nTerminalModificationId", setter="nTerminalModificationId", searcher=StringSearch("nTerminalModificationId"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=StringSearch("sequence"))
        sequenceAttachment = EmbeddedAttribute(type="Attachment", getter="sequenceAttachment", setter="sequenceAttachment", searcher=StringSearch("sequenceAttachment"))
        subunit = Attribute(getter="subunit", setter="subunit", searcher=NumericSearch("subunit"))

class SubstanceReferenceInformation(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    classification = fields.EmbeddedDocumentListField("SubstanceReferenceInformationClassification", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    gene = fields.EmbeddedDocumentListField("SubstanceReferenceInformationGene", blank=True, required=False)
    geneElement = fields.EmbeddedDocumentListField("SubstanceReferenceInformationGeneElement", blank=True, required=False)
    target = fields.EmbeddedDocumentListField("SubstanceReferenceInformationTarget", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        classification = EmbeddedAttribute(type="SubstanceReferenceInformationClassification", getter="classification", setter="classification", searcher=StringSearch("classification"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        gene = EmbeddedAttribute(type="SubstanceReferenceInformationGene", getter="gene", setter="gene", searcher=StringSearch("gene"))
        geneElement = EmbeddedAttribute(type="SubstanceReferenceInformationGeneElement", getter="geneElement", setter="geneElement", searcher=StringSearch("geneElement"))
        target = EmbeddedAttribute(type="SubstanceReferenceInformationTarget", getter="target", setter="target", searcher=StringSearch("target"))

class SubstanceReferenceInformationClassification(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    classification = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    domain = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    source = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    subtype = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        classification = EmbeddedAttribute(type="CodeableConcept", getter="classification", setter="classification", searcher=StringSearch("classification"))
        domain = EmbeddedAttribute(type="CodeableConcept", getter="domain", setter="domain", searcher=StringSearch("domain"))
        source = EmbeddedAttribute(type="FHIRReference", getter="source", setter="source", searcher=StringSearch("source"))
        subtype = EmbeddedAttribute(type="CodeableConcept", getter="subtype", setter="subtype", searcher=StringSearch("subtype"))

class SubstanceReferenceInformationGene(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    gene = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    geneSequenceOrigin = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    source = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        gene = EmbeddedAttribute(type="CodeableConcept", getter="gene", setter="gene", searcher=StringSearch("gene"))
        geneSequenceOrigin = EmbeddedAttribute(type="CodeableConcept", getter="geneSequenceOrigin", setter="geneSequenceOrigin", searcher=StringSearch("geneSequenceOrigin"))
        source = EmbeddedAttribute(type="FHIRReference", getter="source", setter="source", searcher=StringSearch("source"))

class SubstanceReferenceInformationGeneElement(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    element = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    source = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        element = EmbeddedAttribute(type="Identifier", getter="element", setter="element", searcher=StringSearch("element"))
        source = EmbeddedAttribute(type="FHIRReference", getter="source", setter="source", searcher=StringSearch("source"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class SubstanceReferenceInformationTarget(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amountQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    amountRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    amountString = fields.CharField(blank=True, required=False)
    amountType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    interaction = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    organism = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    organismType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    source = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    target = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amountQuantity = EmbeddedAttribute(type="Quantity", getter="amountQuantity", setter="amountQuantity", searcher=StringSearch("amountQuantity"))
        amountRange = EmbeddedAttribute(type="Range", getter="amountRange", setter="amountRange", searcher=StringSearch("amountRange"))
        amountString = Attribute(getter="amountString", setter="amountString", searcher=StringSearch("amountString"))
        amountType = EmbeddedAttribute(type="CodeableConcept", getter="amountType", setter="amountType", searcher=StringSearch("amountType"))
        interaction = EmbeddedAttribute(type="CodeableConcept", getter="interaction", setter="interaction", searcher=StringSearch("interaction"))
        organism = EmbeddedAttribute(type="CodeableConcept", getter="organism", setter="organism", searcher=StringSearch("organism"))
        organismType = EmbeddedAttribute(type="CodeableConcept", getter="organismType", setter="organismType", searcher=StringSearch("organismType"))
        source = EmbeddedAttribute(type="FHIRReference", getter="source", setter="source", searcher=StringSearch("source"))
        target = EmbeddedAttribute(type="Identifier", getter="target", setter="target", searcher=StringSearch("target"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class SubstanceSourceMaterial(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    countryOfOrigin = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    developmentStage = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    fractionDescription = fields.EmbeddedDocumentListField("SubstanceSourceMaterialFractionDescription", blank=True, required=False)
    geographicalLocation = fields.ListField(fields.CharField(), blank=True, required=False)
    organism = fields.EmbeddedDocumentField("SubstanceSourceMaterialOrganism", blank=True, required=False)
    organismId = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    organismName = fields.CharField(blank=True, required=False)
    parentSubstanceId = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    parentSubstanceName = fields.ListField(fields.CharField(), blank=True, required=False)
    partDescription = fields.EmbeddedDocumentListField("SubstanceSourceMaterialPartDescription", blank=True, required=False)
    sourceMaterialClass = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sourceMaterialState = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sourceMaterialType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        countryOfOrigin = EmbeddedAttribute(type="CodeableConcept", getter="countryOfOrigin", setter="countryOfOrigin", searcher=StringSearch("countryOfOrigin"))
        developmentStage = EmbeddedAttribute(type="CodeableConcept", getter="developmentStage", setter="developmentStage", searcher=StringSearch("developmentStage"))
        fractionDescription = EmbeddedAttribute(type="SubstanceSourceMaterialFractionDescription", getter="fractionDescription", setter="fractionDescription", searcher=StringSearch("fractionDescription"))
        geographicalLocation = Attribute(getter="geographicalLocation", setter="geographicalLocation", searcher=StringSearch("geographicalLocation"))
        organism = EmbeddedAttribute(type="SubstanceSourceMaterialOrganism", getter="organism", setter="organism", searcher=StringSearch("organism"))
        organismId = EmbeddedAttribute(type="Identifier", getter="organismId", setter="organismId", searcher=StringSearch("organismId"))
        organismName = Attribute(getter="organismName", setter="organismName", searcher=StringSearch("organismName"))
        parentSubstanceId = EmbeddedAttribute(type="Identifier", getter="parentSubstanceId", setter="parentSubstanceId", searcher=StringSearch("parentSubstanceId"))
        parentSubstanceName = Attribute(getter="parentSubstanceName", setter="parentSubstanceName", searcher=StringSearch("parentSubstanceName"))
        partDescription = EmbeddedAttribute(type="SubstanceSourceMaterialPartDescription", getter="partDescription", setter="partDescription", searcher=StringSearch("partDescription"))
        sourceMaterialClass = EmbeddedAttribute(type="CodeableConcept", getter="sourceMaterialClass", setter="sourceMaterialClass", searcher=StringSearch("sourceMaterialClass"))
        sourceMaterialState = EmbeddedAttribute(type="CodeableConcept", getter="sourceMaterialState", setter="sourceMaterialState", searcher=StringSearch("sourceMaterialState"))
        sourceMaterialType = EmbeddedAttribute(type="CodeableConcept", getter="sourceMaterialType", setter="sourceMaterialType", searcher=StringSearch("sourceMaterialType"))

class SubstanceSourceMaterialFractionDescription(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    fraction = fields.CharField(blank=True, required=False)
    materialType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        fraction = Attribute(getter="fraction", setter="fraction", searcher=StringSearch("fraction"))
        materialType = EmbeddedAttribute(type="CodeableConcept", getter="materialType", setter="materialType", searcher=StringSearch("materialType"))

class SubstanceSourceMaterialOrganism(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    author = fields.EmbeddedDocumentListField("SubstanceSourceMaterialOrganismAuthor", blank=True, required=False)
    family = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    genus = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    hybrid = fields.EmbeddedDocumentField("SubstanceSourceMaterialOrganismHybrid", blank=True, required=False)
    intraspecificDescription = fields.CharField(blank=True, required=False)
    intraspecificType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    organismGeneral = fields.EmbeddedDocumentField("SubstanceSourceMaterialOrganismOrganismGeneral", blank=True, required=False)
    species = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        author = EmbeddedAttribute(type="SubstanceSourceMaterialOrganismAuthor", getter="author", setter="author", searcher=StringSearch("author"))
        family = EmbeddedAttribute(type="CodeableConcept", getter="family", setter="family", searcher=StringSearch("family"))
        genus = EmbeddedAttribute(type="CodeableConcept", getter="genus", setter="genus", searcher=StringSearch("genus"))
        hybrid = EmbeddedAttribute(type="SubstanceSourceMaterialOrganismHybrid", getter="hybrid", setter="hybrid", searcher=StringSearch("hybrid"))
        intraspecificDescription = Attribute(getter="intraspecificDescription", setter="intraspecificDescription", searcher=StringSearch("intraspecificDescription"))
        intraspecificType = EmbeddedAttribute(type="CodeableConcept", getter="intraspecificType", setter="intraspecificType", searcher=StringSearch("intraspecificType"))
        organismGeneral = EmbeddedAttribute(type="SubstanceSourceMaterialOrganismOrganismGeneral", getter="organismGeneral", setter="organismGeneral", searcher=StringSearch("organismGeneral"))
        species = EmbeddedAttribute(type="CodeableConcept", getter="species", setter="species", searcher=StringSearch("species"))

class SubstanceSourceMaterialOrganismAuthor(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    authorDescription = fields.CharField(blank=True, required=False)
    authorType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        authorDescription = Attribute(getter="authorDescription", setter="authorDescription", searcher=StringSearch("authorDescription"))
        authorType = EmbeddedAttribute(type="CodeableConcept", getter="authorType", setter="authorType", searcher=StringSearch("authorType"))

class SubstanceSourceMaterialOrganismHybrid(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    hybridType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    maternalOrganismId = fields.CharField(blank=True, required=False)
    maternalOrganismName = fields.CharField(blank=True, required=False)
    paternalOrganismId = fields.CharField(blank=True, required=False)
    paternalOrganismName = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        hybridType = EmbeddedAttribute(type="CodeableConcept", getter="hybridType", setter="hybridType", searcher=StringSearch("hybridType"))
        maternalOrganismId = Attribute(getter="maternalOrganismId", setter="maternalOrganismId", searcher=StringSearch("maternalOrganismId"))
        maternalOrganismName = Attribute(getter="maternalOrganismName", setter="maternalOrganismName", searcher=StringSearch("maternalOrganismName"))
        paternalOrganismId = Attribute(getter="paternalOrganismId", setter="paternalOrganismId", searcher=StringSearch("paternalOrganismId"))
        paternalOrganismName = Attribute(getter="paternalOrganismName", setter="paternalOrganismName", searcher=StringSearch("paternalOrganismName"))

class SubstanceSourceMaterialOrganismOrganismGeneral(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    class_ = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    kingdom = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    order = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    phylum = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        class_ = EmbeddedAttribute(type="CodeableConcept", getter="class_", setter="class_", searcher=StringSearch("class_"))
        kingdom = EmbeddedAttribute(type="CodeableConcept", getter="kingdom", setter="kingdom", searcher=StringSearch("kingdom"))
        order = EmbeddedAttribute(type="CodeableConcept", getter="order", setter="order", searcher=StringSearch("order"))
        phylum = EmbeddedAttribute(type="CodeableConcept", getter="phylum", setter="phylum", searcher=StringSearch("phylum"))

class SubstanceSourceMaterialPartDescription(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    part = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    partLocation = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        part = EmbeddedAttribute(type="CodeableConcept", getter="part", setter="part", searcher=StringSearch("part"))
        partLocation = EmbeddedAttribute(type="CodeableConcept", getter="partLocation", setter="partLocation", searcher=StringSearch("partLocation"))

class SubstanceSpecification(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    code = fields.EmbeddedDocumentListField("SubstanceSpecificationstr", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    domain = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    moiety = fields.EmbeddedDocumentListField("SubstanceSpecificationMoiety", blank=True, required=False)
    molecularWeight = fields.EmbeddedDocumentListField("SubstanceSpecificationStructureIsotopeMolecularWeight", blank=True, required=False)
    name = fields.EmbeddedDocumentListField("SubstanceSpecificationName", blank=True, required=False)
    nucleicAcid = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    polymer = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    property = fields.EmbeddedDocumentListField("SubstanceSpecificationProperty", blank=True, required=False)
    protein = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    referenceInformation = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    relationship = fields.EmbeddedDocumentListField("SubstanceSpecificationRelationship", blank=True, required=False)
    source = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    sourceMaterial = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    structure = fields.EmbeddedDocumentField("SubstanceSpecificationStructure", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        code = EmbeddedAttribute(type="SubstanceSpecificationstr", getter="code", setter="code", searcher=StringSearch("code"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        domain = EmbeddedAttribute(type="CodeableConcept", getter="domain", setter="domain", searcher=StringSearch("domain"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        moiety = EmbeddedAttribute(type="SubstanceSpecificationMoiety", getter="moiety", setter="moiety", searcher=StringSearch("moiety"))
        molecularWeight = EmbeddedAttribute(type="SubstanceSpecificationStructureIsotopeMolecularWeight", getter="molecularWeight", setter="molecularWeight", searcher=StringSearch("molecularWeight"))
        name = EmbeddedAttribute(type="SubstanceSpecificationName", getter="name", setter="name", searcher=StringSearch("name"))
        nucleicAcid = EmbeddedAttribute(type="FHIRReference", getter="nucleicAcid", setter="nucleicAcid", searcher=StringSearch("nucleicAcid"))
        polymer = EmbeddedAttribute(type="FHIRReference", getter="polymer", setter="polymer", searcher=StringSearch("polymer"))
        property = EmbeddedAttribute(type="SubstanceSpecificationProperty", getter="property", setter="property", searcher=StringSearch("property"))
        protein = EmbeddedAttribute(type="FHIRReference", getter="protein", setter="protein", searcher=StringSearch("protein"))
        referenceInformation = EmbeddedAttribute(type="FHIRReference", getter="referenceInformation", setter="referenceInformation", searcher=StringSearch("referenceInformation"))
        relationship = EmbeddedAttribute(type="SubstanceSpecificationRelationship", getter="relationship", setter="relationship", searcher=StringSearch("relationship"))
        source = EmbeddedAttribute(type="FHIRReference", getter="source", setter="source", searcher=StringSearch("source"))
        sourceMaterial = EmbeddedAttribute(type="FHIRReference", getter="sourceMaterial", setter="sourceMaterial", searcher=StringSearch("sourceMaterial"))
        status = EmbeddedAttribute(type="CodeableConcept", getter="status", setter="status", searcher=StringSearch("status"))
        structure = EmbeddedAttribute(type="SubstanceSpecificationStructure", getter="structure", setter="structure", searcher=StringSearch("structure"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class SubstanceSpecificationMoiety(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amountQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    amountString = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    molecularFormula = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    opticalActivity = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    stereochemistry = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amountQuantity = EmbeddedAttribute(type="Quantity", getter="amountQuantity", setter="amountQuantity", searcher=StringSearch("amountQuantity"))
        amountString = Attribute(getter="amountString", setter="amountString", searcher=StringSearch("amountString"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        molecularFormula = Attribute(getter="molecularFormula", setter="molecularFormula", searcher=StringSearch("molecularFormula"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        opticalActivity = EmbeddedAttribute(type="CodeableConcept", getter="opticalActivity", setter="opticalActivity", searcher=StringSearch("opticalActivity"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))
        stereochemistry = EmbeddedAttribute(type="CodeableConcept", getter="stereochemistry", setter="stereochemistry", searcher=StringSearch("stereochemistry"))

class SubstanceSpecificationName(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    domain = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    language = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    official = fields.EmbeddedDocumentListField("SubstanceSpecificationNameOfficial", blank=True, required=False)
    preferred = fields.BooleanField(blank=True, required=False)
    source = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        domain = EmbeddedAttribute(type="CodeableConcept", getter="domain", setter="domain", searcher=StringSearch("domain"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        language = EmbeddedAttribute(type="CodeableConcept", getter="language", setter="language", searcher=StringSearch("language"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        official = EmbeddedAttribute(type="SubstanceSpecificationNameOfficial", getter="official", setter="official", searcher=StringSearch("official"))
        preferred = Attribute(getter="preferred", setter="preferred", searcher=StringSearch("preferred"))
        source = EmbeddedAttribute(type="FHIRReference", getter="source", setter="source", searcher=StringSearch("source"))
        status = EmbeddedAttribute(type="CodeableConcept", getter="status", setter="status", searcher=StringSearch("status"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class SubstanceSpecificationNameOfficial(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    authority = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    status = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        authority = EmbeddedAttribute(type="CodeableConcept", getter="authority", setter="authority", searcher=StringSearch("authority"))
        date = DateAttribute("date")
        status = EmbeddedAttribute(type="CodeableConcept", getter="status", setter="status", searcher=StringSearch("status"))

class SubstanceSpecificationProperty(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amountQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    amountString = fields.CharField(blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    definingSubstanceCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    definingSubstanceReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    parameters = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amountQuantity = EmbeddedAttribute(type="Quantity", getter="amountQuantity", setter="amountQuantity", searcher=StringSearch("amountQuantity"))
        amountString = Attribute(getter="amountString", setter="amountString", searcher=StringSearch("amountString"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        definingSubstanceCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="definingSubstanceCodeableConcept", setter="definingSubstanceCodeableConcept", searcher=StringSearch("definingSubstanceCodeableConcept"))
        definingSubstanceReference = EmbeddedAttribute(type="FHIRReference", getter="definingSubstanceReference", setter="definingSubstanceReference", searcher=StringSearch("definingSubstanceReference"))
        parameters = Attribute(getter="parameters", setter="parameters", searcher=StringSearch("parameters"))

class SubstanceSpecificationRelationship(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amountQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    amountRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    amountRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    amountRatioLowLimit = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    amountString = fields.CharField(blank=True, required=False)
    amountType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    isDefining = fields.BooleanField(blank=True, required=False)
    relationship = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    source = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    substanceCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    substanceReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amountQuantity = EmbeddedAttribute(type="Quantity", getter="amountQuantity", setter="amountQuantity", searcher=StringSearch("amountQuantity"))
        amountRange = EmbeddedAttribute(type="Range", getter="amountRange", setter="amountRange", searcher=StringSearch("amountRange"))
        amountRatio = EmbeddedAttribute(type="Ratio", getter="amountRatio", setter="amountRatio", searcher=StringSearch("amountRatio"))
        amountRatioLowLimit = EmbeddedAttribute(type="Ratio", getter="amountRatioLowLimit", setter="amountRatioLowLimit", searcher=StringSearch("amountRatioLowLimit"))
        amountString = Attribute(getter="amountString", setter="amountString", searcher=StringSearch("amountString"))
        amountType = EmbeddedAttribute(type="CodeableConcept", getter="amountType", setter="amountType", searcher=StringSearch("amountType"))
        isDefining = Attribute(getter="isDefining", setter="isDefining", searcher=StringSearch("isDefining"))
        relationship = EmbeddedAttribute(type="CodeableConcept", getter="relationship", setter="relationship", searcher=StringSearch("relationship"))
        source = EmbeddedAttribute(type="FHIRReference", getter="source", setter="source", searcher=StringSearch("source"))
        substanceCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="substanceCodeableConcept", setter="substanceCodeableConcept", searcher=StringSearch("substanceCodeableConcept"))
        substanceReference = EmbeddedAttribute(type="FHIRReference", getter="substanceReference", setter="substanceReference", searcher=StringSearch("substanceReference"))

class SubstanceSpecificationStructure(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    isotope = fields.EmbeddedDocumentListField("SubstanceSpecificationStructureIsotope", blank=True, required=False)
    molecularFormula = fields.CharField(blank=True, required=False)
    molecularFormulaByMoiety = fields.CharField(blank=True, required=False)
    molecularWeight = fields.EmbeddedDocumentField("SubstanceSpecificationStructureIsotopeMolecularWeight", blank=True, required=False)
    opticalActivity = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    representation = fields.EmbeddedDocumentListField("SubstanceSpecificationStructureRepresentation", blank=True, required=False)
    source = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    stereochemistry = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        isotope = EmbeddedAttribute(type="SubstanceSpecificationStructureIsotope", getter="isotope", setter="isotope", searcher=StringSearch("isotope"))
        molecularFormula = Attribute(getter="molecularFormula", setter="molecularFormula", searcher=StringSearch("molecularFormula"))
        molecularFormulaByMoiety = Attribute(getter="molecularFormulaByMoiety", setter="molecularFormulaByMoiety", searcher=StringSearch("molecularFormulaByMoiety"))
        molecularWeight = EmbeddedAttribute(type="SubstanceSpecificationStructureIsotopeMolecularWeight", getter="molecularWeight", setter="molecularWeight", searcher=StringSearch("molecularWeight"))
        opticalActivity = EmbeddedAttribute(type="CodeableConcept", getter="opticalActivity", setter="opticalActivity", searcher=StringSearch("opticalActivity"))
        representation = EmbeddedAttribute(type="SubstanceSpecificationStructureRepresentation", getter="representation", setter="representation", searcher=StringSearch("representation"))
        source = EmbeddedAttribute(type="FHIRReference", getter="source", setter="source", searcher=StringSearch("source"))
        stereochemistry = EmbeddedAttribute(type="CodeableConcept", getter="stereochemistry", setter="stereochemistry", searcher=StringSearch("stereochemistry"))

class SubstanceSpecificationStructureIsotope(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    halfLife = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    molecularWeight = fields.EmbeddedDocumentField("SubstanceSpecificationStructureIsotopeMolecularWeight", blank=True, required=False)
    name = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    substitution = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        halfLife = EmbeddedAttribute(type="Quantity", getter="halfLife", setter="halfLife", searcher=StringSearch("halfLife"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        molecularWeight = EmbeddedAttribute(type="SubstanceSpecificationStructureIsotopeMolecularWeight", getter="molecularWeight", setter="molecularWeight", searcher=StringSearch("molecularWeight"))
        name = EmbeddedAttribute(type="CodeableConcept", getter="name", setter="name", searcher=StringSearch("name"))
        substitution = EmbeddedAttribute(type="CodeableConcept", getter="substitution", setter="substitution", searcher=StringSearch("substitution"))

class SubstanceSpecificationStructureIsotopeMolecularWeight(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    method = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="Quantity", getter="amount", setter="amount", searcher=StringSearch("amount"))
        method = EmbeddedAttribute(type="CodeableConcept", getter="method", setter="method", searcher=StringSearch("method"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class SubstanceSpecificationStructureRepresentation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    attachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    representation = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        attachment = EmbeddedAttribute(type="Attachment", getter="attachment", setter="attachment", searcher=StringSearch("attachment"))
        representation = Attribute(getter="representation", setter="representation", searcher=StringSearch("representation"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class SubstanceSpecificationstr(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    source = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    statusDate = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        source = EmbeddedAttribute(type="FHIRReference", getter="source", setter="source", searcher=StringSearch("source"))
        status = EmbeddedAttribute(type="CodeableConcept", getter="status", setter="status", searcher=StringSearch("status"))
        statusDate = DateAttribute("statusDate")

class SupplyDelivery(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    destination = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    occurrenceTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    partOf = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    receiver = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    suppliedItem = fields.EmbeddedDocumentField("SupplyDeliverySuppliedItem", blank=True, required=False)
    supplier = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        destination = EmbeddedAttribute(type="FHIRReference", getter="destination", setter="destination", searcher=StringSearch("destination"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        occurrenceTiming = EmbeddedAttribute(type="Timing", getter="occurrenceTiming", setter="occurrenceTiming", searcher=StringSearch("occurrenceTiming"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        receiver = EmbeddedAttribute(type="FHIRReference", getter="receiver", setter="receiver", searcher=StringSearch("receiver"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        suppliedItem = EmbeddedAttribute(type="SupplyDeliverySuppliedItem", getter="suppliedItem", setter="suppliedItem", searcher=StringSearch("suppliedItem"))
        supplier = EmbeddedAttribute(type="FHIRReference", getter="supplier", setter="supplier", searcher=StringSearch("supplier"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class SupplyDeliverySuppliedItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    itemCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    itemReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        itemCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="itemCodeableConcept", setter="itemCodeableConcept", searcher=StringSearch("itemCodeableConcept"))
        itemReference = EmbeddedAttribute(type="FHIRReference", getter="itemReference", setter="itemReference", searcher=StringSearch("itemReference"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))

class SupplyRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    deliverFrom = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    deliverTo = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    itemCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    itemReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    occurrenceTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    parameter = fields.EmbeddedDocumentListField("SupplyRequestParameter", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=False, required=True)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    requester = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    supplier = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authoredOn = DateAttribute("authoredOn")
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        deliverFrom = EmbeddedAttribute(type="FHIRReference", getter="deliverFrom", setter="deliverFrom", searcher=StringSearch("deliverFrom"))
        deliverTo = EmbeddedAttribute(type="FHIRReference", getter="deliverTo", setter="deliverTo", searcher=StringSearch("deliverTo"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        itemCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="itemCodeableConcept", setter="itemCodeableConcept", searcher=StringSearch("itemCodeableConcept"))
        itemReference = EmbeddedAttribute(type="FHIRReference", getter="itemReference", setter="itemReference", searcher=StringSearch("itemReference"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        occurrenceTiming = EmbeddedAttribute(type="Timing", getter="occurrenceTiming", setter="occurrenceTiming", searcher=StringSearch("occurrenceTiming"))
        parameter = EmbeddedAttribute(type="SupplyRequestParameter", getter="parameter", setter="parameter", searcher=StringSearch("parameter"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        requester = EmbeddedAttribute(type="FHIRReference", getter="requester", setter="requester", searcher=StringSearch("requester"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        supplier = EmbeddedAttribute(type="FHIRReference", getter="supplier", setter="supplier", searcher=StringSearch("supplier"))

class SupplyRequestParameter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))

class Task(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    businessStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    executionPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    focus = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    for_ = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    groupIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    input = fields.EmbeddedDocumentListField("TaskInput", blank=True, required=False)
    instantiatesCanonical = fields.CharField(blank=True, required=False)
    instantiatesUri = fields.CharField(blank=True, required=False)
    insurance = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    intent = fields.CharField(blank=False, required=True)
    lastModified = fields.DateTimeField(blank=True, required=False)
    location = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    output = fields.EmbeddedDocumentListField("TaskOutput", blank=True, required=False)
    owner = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    partOf = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    performerType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    relevantHistory = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    requester = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    restriction = fields.EmbeddedDocumentField("TaskRestriction", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authoredOn = DateAttribute("authoredOn")
        basedOn = EmbeddedAttribute(type="FHIRReference", getter="basedOn", setter="basedOn", searcher=StringSearch("basedOn"))
        businessStatus = EmbeddedAttribute(type="CodeableConcept", getter="businessStatus", setter="businessStatus", searcher=StringSearch("businessStatus"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        executionPeriod = EmbeddedAttribute(type="Period", getter="executionPeriod", setter="executionPeriod", searcher=StringSearch("executionPeriod"))
        focus = EmbeddedAttribute(type="FHIRReference", getter="focus", setter="focus", searcher=StringSearch("focus"))
        for_ = EmbeddedAttribute(type="FHIRReference", getter="for_", setter="for_", searcher=StringSearch("for_"))
        groupIdentifier = EmbeddedAttribute(type="Identifier", getter="groupIdentifier", setter="groupIdentifier", searcher=StringSearch("groupIdentifier"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        input = EmbeddedAttribute(type="TaskInput", getter="input", setter="input", searcher=StringSearch("input"))
        instantiatesCanonical = Attribute(getter="instantiatesCanonical", setter="instantiatesCanonical", searcher=StringSearch("instantiatesCanonical"))
        instantiatesUri = Attribute(getter="instantiatesUri", setter="instantiatesUri", searcher=StringSearch("instantiatesUri"))
        insurance = EmbeddedAttribute(type="FHIRReference", getter="insurance", setter="insurance", searcher=StringSearch("insurance"))
        intent = Attribute(getter="intent", setter="intent", searcher=StringSearch("intent"))
        lastModified = DateAttribute("lastModified")
        location = EmbeddedAttribute(type="FHIRReference", getter="location", setter="location", searcher=StringSearch("location"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        output = EmbeddedAttribute(type="TaskOutput", getter="output", setter="output", searcher=StringSearch("output"))
        owner = EmbeddedAttribute(type="FHIRReference", getter="owner", setter="owner", searcher=StringSearch("owner"))
        partOf = EmbeddedAttribute(type="FHIRReference", getter="partOf", setter="partOf", searcher=StringSearch("partOf"))
        performerType = EmbeddedAttribute(type="CodeableConcept", getter="performerType", setter="performerType", searcher=StringSearch("performerType"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = EmbeddedAttribute(type="FHIRReference", getter="reasonReference", setter="reasonReference", searcher=StringSearch("reasonReference"))
        relevantHistory = EmbeddedAttribute(type="FHIRReference", getter="relevantHistory", setter="relevantHistory", searcher=StringSearch("relevantHistory"))
        requester = EmbeddedAttribute(type="FHIRReference", getter="requester", setter="requester", searcher=StringSearch("requester"))
        restriction = EmbeddedAttribute(type="TaskRestriction", getter="restriction", setter="restriction", searcher=StringSearch("restriction"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusReason = EmbeddedAttribute(type="CodeableConcept", getter="statusReason", setter="statusReason", searcher=StringSearch("statusReason"))

class TaskInput(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    valueAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    valueAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    valueAnnotation = fields.EmbeddedDocumentField("Annotation", blank=True, required=False)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    valueBase64Binary = fields.CharField(blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCanonical = fields.CharField(blank=True, required=False)
    valueCode = fields.CharField(blank=True, required=False)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    valueContactDetail = fields.EmbeddedDocumentField("ContactDetail", blank=True, required=False)
    valueContactPoint = fields.EmbeddedDocumentField("ContactPoint", blank=True, required=False)
    valueContributor = fields.EmbeddedDocumentField("Contributor", blank=True, required=False)
    valueCount = fields.EmbeddedDocumentField("Count", blank=True, required=False)
    valueDataRequirement = fields.EmbeddedDocumentField("DataRequirement", blank=True, required=False)
    valueDate = fields.DateTimeField(blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valueDecimal = fields.FloatField(blank=True, required=False)
    valueDistance = fields.EmbeddedDocumentField("Distance", blank=True, required=False)
    valueDosage = fields.EmbeddedDocumentField("Dosage", blank=True, required=False)
    valueDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    valueExpression = fields.EmbeddedDocumentField("Expression", blank=True, required=False)
    valueHumanName = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    valueId = fields.CharField(blank=True, required=False)
    valueIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    valueInstant = fields.DateTimeField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valueMarkdown = fields.CharField(blank=True, required=False)
    valueMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    valueOid = fields.CharField(blank=True, required=False)
    valueParameterDefinition = fields.EmbeddedDocumentField("ParameterDefinition", blank=True, required=False)
    valuePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    valuePositiveInt = fields.IntegerField(blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    valueRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    valueReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    valueRelatedArtifact = fields.EmbeddedDocumentField("RelatedArtifact", blank=True, required=False)
    valueSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    valueSignature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueTime = fields.DateTimeField(blank=True, required=False)
    valueTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    valueTriggerDefinition = fields.EmbeddedDocumentField("TriggerDefinition", blank=True, required=False)
    valueUnsignedInt = fields.IntegerField(blank=True, required=False)
    valueUri = fields.CharField(blank=True, required=False)
    valueUrl = fields.CharField(blank=True, required=False)
    valueUsageContext = fields.EmbeddedDocumentField("UsageContext", blank=True, required=False)
    valueUuid = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        valueAddress = EmbeddedAttribute(type="Address", getter="valueAddress", setter="valueAddress", searcher=StringSearch("valueAddress"))
        valueAge = EmbeddedAttribute(type="Age", getter="valueAge", setter="valueAge", searcher=StringSearch("valueAge"))
        valueAnnotation = EmbeddedAttribute(type="Annotation", getter="valueAnnotation", setter="valueAnnotation", searcher=StringSearch("valueAnnotation"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueBase64Binary = Attribute(getter="valueBase64Binary", setter="valueBase64Binary", searcher=StringSearch("valueBase64Binary"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCanonical = Attribute(getter="valueCanonical", setter="valueCanonical", searcher=StringSearch("valueCanonical"))
        valueCode = Attribute(getter="valueCode", setter="valueCode", searcher=StringSearch("valueCode"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueContactDetail = EmbeddedAttribute(type="ContactDetail", getter="valueContactDetail", setter="valueContactDetail", searcher=StringSearch("valueContactDetail"))
        valueContactPoint = EmbeddedAttribute(type="ContactPoint", getter="valueContactPoint", setter="valueContactPoint", searcher=StringSearch("valueContactPoint"))
        valueContributor = EmbeddedAttribute(type="Contributor", getter="valueContributor", setter="valueContributor", searcher=StringSearch("valueContributor"))
        valueCount = EmbeddedAttribute(type="Count", getter="valueCount", setter="valueCount", searcher=StringSearch("valueCount"))
        valueDataRequirement = EmbeddedAttribute(type="DataRequirement", getter="valueDataRequirement", setter="valueDataRequirement", searcher=StringSearch("valueDataRequirement"))
        valueDate = DateAttribute("valueDate")
        valueDateTime = DateAttribute("valueDateTime")
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueDistance = EmbeddedAttribute(type="Distance", getter="valueDistance", setter="valueDistance", searcher=StringSearch("valueDistance"))
        valueDosage = EmbeddedAttribute(type="Dosage", getter="valueDosage", setter="valueDosage", searcher=StringSearch("valueDosage"))
        valueDuration = EmbeddedAttribute(type="Duration", getter="valueDuration", setter="valueDuration", searcher=StringSearch("valueDuration"))
        valueExpression = EmbeddedAttribute(type="Expression", getter="valueExpression", setter="valueExpression", searcher=StringSearch("valueExpression"))
        valueHumanName = EmbeddedAttribute(type="HumanName", getter="valueHumanName", setter="valueHumanName", searcher=StringSearch("valueHumanName"))
        valueId = Attribute(getter="valueId", setter="valueId", searcher=StringSearch("valueId"))
        valueIdentifier = EmbeddedAttribute(type="Identifier", getter="valueIdentifier", setter="valueIdentifier", searcher=StringSearch("valueIdentifier"))
        valueInstant = DateAttribute("valueInstant")
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueMarkdown = Attribute(getter="valueMarkdown", setter="valueMarkdown", searcher=StringSearch("valueMarkdown"))
        valueMoney = EmbeddedAttribute(type="Money", getter="valueMoney", setter="valueMoney", searcher=StringSearch("valueMoney"))
        valueOid = Attribute(getter="valueOid", setter="valueOid", searcher=StringSearch("valueOid"))
        valueParameterDefinition = EmbeddedAttribute(type="ParameterDefinition", getter="valueParameterDefinition", setter="valueParameterDefinition", searcher=StringSearch("valueParameterDefinition"))
        valuePeriod = EmbeddedAttribute(type="Period", getter="valuePeriod", setter="valuePeriod", searcher=StringSearch("valuePeriod"))
        valuePositiveInt = Attribute(getter="valuePositiveInt", setter="valuePositiveInt", searcher=NumericSearch("valuePositiveInt"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))
        valueRatio = EmbeddedAttribute(type="Ratio", getter="valueRatio", setter="valueRatio", searcher=StringSearch("valueRatio"))
        valueReference = EmbeddedAttribute(type="FHIRReference", getter="valueReference", setter="valueReference", searcher=StringSearch("valueReference"))
        valueRelatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="valueRelatedArtifact", setter="valueRelatedArtifact", searcher=StringSearch("valueRelatedArtifact"))
        valueSampledData = EmbeddedAttribute(type="SampledData", getter="valueSampledData", setter="valueSampledData", searcher=StringSearch("valueSampledData"))
        valueSignature = EmbeddedAttribute(type="Signature", getter="valueSignature", setter="valueSignature", searcher=StringSearch("valueSignature"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")
        valueTiming = EmbeddedAttribute(type="Timing", getter="valueTiming", setter="valueTiming", searcher=StringSearch("valueTiming"))
        valueTriggerDefinition = EmbeddedAttribute(type="TriggerDefinition", getter="valueTriggerDefinition", setter="valueTriggerDefinition", searcher=StringSearch("valueTriggerDefinition"))
        valueUnsignedInt = Attribute(getter="valueUnsignedInt", setter="valueUnsignedInt", searcher=NumericSearch("valueUnsignedInt"))
        valueUri = Attribute(getter="valueUri", setter="valueUri", searcher=StringSearch("valueUri"))
        valueUrl = Attribute(getter="valueUrl", setter="valueUrl", searcher=StringSearch("valueUrl"))
        valueUsageContext = EmbeddedAttribute(type="UsageContext", getter="valueUsageContext", setter="valueUsageContext", searcher=StringSearch("valueUsageContext"))
        valueUuid = Attribute(getter="valueUuid", setter="valueUuid", searcher=StringSearch("valueUuid"))

class TaskOutput(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    valueAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    valueAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    valueAnnotation = fields.EmbeddedDocumentField("Annotation", blank=True, required=False)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    valueBase64Binary = fields.CharField(blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCanonical = fields.CharField(blank=True, required=False)
    valueCode = fields.CharField(blank=True, required=False)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    valueContactDetail = fields.EmbeddedDocumentField("ContactDetail", blank=True, required=False)
    valueContactPoint = fields.EmbeddedDocumentField("ContactPoint", blank=True, required=False)
    valueContributor = fields.EmbeddedDocumentField("Contributor", blank=True, required=False)
    valueCount = fields.EmbeddedDocumentField("Count", blank=True, required=False)
    valueDataRequirement = fields.EmbeddedDocumentField("DataRequirement", blank=True, required=False)
    valueDate = fields.DateTimeField(blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valueDecimal = fields.FloatField(blank=True, required=False)
    valueDistance = fields.EmbeddedDocumentField("Distance", blank=True, required=False)
    valueDosage = fields.EmbeddedDocumentField("Dosage", blank=True, required=False)
    valueDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    valueExpression = fields.EmbeddedDocumentField("Expression", blank=True, required=False)
    valueHumanName = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    valueId = fields.CharField(blank=True, required=False)
    valueIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    valueInstant = fields.DateTimeField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valueMarkdown = fields.CharField(blank=True, required=False)
    valueMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    valueOid = fields.CharField(blank=True, required=False)
    valueParameterDefinition = fields.EmbeddedDocumentField("ParameterDefinition", blank=True, required=False)
    valuePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    valuePositiveInt = fields.IntegerField(blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    valueRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    valueReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    valueRelatedArtifact = fields.EmbeddedDocumentField("RelatedArtifact", blank=True, required=False)
    valueSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    valueSignature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueTime = fields.DateTimeField(blank=True, required=False)
    valueTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    valueTriggerDefinition = fields.EmbeddedDocumentField("TriggerDefinition", blank=True, required=False)
    valueUnsignedInt = fields.IntegerField(blank=True, required=False)
    valueUri = fields.CharField(blank=True, required=False)
    valueUrl = fields.CharField(blank=True, required=False)
    valueUsageContext = fields.EmbeddedDocumentField("UsageContext", blank=True, required=False)
    valueUuid = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        valueAddress = EmbeddedAttribute(type="Address", getter="valueAddress", setter="valueAddress", searcher=StringSearch("valueAddress"))
        valueAge = EmbeddedAttribute(type="Age", getter="valueAge", setter="valueAge", searcher=StringSearch("valueAge"))
        valueAnnotation = EmbeddedAttribute(type="Annotation", getter="valueAnnotation", setter="valueAnnotation", searcher=StringSearch("valueAnnotation"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueBase64Binary = Attribute(getter="valueBase64Binary", setter="valueBase64Binary", searcher=StringSearch("valueBase64Binary"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCanonical = Attribute(getter="valueCanonical", setter="valueCanonical", searcher=StringSearch("valueCanonical"))
        valueCode = Attribute(getter="valueCode", setter="valueCode", searcher=StringSearch("valueCode"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueContactDetail = EmbeddedAttribute(type="ContactDetail", getter="valueContactDetail", setter="valueContactDetail", searcher=StringSearch("valueContactDetail"))
        valueContactPoint = EmbeddedAttribute(type="ContactPoint", getter="valueContactPoint", setter="valueContactPoint", searcher=StringSearch("valueContactPoint"))
        valueContributor = EmbeddedAttribute(type="Contributor", getter="valueContributor", setter="valueContributor", searcher=StringSearch("valueContributor"))
        valueCount = EmbeddedAttribute(type="Count", getter="valueCount", setter="valueCount", searcher=StringSearch("valueCount"))
        valueDataRequirement = EmbeddedAttribute(type="DataRequirement", getter="valueDataRequirement", setter="valueDataRequirement", searcher=StringSearch("valueDataRequirement"))
        valueDate = DateAttribute("valueDate")
        valueDateTime = DateAttribute("valueDateTime")
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueDistance = EmbeddedAttribute(type="Distance", getter="valueDistance", setter="valueDistance", searcher=StringSearch("valueDistance"))
        valueDosage = EmbeddedAttribute(type="Dosage", getter="valueDosage", setter="valueDosage", searcher=StringSearch("valueDosage"))
        valueDuration = EmbeddedAttribute(type="Duration", getter="valueDuration", setter="valueDuration", searcher=StringSearch("valueDuration"))
        valueExpression = EmbeddedAttribute(type="Expression", getter="valueExpression", setter="valueExpression", searcher=StringSearch("valueExpression"))
        valueHumanName = EmbeddedAttribute(type="HumanName", getter="valueHumanName", setter="valueHumanName", searcher=StringSearch("valueHumanName"))
        valueId = Attribute(getter="valueId", setter="valueId", searcher=StringSearch("valueId"))
        valueIdentifier = EmbeddedAttribute(type="Identifier", getter="valueIdentifier", setter="valueIdentifier", searcher=StringSearch("valueIdentifier"))
        valueInstant = DateAttribute("valueInstant")
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueMarkdown = Attribute(getter="valueMarkdown", setter="valueMarkdown", searcher=StringSearch("valueMarkdown"))
        valueMoney = EmbeddedAttribute(type="Money", getter="valueMoney", setter="valueMoney", searcher=StringSearch("valueMoney"))
        valueOid = Attribute(getter="valueOid", setter="valueOid", searcher=StringSearch("valueOid"))
        valueParameterDefinition = EmbeddedAttribute(type="ParameterDefinition", getter="valueParameterDefinition", setter="valueParameterDefinition", searcher=StringSearch("valueParameterDefinition"))
        valuePeriod = EmbeddedAttribute(type="Period", getter="valuePeriod", setter="valuePeriod", searcher=StringSearch("valuePeriod"))
        valuePositiveInt = Attribute(getter="valuePositiveInt", setter="valuePositiveInt", searcher=NumericSearch("valuePositiveInt"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))
        valueRatio = EmbeddedAttribute(type="Ratio", getter="valueRatio", setter="valueRatio", searcher=StringSearch("valueRatio"))
        valueReference = EmbeddedAttribute(type="FHIRReference", getter="valueReference", setter="valueReference", searcher=StringSearch("valueReference"))
        valueRelatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="valueRelatedArtifact", setter="valueRelatedArtifact", searcher=StringSearch("valueRelatedArtifact"))
        valueSampledData = EmbeddedAttribute(type="SampledData", getter="valueSampledData", setter="valueSampledData", searcher=StringSearch("valueSampledData"))
        valueSignature = EmbeddedAttribute(type="Signature", getter="valueSignature", setter="valueSignature", searcher=StringSearch("valueSignature"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")
        valueTiming = EmbeddedAttribute(type="Timing", getter="valueTiming", setter="valueTiming", searcher=StringSearch("valueTiming"))
        valueTriggerDefinition = EmbeddedAttribute(type="TriggerDefinition", getter="valueTriggerDefinition", setter="valueTriggerDefinition", searcher=StringSearch("valueTriggerDefinition"))
        valueUnsignedInt = Attribute(getter="valueUnsignedInt", setter="valueUnsignedInt", searcher=NumericSearch("valueUnsignedInt"))
        valueUri = Attribute(getter="valueUri", setter="valueUri", searcher=StringSearch("valueUri"))
        valueUrl = Attribute(getter="valueUrl", setter="valueUrl", searcher=StringSearch("valueUrl"))
        valueUsageContext = EmbeddedAttribute(type="UsageContext", getter="valueUsageContext", setter="valueUsageContext", searcher=StringSearch("valueUsageContext"))
        valueUuid = Attribute(getter="valueUuid", setter="valueUuid", searcher=StringSearch("valueUuid"))

class TaskRestriction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    recipient = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    repetitions = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        recipient = EmbeddedAttribute(type="FHIRReference", getter="recipient", setter="recipient", searcher=StringSearch("recipient"))
        repetitions = Attribute(getter="repetitions", setter="repetitions", searcher=NumericSearch("repetitions"))

class TerminologyCapabilities(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    closure = fields.EmbeddedDocumentField("TerminologyCapabilitiesClosure", blank=True, required=False)
    codeSearch = fields.CharField(blank=True, required=False)
    codeSystem = fields.EmbeddedDocumentListField("TerminologyCapabilitiesCodeSystem", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    expansion = fields.EmbeddedDocumentField("TerminologyCapabilitiesExpansion", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    implementation = fields.EmbeddedDocumentField("TerminologyCapabilitiesImplementation", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    kind = fields.CharField(blank=False, required=True)
    lockedDate = fields.BooleanField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    software = fields.EmbeddedDocumentField("TerminologyCapabilitiesSoftware", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    translation = fields.EmbeddedDocumentField("TerminologyCapabilitiesTranslation", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    validateCode = fields.EmbeddedDocumentField("TerminologyCapabilitiesValidateCode", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        closure = EmbeddedAttribute(type="TerminologyCapabilitiesClosure", getter="closure", setter="closure", searcher=StringSearch("closure"))
        codeSearch = Attribute(getter="codeSearch", setter="codeSearch", searcher=StringSearch("codeSearch"))
        codeSystem = EmbeddedAttribute(type="TerminologyCapabilitiesCodeSystem", getter="codeSystem", setter="codeSystem", searcher=StringSearch("codeSystem"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        expansion = EmbeddedAttribute(type="TerminologyCapabilitiesExpansion", getter="expansion", setter="expansion", searcher=StringSearch("expansion"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        implementation = EmbeddedAttribute(type="TerminologyCapabilitiesImplementation", getter="implementation", setter="implementation", searcher=StringSearch("implementation"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))
        lockedDate = Attribute(getter="lockedDate", setter="lockedDate", searcher=StringSearch("lockedDate"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        software = EmbeddedAttribute(type="TerminologyCapabilitiesSoftware", getter="software", setter="software", searcher=StringSearch("software"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        translation = EmbeddedAttribute(type="TerminologyCapabilitiesTranslation", getter="translation", setter="translation", searcher=StringSearch("translation"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        validateCode = EmbeddedAttribute(type="TerminologyCapabilitiesValidateCode", getter="validateCode", setter="validateCode", searcher=StringSearch("validateCode"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class TerminologyCapabilitiesClosure(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    translation = fields.BooleanField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        translation = Attribute(getter="translation", setter="translation", searcher=StringSearch("translation"))

class TerminologyCapabilitiesCodeSystem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    subsumption = fields.BooleanField(blank=True, required=False)
    uri = fields.CharField(blank=True, required=False)
    version = fields.EmbeddedDocumentListField("TerminologyCapabilitiesCodeSystemVersion", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        subsumption = Attribute(getter="subsumption", setter="subsumption", searcher=StringSearch("subsumption"))
        uri = Attribute(getter="uri", setter="uri", searcher=StringSearch("uri"))
        version = EmbeddedAttribute(type="TerminologyCapabilitiesCodeSystemVersion", getter="version", setter="version", searcher=StringSearch("version"))

class TerminologyCapabilitiesCodeSystemVersion(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    compositional = fields.BooleanField(blank=True, required=False)
    filter = fields.EmbeddedDocumentListField("TerminologyCapabilitiesCodeSystemVersionFilter", blank=True, required=False)
    isDefault = fields.BooleanField(blank=True, required=False)
    language = fields.ListField(fields.CharField(), blank=True, required=False)
    property = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        compositional = Attribute(getter="compositional", setter="compositional", searcher=StringSearch("compositional"))
        filter = EmbeddedAttribute(type="TerminologyCapabilitiesCodeSystemVersionFilter", getter="filter", setter="filter", searcher=StringSearch("filter"))
        isDefault = Attribute(getter="isDefault", setter="isDefault", searcher=StringSearch("isDefault"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        property = Attribute(getter="property", setter="property", searcher=StringSearch("property"))

class TerminologyCapabilitiesCodeSystemVersionFilter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    op = fields.ListField(fields.CharField(), blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        op = Attribute(getter="op", setter="op", searcher=StringSearch("op"))

class TerminologyCapabilitiesExpansion(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    hierarchical = fields.BooleanField(blank=True, required=False)
    incomplete = fields.BooleanField(blank=True, required=False)
    paging = fields.BooleanField(blank=True, required=False)
    parameter = fields.EmbeddedDocumentListField("TerminologyCapabilitiesExpansionParameter", blank=True, required=False)
    textFilter = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        hierarchical = Attribute(getter="hierarchical", setter="hierarchical", searcher=StringSearch("hierarchical"))
        incomplete = Attribute(getter="incomplete", setter="incomplete", searcher=StringSearch("incomplete"))
        paging = Attribute(getter="paging", setter="paging", searcher=StringSearch("paging"))
        parameter = EmbeddedAttribute(type="TerminologyCapabilitiesExpansionParameter", getter="parameter", setter="parameter", searcher=StringSearch("parameter"))
        textFilter = Attribute(getter="textFilter", setter="textFilter", searcher=StringSearch("textFilter"))

class TerminologyCapabilitiesExpansionParameter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))

class TerminologyCapabilitiesImplementation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class TerminologyCapabilitiesSoftware(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class TerminologyCapabilitiesTranslation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    needsMap = fields.BooleanField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        needsMap = Attribute(getter="needsMap", setter="needsMap", searcher=StringSearch("needsMap"))

class TerminologyCapabilitiesValidateCode(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    translations = fields.BooleanField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        translations = Attribute(getter="translations", setter="translations", searcher=StringSearch("translations"))

class TestReport(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    issued = fields.DateTimeField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    participant = fields.EmbeddedDocumentListField("TestReportParticipant", blank=True, required=False)
    result = fields.CharField(blank=False, required=True)
    score = fields.FloatField(blank=True, required=False)
    setup = fields.EmbeddedDocumentField("TestReportSetup", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    teardown = fields.EmbeddedDocumentField("TestReportTeardown", blank=True, required=False)
    test = fields.EmbeddedDocumentListField("TestReportTest", blank=True, required=False)
    testScript = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    tester = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        issued = DateAttribute("issued")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        participant = EmbeddedAttribute(type="TestReportParticipant", getter="participant", setter="participant", searcher=StringSearch("participant"))
        result = Attribute(getter="result", setter="result", searcher=StringSearch("result"))
        score = Attribute(getter="score", setter="score", searcher=NumericSearch("score"))
        setup = EmbeddedAttribute(type="TestReportSetup", getter="setup", setter="setup", searcher=StringSearch("setup"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        teardown = EmbeddedAttribute(type="TestReportTeardown", getter="teardown", setter="teardown", searcher=StringSearch("teardown"))
        test = EmbeddedAttribute(type="TestReportTest", getter="test", setter="test", searcher=StringSearch("test"))
        testScript = EmbeddedAttribute(type="FHIRReference", getter="testScript", setter="testScript", searcher=StringSearch("testScript"))
        tester = Attribute(getter="tester", setter="tester", searcher=StringSearch("tester"))

class TestReportParticipant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    uri = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        uri = Attribute(getter="uri", setter="uri", searcher=StringSearch("uri"))

class TestReportSetup(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("TestReportSetupAction", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="TestReportSetupAction", getter="action", setter="action", searcher=StringSearch("action"))

class TestReportSetupAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    assert_ = fields.EmbeddedDocumentField("TestReportSetupActionAssert", blank=True, required=False)
    operation = fields.EmbeddedDocumentField("TestReportSetupActionOperation", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        assert_ = EmbeddedAttribute(type="TestReportSetupActionAssert", getter="assert_", setter="assert_", searcher=StringSearch("assert_"))
        operation = EmbeddedAttribute(type="TestReportSetupActionOperation", getter="operation", setter="operation", searcher=StringSearch("operation"))

class TestReportSetupActionAssert(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    detail = fields.CharField(blank=True, required=False)
    message = fields.CharField(blank=True, required=False)
    result = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        detail = Attribute(getter="detail", setter="detail", searcher=StringSearch("detail"))
        message = Attribute(getter="message", setter="message", searcher=StringSearch("message"))
        result = Attribute(getter="result", setter="result", searcher=StringSearch("result"))

class TestReportSetupActionOperation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    detail = fields.CharField(blank=True, required=False)
    message = fields.CharField(blank=True, required=False)
    result = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        detail = Attribute(getter="detail", setter="detail", searcher=StringSearch("detail"))
        message = Attribute(getter="message", setter="message", searcher=StringSearch("message"))
        result = Attribute(getter="result", setter="result", searcher=StringSearch("result"))

class TestReportTeardown(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("TestReportTeardownAction", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="TestReportTeardownAction", getter="action", setter="action", searcher=StringSearch("action"))

class TestReportTeardownAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    operation = fields.EmbeddedDocumentField("TestReportSetupActionOperation", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        operation = EmbeddedAttribute(type="TestReportSetupActionOperation", getter="operation", setter="operation", searcher=StringSearch("operation"))

class TestReportTest(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("TestReportTestAction", blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="TestReportTestAction", getter="action", setter="action", searcher=StringSearch("action"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))

class TestReportTestAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    assert_ = fields.EmbeddedDocumentField("TestReportSetupActionAssert", blank=True, required=False)
    operation = fields.EmbeddedDocumentField("TestReportSetupActionOperation", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        assert_ = EmbeddedAttribute(type="TestReportSetupActionAssert", getter="assert_", setter="assert_", searcher=StringSearch("assert_"))
        operation = EmbeddedAttribute(type="TestReportSetupActionOperation", getter="operation", setter="operation", searcher=StringSearch("operation"))

class TestScript(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    destination = fields.EmbeddedDocumentListField("TestScriptDestination", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    fixture = fields.EmbeddedDocumentListField("TestScriptFixture", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    metadata = fields.EmbeddedDocumentField("TestScriptMetadata", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    origin = fields.EmbeddedDocumentListField("TestScriptOrigin", blank=True, required=False)
    profile = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    setup = fields.EmbeddedDocumentField("TestScriptSetup", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    teardown = fields.EmbeddedDocumentField("TestScriptTeardown", blank=True, required=False)
    test = fields.EmbeddedDocumentListField("TestScriptTest", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=False, required=True)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    variable = fields.EmbeddedDocumentListField("TestScriptVariable", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        destination = EmbeddedAttribute(type="TestScriptDestination", getter="destination", setter="destination", searcher=StringSearch("destination"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        fixture = EmbeddedAttribute(type="TestScriptFixture", getter="fixture", setter="fixture", searcher=StringSearch("fixture"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        metadata = EmbeddedAttribute(type="TestScriptMetadata", getter="metadata", setter="metadata", searcher=StringSearch("metadata"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        origin = EmbeddedAttribute(type="TestScriptOrigin", getter="origin", setter="origin", searcher=StringSearch("origin"))
        profile = EmbeddedAttribute(type="FHIRReference", getter="profile", setter="profile", searcher=StringSearch("profile"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        setup = EmbeddedAttribute(type="TestScriptSetup", getter="setup", setter="setup", searcher=StringSearch("setup"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        teardown = EmbeddedAttribute(type="TestScriptTeardown", getter="teardown", setter="teardown", searcher=StringSearch("teardown"))
        test = EmbeddedAttribute(type="TestScriptTest", getter="test", setter="test", searcher=StringSearch("test"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        variable = EmbeddedAttribute(type="TestScriptVariable", getter="variable", setter="variable", searcher=StringSearch("variable"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class TestScriptDestination(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    index = fields.IntegerField(blank=False, required=True)
    profile = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        index = Attribute(getter="index", setter="index", searcher=NumericSearch("index"))
        profile = EmbeddedAttribute(type="Coding", getter="profile", setter="profile", searcher=StringSearch("profile"))

class TestScriptFixture(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    autocreate = fields.BooleanField(blank=False, required=True)
    autodelete = fields.BooleanField(blank=False, required=True)
    resource = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        autocreate = Attribute(getter="autocreate", setter="autocreate", searcher=StringSearch("autocreate"))
        autodelete = Attribute(getter="autodelete", setter="autodelete", searcher=StringSearch("autodelete"))
        resource = EmbeddedAttribute(type="FHIRReference", getter="resource", setter="resource", searcher=StringSearch("resource"))

class TestScriptMetadata(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    capability = fields.EmbeddedDocumentListField("TestScriptMetadataCapability", blank=False, required=True)
    link = fields.EmbeddedDocumentListField("TestScriptMetadataLink", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        capability = EmbeddedAttribute(type="TestScriptMetadataCapability", getter="capability", setter="capability", searcher=StringSearch("capability"))
        link = EmbeddedAttribute(type="TestScriptMetadataLink", getter="link", setter="link", searcher=StringSearch("link"))

class TestScriptMetadataCapability(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    capabilities = fields.CharField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    destination = fields.IntegerField(blank=True, required=False)
    link = fields.ListField(fields.CharField(), blank=True, required=False)
    origin = fields.ListField(fields.IntegerField(), blank=True, required=False)
    required = fields.BooleanField(blank=False, required=True)
    validated = fields.BooleanField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        capabilities = Attribute(getter="capabilities", setter="capabilities", searcher=StringSearch("capabilities"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        destination = Attribute(getter="destination", setter="destination", searcher=NumericSearch("destination"))
        link = Attribute(getter="link", setter="link", searcher=StringSearch("link"))
        origin = Attribute(getter="origin", setter="origin", searcher=NumericSearch("origin"))
        required = Attribute(getter="required", setter="required", searcher=StringSearch("required"))
        validated = Attribute(getter="validated", setter="validated", searcher=StringSearch("validated"))

class TestScriptMetadataLink(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class TestScriptOrigin(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    index = fields.IntegerField(blank=False, required=True)
    profile = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        index = Attribute(getter="index", setter="index", searcher=NumericSearch("index"))
        profile = EmbeddedAttribute(type="Coding", getter="profile", setter="profile", searcher=StringSearch("profile"))

class TestScriptSetup(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("TestScriptSetupAction", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="TestScriptSetupAction", getter="action", setter="action", searcher=StringSearch("action"))

class TestScriptSetupAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    assert_ = fields.EmbeddedDocumentField("TestScriptSetupActionAssert", blank=True, required=False)
    operation = fields.EmbeddedDocumentField("TestScriptSetupActionOperation", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        assert_ = EmbeddedAttribute(type="TestScriptSetupActionAssert", getter="assert_", setter="assert_", searcher=StringSearch("assert_"))
        operation = EmbeddedAttribute(type="TestScriptSetupActionOperation", getter="operation", setter="operation", searcher=StringSearch("operation"))

class TestScriptSetupActionAssert(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    compareToSourceExpression = fields.CharField(blank=True, required=False)
    compareToSourceId = fields.CharField(blank=True, required=False)
    compareToSourcePath = fields.CharField(blank=True, required=False)
    contentType = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    direction = fields.CharField(blank=True, required=False)
    expression = fields.CharField(blank=True, required=False)
    headerField = fields.CharField(blank=True, required=False)
    label = fields.CharField(blank=True, required=False)
    minimumId = fields.CharField(blank=True, required=False)
    navigationLinks = fields.BooleanField(blank=True, required=False)
    operator = fields.CharField(blank=True, required=False)
    path = fields.CharField(blank=True, required=False)
    requestMethod = fields.CharField(blank=True, required=False)
    requestURL = fields.CharField(blank=True, required=False)
    resource = fields.CharField(blank=True, required=False)
    response = fields.CharField(blank=True, required=False)
    responseCode = fields.CharField(blank=True, required=False)
    sourceId = fields.CharField(blank=True, required=False)
    validateProfileId = fields.CharField(blank=True, required=False)
    value = fields.CharField(blank=True, required=False)
    warningOnly = fields.BooleanField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        compareToSourceExpression = Attribute(getter="compareToSourceExpression", setter="compareToSourceExpression", searcher=StringSearch("compareToSourceExpression"))
        compareToSourceId = Attribute(getter="compareToSourceId", setter="compareToSourceId", searcher=StringSearch("compareToSourceId"))
        compareToSourcePath = Attribute(getter="compareToSourcePath", setter="compareToSourcePath", searcher=StringSearch("compareToSourcePath"))
        contentType = Attribute(getter="contentType", setter="contentType", searcher=StringSearch("contentType"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        direction = Attribute(getter="direction", setter="direction", searcher=StringSearch("direction"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        headerField = Attribute(getter="headerField", setter="headerField", searcher=StringSearch("headerField"))
        label = Attribute(getter="label", setter="label", searcher=StringSearch("label"))
        minimumId = Attribute(getter="minimumId", setter="minimumId", searcher=StringSearch("minimumId"))
        navigationLinks = Attribute(getter="navigationLinks", setter="navigationLinks", searcher=StringSearch("navigationLinks"))
        operator = Attribute(getter="operator", setter="operator", searcher=StringSearch("operator"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))
        requestMethod = Attribute(getter="requestMethod", setter="requestMethod", searcher=StringSearch("requestMethod"))
        requestURL = Attribute(getter="requestURL", setter="requestURL", searcher=StringSearch("requestURL"))
        resource = Attribute(getter="resource", setter="resource", searcher=StringSearch("resource"))
        response = Attribute(getter="response", setter="response", searcher=StringSearch("response"))
        responseCode = Attribute(getter="responseCode", setter="responseCode", searcher=StringSearch("responseCode"))
        sourceId = Attribute(getter="sourceId", setter="sourceId", searcher=StringSearch("sourceId"))
        validateProfileId = Attribute(getter="validateProfileId", setter="validateProfileId", searcher=StringSearch("validateProfileId"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))
        warningOnly = Attribute(getter="warningOnly", setter="warningOnly", searcher=StringSearch("warningOnly"))

class TestScriptSetupActionOperation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    accept = fields.CharField(blank=True, required=False)
    contentType = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    destination = fields.IntegerField(blank=True, required=False)
    encodeRequestUrl = fields.BooleanField(blank=False, required=True)
    label = fields.CharField(blank=True, required=False)
    method = fields.CharField(blank=True, required=False)
    origin = fields.IntegerField(blank=True, required=False)
    params = fields.CharField(blank=True, required=False)
    requestHeader = fields.EmbeddedDocumentListField("TestScriptSetupActionOperationRequestHeader", blank=True, required=False)
    requestId = fields.CharField(blank=True, required=False)
    resource = fields.CharField(blank=True, required=False)
    responseId = fields.CharField(blank=True, required=False)
    sourceId = fields.CharField(blank=True, required=False)
    targetId = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        accept = Attribute(getter="accept", setter="accept", searcher=StringSearch("accept"))
        contentType = Attribute(getter="contentType", setter="contentType", searcher=StringSearch("contentType"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        destination = Attribute(getter="destination", setter="destination", searcher=NumericSearch("destination"))
        encodeRequestUrl = Attribute(getter="encodeRequestUrl", setter="encodeRequestUrl", searcher=StringSearch("encodeRequestUrl"))
        label = Attribute(getter="label", setter="label", searcher=StringSearch("label"))
        method = Attribute(getter="method", setter="method", searcher=StringSearch("method"))
        origin = Attribute(getter="origin", setter="origin", searcher=NumericSearch("origin"))
        params = Attribute(getter="params", setter="params", searcher=StringSearch("params"))
        requestHeader = EmbeddedAttribute(type="TestScriptSetupActionOperationRequestHeader", getter="requestHeader", setter="requestHeader", searcher=StringSearch("requestHeader"))
        requestId = Attribute(getter="requestId", setter="requestId", searcher=StringSearch("requestId"))
        resource = Attribute(getter="resource", setter="resource", searcher=StringSearch("resource"))
        responseId = Attribute(getter="responseId", setter="responseId", searcher=StringSearch("responseId"))
        sourceId = Attribute(getter="sourceId", setter="sourceId", searcher=StringSearch("sourceId"))
        targetId = Attribute(getter="targetId", setter="targetId", searcher=StringSearch("targetId"))
        type = EmbeddedAttribute(type="Coding", getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class TestScriptSetupActionOperationRequestHeader(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    field = fields.CharField(blank=False, required=True)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        field = Attribute(getter="field", setter="field", searcher=StringSearch("field"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class TestScriptTeardown(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("TestScriptTeardownAction", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="TestScriptTeardownAction", getter="action", setter="action", searcher=StringSearch("action"))

class TestScriptTeardownAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    operation = fields.EmbeddedDocumentField("TestScriptSetupActionOperation", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        operation = EmbeddedAttribute(type="TestScriptSetupActionOperation", getter="operation", setter="operation", searcher=StringSearch("operation"))

class TestScriptTest(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("TestScriptTestAction", blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="TestScriptTestAction", getter="action", setter="action", searcher=StringSearch("action"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))

class TestScriptTestAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    assert_ = fields.EmbeddedDocumentField("TestScriptSetupActionAssert", blank=True, required=False)
    operation = fields.EmbeddedDocumentField("TestScriptSetupActionOperation", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        assert_ = EmbeddedAttribute(type="TestScriptSetupActionAssert", getter="assert_", setter="assert_", searcher=StringSearch("assert_"))
        operation = EmbeddedAttribute(type="TestScriptSetupActionOperation", getter="operation", setter="operation", searcher=StringSearch("operation"))

class TestScriptVariable(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    defaultValue = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    expression = fields.CharField(blank=True, required=False)
    headerField = fields.CharField(blank=True, required=False)
    hint = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    path = fields.CharField(blank=True, required=False)
    sourceId = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        defaultValue = Attribute(getter="defaultValue", setter="defaultValue", searcher=StringSearch("defaultValue"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        headerField = Attribute(getter="headerField", setter="headerField", searcher=StringSearch("headerField"))
        hint = Attribute(getter="hint", setter="hint", searcher=StringSearch("hint"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))
        sourceId = Attribute(getter="sourceId", setter="sourceId", searcher=StringSearch("sourceId"))

class Timing(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    event = fields.DateTimeField(blank=True, required=False)
    repeat = fields.EmbeddedDocumentField("TimingRepeat", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        event = DateAttribute("event")
        repeat = EmbeddedAttribute(type="TimingRepeat", getter="repeat", setter="repeat", searcher=StringSearch("repeat"))

class TimingRepeat(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    boundsDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    boundsPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    boundsRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    count = fields.IntegerField(blank=True, required=False)
    countMax = fields.IntegerField(blank=True, required=False)
    dayOfWeek = fields.ListField(fields.CharField(), blank=True, required=False)
    duration = fields.FloatField(blank=True, required=False)
    durationMax = fields.FloatField(blank=True, required=False)
    durationUnit = fields.CharField(blank=True, required=False)
    frequency = fields.IntegerField(blank=True, required=False)
    frequencyMax = fields.IntegerField(blank=True, required=False)
    offset = fields.IntegerField(blank=True, required=False)
    period = fields.FloatField(blank=True, required=False)
    periodMax = fields.FloatField(blank=True, required=False)
    periodUnit = fields.CharField(blank=True, required=False)
    timeOfDay = fields.DateTimeField(blank=True, required=False)
    when = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        boundsDuration = EmbeddedAttribute(type="Duration", getter="boundsDuration", setter="boundsDuration", searcher=StringSearch("boundsDuration"))
        boundsPeriod = EmbeddedAttribute(type="Period", getter="boundsPeriod", setter="boundsPeriod", searcher=StringSearch("boundsPeriod"))
        boundsRange = EmbeddedAttribute(type="Range", getter="boundsRange", setter="boundsRange", searcher=StringSearch("boundsRange"))
        count = Attribute(getter="count", setter="count", searcher=NumericSearch("count"))
        countMax = Attribute(getter="countMax", setter="countMax", searcher=NumericSearch("countMax"))
        dayOfWeek = Attribute(getter="dayOfWeek", setter="dayOfWeek", searcher=StringSearch("dayOfWeek"))
        duration = Attribute(getter="duration", setter="duration", searcher=NumericSearch("duration"))
        durationMax = Attribute(getter="durationMax", setter="durationMax", searcher=NumericSearch("durationMax"))
        durationUnit = Attribute(getter="durationUnit", setter="durationUnit", searcher=StringSearch("durationUnit"))
        frequency = Attribute(getter="frequency", setter="frequency", searcher=NumericSearch("frequency"))
        frequencyMax = Attribute(getter="frequencyMax", setter="frequencyMax", searcher=NumericSearch("frequencyMax"))
        offset = Attribute(getter="offset", setter="offset", searcher=NumericSearch("offset"))
        period = Attribute(getter="period", setter="period", searcher=NumericSearch("period"))
        periodMax = Attribute(getter="periodMax", setter="periodMax", searcher=NumericSearch("periodMax"))
        periodUnit = Attribute(getter="periodUnit", setter="periodUnit", searcher=StringSearch("periodUnit"))
        timeOfDay = DateAttribute("timeOfDay")
        when = Attribute(getter="when", setter="when", searcher=StringSearch("when"))

class TriggerDefinition(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    condition = fields.EmbeddedDocumentField("Expression", blank=True, required=False)
    data = fields.EmbeddedDocumentListField("DataRequirement", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    timingDate = fields.DateTimeField(blank=True, required=False)
    timingDateTime = fields.DateTimeField(blank=True, required=False)
    timingReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    timingTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        condition = EmbeddedAttribute(type="Expression", getter="condition", setter="condition", searcher=StringSearch("condition"))
        data = EmbeddedAttribute(type="DataRequirement", getter="data", setter="data", searcher=StringSearch("data"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        timingDate = DateAttribute("timingDate")
        timingDateTime = DateAttribute("timingDateTime")
        timingReference = EmbeddedAttribute(type="FHIRReference", getter="timingReference", setter="timingReference", searcher=StringSearch("timingReference"))
        timingTiming = EmbeddedAttribute(type="Timing", getter="timingTiming", setter="timingTiming", searcher=StringSearch("timingTiming"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class UsageContext(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    valueReference = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = EmbeddedAttribute(type="Coding", getter="code", setter="code", searcher=StringSearch("code"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))
        valueReference = EmbeddedAttribute(type="FHIRReference", getter="valueReference", setter="valueReference", searcher=StringSearch("valueReference"))

class ValueSet(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    compose = fields.EmbeddedDocumentField("ValueSetCompose", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    expansion = fields.EmbeddedDocumentField("ValueSetExpansion", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    immutable = fields.BooleanField(blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        compose = EmbeddedAttribute(type="ValueSetCompose", getter="compose", setter="compose", searcher=StringSearch("compose"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        expansion = EmbeddedAttribute(type="ValueSetExpansion", getter="expansion", setter="expansion", searcher=StringSearch("expansion"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        immutable = Attribute(getter="immutable", setter="immutable", searcher=StringSearch("immutable"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ValueSetCompose(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    exclude = fields.EmbeddedDocumentListField("ValueSetComposeInclude", blank=True, required=False)
    inactive = fields.BooleanField(blank=True, required=False)
    include = fields.EmbeddedDocumentListField("ValueSetComposeInclude", blank=False, required=True)
    lockedDate = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        exclude = EmbeddedAttribute(type="ValueSetComposeInclude", getter="exclude", setter="exclude", searcher=StringSearch("exclude"))
        inactive = Attribute(getter="inactive", setter="inactive", searcher=StringSearch("inactive"))
        include = EmbeddedAttribute(type="ValueSetComposeInclude", getter="include", setter="include", searcher=StringSearch("include"))
        lockedDate = DateAttribute("lockedDate")

class ValueSetComposeInclude(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    concept = fields.EmbeddedDocumentListField("ValueSetComposeIncludeConcept", blank=True, required=False)
    filter = fields.EmbeddedDocumentListField("ValueSetComposeIncludeFilter", blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    valueSet = fields.ListField(fields.CharField(), blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        concept = EmbeddedAttribute(type="ValueSetComposeIncludeConcept", getter="concept", setter="concept", searcher=StringSearch("concept"))
        filter = EmbeddedAttribute(type="ValueSetComposeIncludeFilter", getter="filter", setter="filter", searcher=StringSearch("filter"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        valueSet = Attribute(getter="valueSet", setter="valueSet", searcher=StringSearch("valueSet"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ValueSetComposeIncludeConcept(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    designation = fields.EmbeddedDocumentListField("ValueSetComposeIncludeConceptDesignation", blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        designation = EmbeddedAttribute(type="ValueSetComposeIncludeConceptDesignation", getter="designation", setter="designation", searcher=StringSearch("designation"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))

class ValueSetComposeIncludeConceptDesignation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    use = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        use = EmbeddedAttribute(type="Coding", getter="use", setter="use", searcher=StringSearch("use"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class ValueSetComposeIncludeFilter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    op = fields.CharField(blank=False, required=True)
    property = fields.CharField(blank=False, required=True)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        op = Attribute(getter="op", setter="op", searcher=StringSearch("op"))
        property = Attribute(getter="property", setter="property", searcher=StringSearch("property"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class ValueSetExpansion(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    contains = fields.EmbeddedDocumentListField("ValueSetExpansionContains", blank=True, required=False)
    identifier = fields.CharField(blank=True, required=False)
    offset = fields.IntegerField(blank=True, required=False)
    parameter = fields.EmbeddedDocumentListField("ValueSetExpansionParameter", blank=True, required=False)
    timestamp = fields.DateTimeField(blank=False, required=True)
    total = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        contains = EmbeddedAttribute(type="ValueSetExpansionContains", getter="contains", setter="contains", searcher=StringSearch("contains"))
        identifier = Attribute(getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        offset = Attribute(getter="offset", setter="offset", searcher=NumericSearch("offset"))
        parameter = EmbeddedAttribute(type="ValueSetExpansionParameter", getter="parameter", setter="parameter", searcher=StringSearch("parameter"))
        timestamp = DateAttribute("timestamp")
        total = Attribute(getter="total", setter="total", searcher=NumericSearch("total"))

class ValueSetExpansionContains(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    abstract = fields.BooleanField(blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    designation = fields.EmbeddedDocumentListField("ValueSetComposeIncludeConceptDesignation", blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    inactive = fields.BooleanField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        abstract = Attribute(getter="abstract", setter="abstract", searcher=StringSearch("abstract"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        designation = EmbeddedAttribute(type="ValueSetComposeIncludeConceptDesignation", getter="designation", setter="designation", searcher=StringSearch("designation"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        inactive = Attribute(getter="inactive", setter="inactive", searcher=StringSearch("inactive"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ValueSetExpansionParameter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCode = fields.CharField(blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valueDecimal = fields.FloatField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueUri = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCode = Attribute(getter="valueCode", setter="valueCode", searcher=StringSearch("valueCode"))
        valueDateTime = DateAttribute("valueDateTime")
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueUri = Attribute(getter="valueUri", setter="valueUri", searcher=StringSearch("valueUri"))

class VerificationResult(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    attestation = fields.EmbeddedDocumentField("VerificationResultAttestation", blank=True, required=False)
    failureAction = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    frequency = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    lastPerformed = fields.DateTimeField(blank=True, required=False)
    need = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    nextScheduled = fields.DateTimeField(blank=True, required=False)
    primarySource = fields.EmbeddedDocumentListField("VerificationResultPrimarySource", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusDate = fields.DateTimeField(blank=True, required=False)
    target = fields.EmbeddedDocumentListField("FHIRReference", blank=True, required=False)
    targetLocation = fields.ListField(fields.CharField(), blank=True, required=False)
    validationProcess = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    validationType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    validator = fields.EmbeddedDocumentListField("VerificationResultValidator", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        attestation = EmbeddedAttribute(type="VerificationResultAttestation", getter="attestation", setter="attestation", searcher=StringSearch("attestation"))
        failureAction = EmbeddedAttribute(type="CodeableConcept", getter="failureAction", setter="failureAction", searcher=StringSearch("failureAction"))
        frequency = EmbeddedAttribute(type="Timing", getter="frequency", setter="frequency", searcher=StringSearch("frequency"))
        lastPerformed = DateAttribute("lastPerformed")
        need = EmbeddedAttribute(type="CodeableConcept", getter="need", setter="need", searcher=StringSearch("need"))
        nextScheduled = DateAttribute("nextScheduled")
        primarySource = EmbeddedAttribute(type="VerificationResultPrimarySource", getter="primarySource", setter="primarySource", searcher=StringSearch("primarySource"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusDate = DateAttribute("statusDate")
        target = EmbeddedAttribute(type="FHIRReference", getter="target", setter="target", searcher=StringSearch("target"))
        targetLocation = Attribute(getter="targetLocation", setter="targetLocation", searcher=StringSearch("targetLocation"))
        validationProcess = EmbeddedAttribute(type="CodeableConcept", getter="validationProcess", setter="validationProcess", searcher=StringSearch("validationProcess"))
        validationType = EmbeddedAttribute(type="CodeableConcept", getter="validationType", setter="validationType", searcher=StringSearch("validationType"))
        validator = EmbeddedAttribute(type="VerificationResultValidator", getter="validator", setter="validator", searcher=StringSearch("validator"))

class VerificationResultAttestation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    communicationMethod = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    onBehalfOf = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    proxyIdentityCertificate = fields.CharField(blank=True, required=False)
    proxySignature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    sourceIdentityCertificate = fields.CharField(blank=True, required=False)
    sourceSignature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    who = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        communicationMethod = EmbeddedAttribute(type="CodeableConcept", getter="communicationMethod", setter="communicationMethod", searcher=StringSearch("communicationMethod"))
        date = DateAttribute("date")
        onBehalfOf = EmbeddedAttribute(type="FHIRReference", getter="onBehalfOf", setter="onBehalfOf", searcher=StringSearch("onBehalfOf"))
        proxyIdentityCertificate = Attribute(getter="proxyIdentityCertificate", setter="proxyIdentityCertificate", searcher=StringSearch("proxyIdentityCertificate"))
        proxySignature = EmbeddedAttribute(type="Signature", getter="proxySignature", setter="proxySignature", searcher=StringSearch("proxySignature"))
        sourceIdentityCertificate = Attribute(getter="sourceIdentityCertificate", setter="sourceIdentityCertificate", searcher=StringSearch("sourceIdentityCertificate"))
        sourceSignature = EmbeddedAttribute(type="Signature", getter="sourceSignature", setter="sourceSignature", searcher=StringSearch("sourceSignature"))
        who = EmbeddedAttribute(type="FHIRReference", getter="who", setter="who", searcher=StringSearch("who"))

class VerificationResultPrimarySource(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    canPushUpdates = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    communicationMethod = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    pushTypeAvailable = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    validationDate = fields.DateTimeField(blank=True, required=False)
    validationStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    who = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        canPushUpdates = EmbeddedAttribute(type="CodeableConcept", getter="canPushUpdates", setter="canPushUpdates", searcher=StringSearch("canPushUpdates"))
        communicationMethod = EmbeddedAttribute(type="CodeableConcept", getter="communicationMethod", setter="communicationMethod", searcher=StringSearch("communicationMethod"))
        pushTypeAvailable = EmbeddedAttribute(type="CodeableConcept", getter="pushTypeAvailable", setter="pushTypeAvailable", searcher=StringSearch("pushTypeAvailable"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        validationDate = DateAttribute("validationDate")
        validationStatus = EmbeddedAttribute(type="CodeableConcept", getter="validationStatus", setter="validationStatus", searcher=StringSearch("validationStatus"))
        who = EmbeddedAttribute(type="FHIRReference", getter="who", setter="who", searcher=StringSearch("who"))

class VerificationResultValidator(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    attestationSignature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    identityCertificate = fields.CharField(blank=True, required=False)
    organization = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        attestationSignature = EmbeddedAttribute(type="Signature", getter="attestationSignature", setter="attestationSignature", searcher=StringSearch("attestationSignature"))
        identityCertificate = Attribute(getter="identityCertificate", setter="identityCertificate", searcher=StringSearch("identityCertificate"))
        organization = EmbeddedAttribute(type="FHIRReference", getter="organization", setter="organization", searcher=StringSearch("organization"))

class VisionPrescription(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    created = fields.DateTimeField(blank=False, required=True)
    dateWritten = fields.DateTimeField(blank=False, required=True)
    encounter = fields.EmbeddedDocumentField("FHIRReference", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    lensSpecification = fields.EmbeddedDocumentListField("VisionPrescriptionLensSpecification", blank=False, required=True)
    patient = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    prescriber = fields.EmbeddedDocumentField("FHIRReference", blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        created = DateAttribute("created")
        dateWritten = DateAttribute("dateWritten")
        encounter = EmbeddedAttribute(type="FHIRReference", getter="encounter", setter="encounter", searcher=StringSearch("encounter"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        lensSpecification = EmbeddedAttribute(type="VisionPrescriptionLensSpecification", getter="lensSpecification", setter="lensSpecification", searcher=StringSearch("lensSpecification"))
        patient = EmbeddedAttribute(type="FHIRReference", getter="patient", setter="patient", searcher=StringSearch("patient"))
        prescriber = EmbeddedAttribute(type="FHIRReference", getter="prescriber", setter="prescriber", searcher=StringSearch("prescriber"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class VisionPrescriptionLensSpecification(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    add = fields.FloatField(blank=True, required=False)
    axis = fields.IntegerField(blank=True, required=False)
    backCurve = fields.FloatField(blank=True, required=False)
    brand = fields.CharField(blank=True, required=False)
    color = fields.CharField(blank=True, required=False)
    cylinder = fields.FloatField(blank=True, required=False)
    diameter = fields.FloatField(blank=True, required=False)
    duration = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    eye = fields.CharField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    power = fields.FloatField(blank=True, required=False)
    prism = fields.EmbeddedDocumentListField("VisionPrescriptionLensSpecificationPrism", blank=True, required=False)
    product = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    sphere = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        add = Attribute(getter="add", setter="add", searcher=NumericSearch("add"))
        axis = Attribute(getter="axis", setter="axis", searcher=NumericSearch("axis"))
        backCurve = Attribute(getter="backCurve", setter="backCurve", searcher=NumericSearch("backCurve"))
        brand = Attribute(getter="brand", setter="brand", searcher=StringSearch("brand"))
        color = Attribute(getter="color", setter="color", searcher=StringSearch("color"))
        cylinder = Attribute(getter="cylinder", setter="cylinder", searcher=NumericSearch("cylinder"))
        diameter = Attribute(getter="diameter", setter="diameter", searcher=NumericSearch("diameter"))
        duration = EmbeddedAttribute(type="Quantity", getter="duration", setter="duration", searcher=StringSearch("duration"))
        eye = Attribute(getter="eye", setter="eye", searcher=StringSearch("eye"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        power = Attribute(getter="power", setter="power", searcher=NumericSearch("power"))
        prism = EmbeddedAttribute(type="VisionPrescriptionLensSpecificationPrism", getter="prism", setter="prism", searcher=StringSearch("prism"))
        product = EmbeddedAttribute(type="CodeableConcept", getter="product", setter="product", searcher=StringSearch("product"))
        sphere = Attribute(getter="sphere", setter="sphere", searcher=NumericSearch("sphere"))

class VisionPrescriptionLensSpecificationPrism(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.FloatField(blank=False, required=True)
    base = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = Attribute(getter="amount", setter="amount", searcher=NumericSearch("amount"))
        base = Attribute(getter="base", setter="base", searcher=StringSearch("base"))