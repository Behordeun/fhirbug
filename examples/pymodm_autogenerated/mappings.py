# Automatically Generated for use with the fhirbug pymodm demo server

from bson.objectid import ObjectId
from pymodm import fields, MongoModel, EmbeddedMongoModel, ListField
from fhirbug.models.attributes import Attribute, ReferenceAttribute, EmbeddedAttribute, DateAttribute
from fhirbug.db.backends.pymodm.attributes import ObjectIdReferenceAttribute
from fhirbug.db.backends.pymodm.models import FhirBaseModel
from fhirbug.db.backends.pymodm.searches import StringSearch, NumericSearch


class Extension(MongoModel):
    pass


class Account(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    balance = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    coverage = fields.EmbeddedDocumentListField("AccountCoverage", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    guarantor = fields.EmbeddedDocumentListField("AccountGuarantor", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    owner = fields.ObjectIdField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    subject = fields.ObjectIdField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = EmbeddedAttribute(type="Period", getter="active", setter="active", searcher=StringSearch("active"))
        balance = EmbeddedAttribute(type="Money", getter="balance", setter="balance", searcher=StringSearch("balance"))
        coverage = EmbeddedAttribute(type="AccountCoverage", getter="coverage", setter="coverage", searcher=StringSearch("coverage"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        guarantor = EmbeddedAttribute(type="AccountGuarantor", getter="guarantor", setter="guarantor", searcher=StringSearch("guarantor"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        owner = ObjectIdReferenceAttribute({'Organization'}, ("owner", str), "owner", pk_setter="owner")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Practitioner', 'Patient', 'Location', 'Organization', 'HealthcareService', 'Device'}, ("subject", str), "subject", pk_setter="subject")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class AccountCoverage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    coverage = fields.ObjectIdField(blank=False, required=True)
    priority = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        coverage = ObjectIdReferenceAttribute({'Coverage'}, ("coverage", str), "coverage", pk_setter="coverage")
        priority = Attribute(getter="priority", setter="priority", searcher=NumericSearch("priority"))

class AccountGuarantor(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    onHold = fields.BooleanField(blank=True, required=False)
    party = fields.ObjectIdField(blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        onHold = Attribute(getter="onHold", setter="onHold", searcher=StringSearch("onHold"))
        party = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Organization'}, ("party", str), "party", pk_setter="party")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))

class ActivityDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    bodySite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    contributor = fields.EmbeddedDocumentListField("Contributor", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    dosage = fields.EmbeddedDocumentListField("Dosage", blank=True, required=False)
    dynamicValue = fields.EmbeddedDocumentListField("ActivityDefinitionDynamicValue", blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    kind = fields.CharField(blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    library = fields.ObjectIdField(blank=True, required=False)
    location = fields.ObjectIdField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    participant = fields.EmbeddedDocumentListField("ActivityDefinitionParticipant", blank=True, required=False)
    productCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    productReference = fields.ObjectIdField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    timingDateTime = fields.DateTimeField(blank=True, required=False)
    timingPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    timingRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    timingTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    transform = fields.ObjectIdField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    usage = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        contributor = EmbeddedAttribute(type="Contributor", getter="contributor", setter="contributor", searcher=StringSearch("contributor"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        dosage = EmbeddedAttribute(type="Dosage", getter="dosage", setter="dosage", searcher=StringSearch("dosage"))
        dynamicValue = EmbeddedAttribute(type="ActivityDefinitionDynamicValue", getter="dynamicValue", setter="dynamicValue", searcher=StringSearch("dynamicValue"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))
        lastReviewDate = DateAttribute("lastReviewDate")
        library = ObjectIdReferenceAttribute({'Library'}, ("library", str), "library", pk_setter="library")
        location = ObjectIdReferenceAttribute({'Location'}, ("location", str), "location", pk_setter="location")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        participant = EmbeddedAttribute(type="ActivityDefinitionParticipant", getter="participant", setter="participant", searcher=StringSearch("participant"))
        productCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="productCodeableConcept", setter="productCodeableConcept", searcher=StringSearch("productCodeableConcept"))
        productReference = ObjectIdReferenceAttribute({'Substance', 'Medication'}, ("productReference", str), "productReference", pk_setter="productReference")
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        timingDateTime = DateAttribute("timingDateTime")
        timingPeriod = EmbeddedAttribute(type="Period", getter="timingPeriod", setter="timingPeriod", searcher=StringSearch("timingPeriod"))
        timingRange = EmbeddedAttribute(type="Range", getter="timingRange", setter="timingRange", searcher=StringSearch("timingRange"))
        timingTiming = EmbeddedAttribute(type="Timing", getter="timingTiming", setter="timingTiming", searcher=StringSearch("timingTiming"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        transform = ObjectIdReferenceAttribute({'StructureMap'}, ("transform", str), "transform", pk_setter="transform")
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        usage = Attribute(getter="usage", setter="usage", searcher=StringSearch("usage"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ActivityDefinitionDynamicValue(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    expression = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    path = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))

class ActivityDefinitionParticipant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class Address(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    city = fields.CharField(blank=True, required=False)
    country = fields.CharField(blank=True, required=False)
    district = fields.CharField(blank=True, required=False)
    line = fields.ListField(fields.CharField(), blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    postalCode = fields.CharField(blank=True, required=False)
    state = fields.CharField(blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    use = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        city = Attribute(getter="city", setter="city", searcher=StringSearch("city"))
        country = Attribute(getter="country", setter="country", searcher=StringSearch("country"))
        district = Attribute(getter="district", setter="district", searcher=StringSearch("district"))
        line = Attribute(getter="line", setter="line", searcher=StringSearch("line"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        postalCode = Attribute(getter="postalCode", setter="postalCode", searcher=StringSearch("postalCode"))
        state = Attribute(getter="state", setter="state", searcher=StringSearch("state"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))

class AdverseEvent(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    category = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    eventParticipant = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    location = fields.ObjectIdField(blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    reaction = fields.ObjectIdField(blank=True, required=False)
    recorder = fields.ObjectIdField(blank=True, required=False)
    referenceDocument = fields.ObjectIdField(blank=True, required=False)
    seriousness = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    study = fields.ObjectIdField(blank=True, required=False)
    subject = fields.ObjectIdField(blank=True, required=False)
    subjectMedicalHistory = fields.ObjectIdField(blank=True, required=False)
    suspectEntity = fields.EmbeddedDocumentListField("AdverseEventSuspectEntity", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        category = Attribute(getter="category", setter="category", searcher=StringSearch("category"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        eventParticipant = ObjectIdReferenceAttribute({'Device', 'Practitioner'}, ("eventParticipant", str), "eventParticipant", pk_setter="eventParticipant")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        location = ObjectIdReferenceAttribute({'Location'}, ("location", str), "location", pk_setter="location")
        outcome = EmbeddedAttribute(type="CodeableConcept", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        reaction = ObjectIdReferenceAttribute({'Condition'}, ("reaction", str), "reaction", pk_setter="reaction")
        recorder = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Practitioner'}, ("recorder", str), "recorder", pk_setter="recorder")
        referenceDocument = ObjectIdReferenceAttribute({'DocumentReference'}, ("referenceDocument", str), "referenceDocument", pk_setter="referenceDocument")
        seriousness = EmbeddedAttribute(type="CodeableConcept", getter="seriousness", setter="seriousness", searcher=StringSearch("seriousness"))
        study = ObjectIdReferenceAttribute({'ResearchStudy'}, ("study", str), "study", pk_setter="study")
        subject = ObjectIdReferenceAttribute({'Device', 'Patient', 'ResearchSubject', 'Medication'}, ("subject", str), "subject", pk_setter="subject")
        subjectMedicalHistory = ObjectIdReferenceAttribute({'AllergyIntolerance', 'Observation', 'Immunization', 'FamilyMemberHistory', 'Condition', 'Procedure'}, ("subjectMedicalHistory", str), "subjectMedicalHistory", pk_setter="subjectMedicalHistory")
        suspectEntity = EmbeddedAttribute(type="AdverseEventSuspectEntity", getter="suspectEntity", setter="suspectEntity", searcher=StringSearch("suspectEntity"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class AdverseEventSuspectEntity(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    causality = fields.CharField(blank=True, required=False)
    causalityAssessment = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    causalityAuthor = fields.ObjectIdField(blank=True, required=False)
    causalityMethod = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    causalityProductRelatedness = fields.CharField(blank=True, required=False)
    causalityResult = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    instance = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        causality = Attribute(getter="causality", setter="causality", searcher=StringSearch("causality"))
        causalityAssessment = EmbeddedAttribute(type="CodeableConcept", getter="causalityAssessment", setter="causalityAssessment", searcher=StringSearch("causalityAssessment"))
        causalityAuthor = ObjectIdReferenceAttribute({'PractitionerRole', 'Practitioner'}, ("causalityAuthor", str), "causalityAuthor", pk_setter="causalityAuthor")
        causalityMethod = EmbeddedAttribute(type="CodeableConcept", getter="causalityMethod", setter="causalityMethod", searcher=StringSearch("causalityMethod"))
        causalityProductRelatedness = Attribute(getter="causalityProductRelatedness", setter="causalityProductRelatedness", searcher=StringSearch("causalityProductRelatedness"))
        causalityResult = EmbeddedAttribute(type="CodeableConcept", getter="causalityResult", setter="causalityResult", searcher=StringSearch("causalityResult"))
        instance = ObjectIdReferenceAttribute({'MedicationStatement', 'Medication', 'MedicationAdministration', 'Substance', 'Device'}, ("instance", str), "instance", pk_setter="instance")

class Age(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    comparator = fields.CharField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    unit = fields.CharField(blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comparator = Attribute(getter="comparator", setter="comparator", searcher=StringSearch("comparator"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        unit = Attribute(getter="unit", setter="unit", searcher=StringSearch("unit"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class AllergyIntolerance(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    assertedDate = fields.DateTimeField(blank=True, required=False)
    asserter = fields.ObjectIdField(blank=True, required=False)
    category = fields.ListField(fields.CharField(), blank=True, required=False)
    clinicalStatus = fields.CharField(blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    criticality = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    lastOccurrence = fields.DateTimeField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    onsetAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    onsetDateTime = fields.DateTimeField(blank=True, required=False)
    onsetPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    onsetRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    onsetString = fields.CharField(blank=True, required=False)
    patient = fields.ObjectIdField(blank=False, required=True)
    reaction = fields.EmbeddedDocumentListField("AllergyIntoleranceReaction", blank=True, required=False)
    recorder = fields.ObjectIdField(blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    verificationStatus = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        assertedDate = DateAttribute("assertedDate")
        asserter = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Practitioner'}, ("asserter", str), "asserter", pk_setter="asserter")
        category = Attribute(getter="category", setter="category", searcher=StringSearch("category"))
        clinicalStatus = Attribute(getter="clinicalStatus", setter="clinicalStatus", searcher=StringSearch("clinicalStatus"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        criticality = Attribute(getter="criticality", setter="criticality", searcher=StringSearch("criticality"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        lastOccurrence = DateAttribute("lastOccurrence")
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        onsetAge = EmbeddedAttribute(type="Age", getter="onsetAge", setter="onsetAge", searcher=StringSearch("onsetAge"))
        onsetDateTime = DateAttribute("onsetDateTime")
        onsetPeriod = EmbeddedAttribute(type="Period", getter="onsetPeriod", setter="onsetPeriod", searcher=StringSearch("onsetPeriod"))
        onsetRange = EmbeddedAttribute(type="Range", getter="onsetRange", setter="onsetRange", searcher=StringSearch("onsetRange"))
        onsetString = Attribute(getter="onsetString", setter="onsetString", searcher=StringSearch("onsetString"))
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        reaction = EmbeddedAttribute(type="AllergyIntoleranceReaction", getter="reaction", setter="reaction", searcher=StringSearch("reaction"))
        recorder = ObjectIdReferenceAttribute({'Patient', 'Practitioner'}, ("recorder", str), "recorder", pk_setter="recorder")
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        verificationStatus = Attribute(getter="verificationStatus", setter="verificationStatus", searcher=StringSearch("verificationStatus"))

class AllergyIntoleranceReaction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    exposureRoute = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    manifestation = fields.EmbeddedDocumentListField("CodeableConcept", blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    onset = fields.DateTimeField(blank=True, required=False)
    severity = fields.CharField(blank=True, required=False)
    substance = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        exposureRoute = EmbeddedAttribute(type="CodeableConcept", getter="exposureRoute", setter="exposureRoute", searcher=StringSearch("exposureRoute"))
        manifestation = EmbeddedAttribute(type="CodeableConcept", getter="manifestation", setter="manifestation", searcher=StringSearch("manifestation"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        onset = DateAttribute("onset")
        severity = Attribute(getter="severity", setter="severity", searcher=StringSearch("severity"))
        substance = EmbeddedAttribute(type="CodeableConcept", getter="substance", setter="substance", searcher=StringSearch("substance"))

class Annotation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    authorReference = fields.ObjectIdField(blank=True, required=False)
    authorString = fields.CharField(blank=True, required=False)
    text = fields.CharField(blank=False, required=True)
    time = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        authorReference = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Practitioner'}, ("authorReference", str), "authorReference", pk_setter="authorReference")
        authorString = Attribute(getter="authorString", setter="authorString", searcher=StringSearch("authorString"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        time = DateAttribute("time")

class Appointment(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    appointmentType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    end = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    incomingReferral = fields.ObjectIdField(blank=True, required=False)
    indication = fields.ObjectIdField(blank=True, required=False)
    minutesDuration = fields.IntegerField(blank=True, required=False)
    participant = fields.EmbeddedDocumentListField("AppointmentParticipant", blank=False, required=True)
    priority = fields.IntegerField(blank=True, required=False)
    reason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    requestedPeriod = fields.EmbeddedDocumentListField("Period", blank=True, required=False)
    serviceCategory = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    serviceType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    slot = fields.ObjectIdField(blank=True, required=False)
    specialty = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    start = fields.DateTimeField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    supportingInformation = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        appointmentType = EmbeddedAttribute(type="CodeableConcept", getter="appointmentType", setter="appointmentType", searcher=StringSearch("appointmentType"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        created = DateAttribute("created")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        end = DateAttribute("end")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        incomingReferral = ObjectIdReferenceAttribute({'ReferralRequest'}, ("incomingReferral", str), "incomingReferral", pk_setter="incomingReferral")
        indication = ObjectIdReferenceAttribute({'Condition', 'Procedure'}, ("indication", str), "indication", pk_setter="indication")
        minutesDuration = Attribute(getter="minutesDuration", setter="minutesDuration", searcher=NumericSearch("minutesDuration"))
        participant = EmbeddedAttribute(type="AppointmentParticipant", getter="participant", setter="participant", searcher=StringSearch("participant"))
        priority = Attribute(getter="priority", setter="priority", searcher=NumericSearch("priority"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        requestedPeriod = EmbeddedAttribute(type="Period", getter="requestedPeriod", setter="requestedPeriod", searcher=StringSearch("requestedPeriod"))
        serviceCategory = EmbeddedAttribute(type="CodeableConcept", getter="serviceCategory", setter="serviceCategory", searcher=StringSearch("serviceCategory"))
        serviceType = EmbeddedAttribute(type="CodeableConcept", getter="serviceType", setter="serviceType", searcher=StringSearch("serviceType"))
        slot = ObjectIdReferenceAttribute({'Slot'}, ("slot", str), "slot", pk_setter="slot")
        specialty = EmbeddedAttribute(type="CodeableConcept", getter="specialty", setter="specialty", searcher=StringSearch("specialty"))
        start = DateAttribute("start")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        supportingInformation = ObjectIdReferenceAttribute({'Resource'}, ("supportingInformation", str), "supportingInformation", pk_setter="supportingInformation")

class AppointmentParticipant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.ObjectIdField(blank=True, required=False)
    required = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Location', 'HealthcareService', 'Device'}, ("actor", str), "actor", pk_setter="actor")
        required = Attribute(getter="required", setter="required", searcher=StringSearch("required"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class AppointmentResponse(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    actor = fields.ObjectIdField(blank=True, required=False)
    appointment = fields.ObjectIdField(blank=False, required=True)
    comment = fields.CharField(blank=True, required=False)
    end = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    participantStatus = fields.CharField(blank=False, required=True)
    participantType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    start = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        actor = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Location', 'HealthcareService', 'Device'}, ("actor", str), "actor", pk_setter="actor")
        appointment = ObjectIdReferenceAttribute({'Appointment'}, ("appointment", str), "appointment", pk_setter="appointment")
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        end = DateAttribute("end")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        participantStatus = Attribute(getter="participantStatus", setter="participantStatus", searcher=StringSearch("participantStatus"))
        participantType = EmbeddedAttribute(type="CodeableConcept", getter="participantType", setter="participantType", searcher=StringSearch("participantType"))
        start = DateAttribute("start")

class Attachment(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    contentType = fields.CharField(blank=True, required=False)
    creation = fields.DateTimeField(blank=True, required=False)
    data = fields.CharField(blank=True, required=False)
    hash = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    size = fields.IntegerField(blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        contentType = Attribute(getter="contentType", setter="contentType", searcher=StringSearch("contentType"))
        creation = DateAttribute("creation")
        data = Attribute(getter="data", setter="data", searcher=StringSearch("data"))
        hash = Attribute(getter="hash", setter="hash", searcher=StringSearch("hash"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        size = Attribute(getter="size", setter="size", searcher=NumericSearch("size"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class AuditEvent(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    action = fields.CharField(blank=True, required=False)
    agent = fields.EmbeddedDocumentListField("AuditEventAgent", blank=False, required=True)
    entity = fields.EmbeddedDocumentListField("AuditEventEntity", blank=True, required=False)
    outcome = fields.CharField(blank=True, required=False)
    outcomeDesc = fields.CharField(blank=True, required=False)
    purposeOfEvent = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    recorded = fields.DateTimeField(blank=False, required=True)
    source = fields.EmbeddedDocumentField("AuditEventSource", blank=False, required=True)
    subtype = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    type = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        action = Attribute(getter="action", setter="action", searcher=StringSearch("action"))
        agent = EmbeddedAttribute(type="AuditEventAgent", getter="agent", setter="agent", searcher=StringSearch("agent"))
        entity = EmbeddedAttribute(type="AuditEventEntity", getter="entity", setter="entity", searcher=StringSearch("entity"))
        outcome = Attribute(getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        outcomeDesc = Attribute(getter="outcomeDesc", setter="outcomeDesc", searcher=StringSearch("outcomeDesc"))
        purposeOfEvent = EmbeddedAttribute(type="CodeableConcept", getter="purposeOfEvent", setter="purposeOfEvent", searcher=StringSearch("purposeOfEvent"))
        recorded = DateAttribute("recorded")
        source = EmbeddedAttribute(type="AuditEventSource", getter="source", setter="source", searcher=StringSearch("source"))
        subtype = EmbeddedAttribute(type="Coding", getter="subtype", setter="subtype", searcher=StringSearch("subtype"))
        type = EmbeddedAttribute(type="Coding", getter="type", setter="type", searcher=StringSearch("type"))

class AuditEventAgent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    altId = fields.CharField(blank=True, required=False)
    location = fields.ObjectIdField(blank=True, required=False)
    media = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    network = fields.EmbeddedDocumentField("AuditEventAgentNetwork", blank=True, required=False)
    policy = fields.ListField(fields.CharField(), blank=True, required=False)
    purposeOfUse = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reference = fields.ObjectIdField(blank=True, required=False)
    requestor = fields.BooleanField(blank=False, required=True)
    role = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    userId = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        altId = Attribute(getter="altId", setter="altId", searcher=StringSearch("altId"))
        location = ObjectIdReferenceAttribute({'Location'}, ("location", str), "location", pk_setter="location")
        media = EmbeddedAttribute(type="Coding", getter="media", setter="media", searcher=StringSearch("media"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        network = EmbeddedAttribute(type="AuditEventAgentNetwork", getter="network", setter="network", searcher=StringSearch("network"))
        policy = Attribute(getter="policy", setter="policy", searcher=StringSearch("policy"))
        purposeOfUse = EmbeddedAttribute(type="CodeableConcept", getter="purposeOfUse", setter="purposeOfUse", searcher=StringSearch("purposeOfUse"))
        reference = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("reference", str), "reference", pk_setter="reference")
        requestor = Attribute(getter="requestor", setter="requestor", searcher=StringSearch("requestor"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))
        userId = EmbeddedAttribute(type="Identifier", getter="userId", setter="userId", searcher=StringSearch("userId"))

class AuditEventAgentNetwork(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    address = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        address = Attribute(getter="address", setter="address", searcher=StringSearch("address"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class AuditEventEntity(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    detail = fields.EmbeddedDocumentListField("AuditEventEntityDetail", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    lifecycle = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    query = fields.CharField(blank=True, required=False)
    reference = fields.ObjectIdField(blank=True, required=False)
    role = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    securityLabel = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    type = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        detail = EmbeddedAttribute(type="AuditEventEntityDetail", getter="detail", setter="detail", searcher=StringSearch("detail"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        lifecycle = EmbeddedAttribute(type="Coding", getter="lifecycle", setter="lifecycle", searcher=StringSearch("lifecycle"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        query = Attribute(getter="query", setter="query", searcher=StringSearch("query"))
        reference = ObjectIdReferenceAttribute({'Resource'}, ("reference", str), "reference", pk_setter="reference")
        role = EmbeddedAttribute(type="Coding", getter="role", setter="role", searcher=StringSearch("role"))
        securityLabel = EmbeddedAttribute(type="Coding", getter="securityLabel", setter="securityLabel", searcher=StringSearch("securityLabel"))
        type = EmbeddedAttribute(type="Coding", getter="type", setter="type", searcher=StringSearch("type"))

class AuditEventEntityDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class AuditEventSource(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=False, required=True)
    site = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        site = Attribute(getter="site", setter="site", searcher=StringSearch("site"))
        type = EmbeddedAttribute(type="Coding", getter="type", setter="type", searcher=StringSearch("type"))

class BackboneElement(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))

class Basic(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    author = fields.ObjectIdField(blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    created = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    subject = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        author = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Practitioner'}, ("author", str), "author", pk_setter="author")
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        created = DateAttribute("created")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        subject = ObjectIdReferenceAttribute({'Resource'}, ("subject", str), "subject", pk_setter="subject")

class Binary(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    content = fields.CharField(blank=False, required=True)
    contentType = fields.CharField(blank=False, required=True)
    securityContext = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        content = Attribute(getter="content", setter="content", searcher=StringSearch("content"))
        contentType = Attribute(getter="contentType", setter="contentType", searcher=StringSearch("contentType"))
        securityContext = ObjectIdReferenceAttribute({'Resource'}, ("securityContext", str), "securityContext", pk_setter="securityContext")

class BodySite(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    image = fields.EmbeddedDocumentListField("Attachment", blank=True, required=False)
    patient = fields.ObjectIdField(blank=False, required=True)
    qualifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        image = EmbeddedAttribute(type="Attachment", getter="image", setter="image", searcher=StringSearch("image"))
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        qualifier = EmbeddedAttribute(type="CodeableConcept", getter="qualifier", setter="qualifier", searcher=StringSearch("qualifier"))

class Bundle(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    entry = fields.EmbeddedDocumentListField("BundleEntry", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    link = fields.EmbeddedDocumentListField("BundleLink", blank=True, required=False)
    signature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    total = fields.IntegerField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        entry = EmbeddedAttribute(type="BundleEntry", getter="entry", setter="entry", searcher=StringSearch("entry"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        link = EmbeddedAttribute(type="BundleLink", getter="link", setter="link", searcher=StringSearch("link"))
        signature = EmbeddedAttribute(type="Signature", getter="signature", setter="signature", searcher=StringSearch("signature"))
        total = Attribute(getter="total", setter="total", searcher=NumericSearch("total"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class BundleEntry(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    fullUrl = fields.CharField(blank=True, required=False)
    link = fields.EmbeddedDocumentListField("BundleLink", blank=True, required=False)
    request = fields.EmbeddedDocumentField("BundleEntryRequest", blank=True, required=False)
    resource = fields.EmbeddedDocumentField("Resource", blank=True, required=False)
    response = fields.EmbeddedDocumentField("BundleEntryResponse", blank=True, required=False)
    search = fields.EmbeddedDocumentField("BundleEntrySearch", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        fullUrl = Attribute(getter="fullUrl", setter="fullUrl", searcher=StringSearch("fullUrl"))
        link = EmbeddedAttribute(type="BundleLink", getter="link", setter="link", searcher=StringSearch("link"))
        request = EmbeddedAttribute(type="BundleEntryRequest", getter="request", setter="request", searcher=StringSearch("request"))
        resource = EmbeddedAttribute(type="Resource", getter="resource", setter="resource", searcher=StringSearch("resource"))
        response = EmbeddedAttribute(type="BundleEntryResponse", getter="response", setter="response", searcher=StringSearch("response"))
        search = EmbeddedAttribute(type="BundleEntrySearch", getter="search", setter="search", searcher=StringSearch("search"))

class BundleEntryRequest(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    ifMatch = fields.CharField(blank=True, required=False)
    ifModifiedSince = fields.DateTimeField(blank=True, required=False)
    ifNoneExist = fields.CharField(blank=True, required=False)
    ifNoneMatch = fields.CharField(blank=True, required=False)
    method = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        ifMatch = Attribute(getter="ifMatch", setter="ifMatch", searcher=StringSearch("ifMatch"))
        ifModifiedSince = DateAttribute("ifModifiedSince")
        ifNoneExist = Attribute(getter="ifNoneExist", setter="ifNoneExist", searcher=StringSearch("ifNoneExist"))
        ifNoneMatch = Attribute(getter="ifNoneMatch", setter="ifNoneMatch", searcher=StringSearch("ifNoneMatch"))
        method = Attribute(getter="method", setter="method", searcher=StringSearch("method"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class BundleEntryResponse(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    etag = fields.CharField(blank=True, required=False)
    lastModified = fields.DateTimeField(blank=True, required=False)
    location = fields.CharField(blank=True, required=False)
    outcome = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        etag = Attribute(getter="etag", setter="etag", searcher=StringSearch("etag"))
        lastModified = DateAttribute("lastModified")
        location = Attribute(getter="location", setter="location", searcher=StringSearch("location"))
        outcome = Attribute(getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class BundleEntrySearch(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    mode = fields.CharField(blank=True, required=False)
    score = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        score = Attribute(getter="score", setter="score", searcher=NumericSearch("score"))

class BundleLink(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    relation = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        relation = Attribute(getter="relation", setter="relation", searcher=StringSearch("relation"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class CapabilityStatement(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    acceptUnknown = fields.CharField(blank=False, required=True)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    document = fields.EmbeddedDocumentListField("CapabilityStatementDocument", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    fhirVersion = fields.CharField(blank=False, required=True)
    format = fields.ListField(fields.CharField(), blank=False, required=True)
    implementation = fields.EmbeddedDocumentField("CapabilityStatementImplementation", blank=True, required=False)
    implementationGuide = fields.ListField(fields.CharField(), blank=True, required=False)
    instantiates = fields.ListField(fields.CharField(), blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    kind = fields.CharField(blank=False, required=True)
    messaging = fields.EmbeddedDocumentListField("CapabilityStatementMessaging", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    patchFormat = fields.ListField(fields.CharField(), blank=True, required=False)
    profile = fields.ObjectIdField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    rest = fields.EmbeddedDocumentListField("CapabilityStatementRest", blank=True, required=False)
    software = fields.EmbeddedDocumentField("CapabilityStatementSoftware", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        acceptUnknown = Attribute(getter="acceptUnknown", setter="acceptUnknown", searcher=StringSearch("acceptUnknown"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        document = EmbeddedAttribute(type="CapabilityStatementDocument", getter="document", setter="document", searcher=StringSearch("document"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        fhirVersion = Attribute(getter="fhirVersion", setter="fhirVersion", searcher=StringSearch("fhirVersion"))
        format = Attribute(getter="format", setter="format", searcher=StringSearch("format"))
        implementation = EmbeddedAttribute(type="CapabilityStatementImplementation", getter="implementation", setter="implementation", searcher=StringSearch("implementation"))
        implementationGuide = Attribute(getter="implementationGuide", setter="implementationGuide", searcher=StringSearch("implementationGuide"))
        instantiates = Attribute(getter="instantiates", setter="instantiates", searcher=StringSearch("instantiates"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))
        messaging = EmbeddedAttribute(type="CapabilityStatementMessaging", getter="messaging", setter="messaging", searcher=StringSearch("messaging"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        patchFormat = Attribute(getter="patchFormat", setter="patchFormat", searcher=StringSearch("patchFormat"))
        profile = ObjectIdReferenceAttribute({'StructureDefinition'}, ("profile", str), "profile", pk_setter="profile")
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        rest = EmbeddedAttribute(type="CapabilityStatementRest", getter="rest", setter="rest", searcher=StringSearch("rest"))
        software = EmbeddedAttribute(type="CapabilityStatementSoftware", getter="software", setter="software", searcher=StringSearch("software"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class CapabilityStatementDocument(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    mode = fields.CharField(blank=False, required=True)
    profile = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        profile = ObjectIdReferenceAttribute({'StructureDefinition'}, ("profile", str), "profile", pk_setter="profile")

class CapabilityStatementImplementation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class CapabilityStatementMessaging(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    endpoint = fields.EmbeddedDocumentListField("CapabilityStatementMessagingEndpoint", blank=True, required=False)
    event = fields.EmbeddedDocumentListField("CapabilityStatementMessagingEvent", blank=True, required=False)
    reliableCache = fields.IntegerField(blank=True, required=False)
    supportedMessage = fields.EmbeddedDocumentListField("CapabilityStatementMessagingSupportedMessage", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        endpoint = EmbeddedAttribute(type="CapabilityStatementMessagingEndpoint", getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        event = EmbeddedAttribute(type="CapabilityStatementMessagingEvent", getter="event", setter="event", searcher=StringSearch("event"))
        reliableCache = Attribute(getter="reliableCache", setter="reliableCache", searcher=NumericSearch("reliableCache"))
        supportedMessage = EmbeddedAttribute(type="CapabilityStatementMessagingSupportedMessage", getter="supportedMessage", setter="supportedMessage", searcher=StringSearch("supportedMessage"))

class CapabilityStatementMessagingEndpoint(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    address = fields.CharField(blank=False, required=True)
    protocol = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        address = Attribute(getter="address", setter="address", searcher=StringSearch("address"))
        protocol = EmbeddedAttribute(type="Coding", getter="protocol", setter="protocol", searcher=StringSearch("protocol"))

class CapabilityStatementMessagingEvent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    category = fields.CharField(blank=True, required=False)
    code = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    documentation = fields.CharField(blank=True, required=False)
    focus = fields.CharField(blank=False, required=True)
    mode = fields.CharField(blank=False, required=True)
    request = fields.ObjectIdField(blank=False, required=True)
    response = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        category = Attribute(getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="Coding", getter="code", setter="code", searcher=StringSearch("code"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        focus = Attribute(getter="focus", setter="focus", searcher=StringSearch("focus"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        request = ObjectIdReferenceAttribute({'StructureDefinition'}, ("request", str), "request", pk_setter="request")
        response = ObjectIdReferenceAttribute({'StructureDefinition'}, ("response", str), "response", pk_setter="response")

class CapabilityStatementMessagingSupportedMessage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    definition = fields.ObjectIdField(blank=False, required=True)
    mode = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        definition = ObjectIdReferenceAttribute({'MessageDefinition'}, ("definition", str), "definition", pk_setter="definition")
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))

class CapabilityStatementRest(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    compartment = fields.ListField(fields.CharField(), blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    interaction = fields.EmbeddedDocumentListField("CapabilityStatementRestInteraction", blank=True, required=False)
    mode = fields.CharField(blank=False, required=True)
    operation = fields.EmbeddedDocumentListField("CapabilityStatementRestOperation", blank=True, required=False)
    resource = fields.EmbeddedDocumentListField("CapabilityStatementRestResource", blank=True, required=False)
    searchParam = fields.EmbeddedDocumentListField("CapabilityStatementRestResourceSearchParam", blank=True, required=False)
    security = fields.EmbeddedDocumentField("CapabilityStatementRestSecurity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        compartment = Attribute(getter="compartment", setter="compartment", searcher=StringSearch("compartment"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        interaction = EmbeddedAttribute(type="CapabilityStatementRestInteraction", getter="interaction", setter="interaction", searcher=StringSearch("interaction"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        operation = EmbeddedAttribute(type="CapabilityStatementRestOperation", getter="operation", setter="operation", searcher=StringSearch("operation"))
        resource = EmbeddedAttribute(type="CapabilityStatementRestResource", getter="resource", setter="resource", searcher=StringSearch("resource"))
        searchParam = EmbeddedAttribute(type="CapabilityStatementRestResourceSearchParam", getter="searchParam", setter="searchParam", searcher=StringSearch("searchParam"))
        security = EmbeddedAttribute(type="CapabilityStatementRestSecurity", getter="security", setter="security", searcher=StringSearch("security"))

class CapabilityStatementRestInteraction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    documentation = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))

class CapabilityStatementRestOperation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    definition = fields.ObjectIdField(blank=False, required=True)
    name = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        definition = ObjectIdReferenceAttribute({'OperationDefinition'}, ("definition", str), "definition", pk_setter="definition")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))

class CapabilityStatementRestResource(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    conditionalCreate = fields.BooleanField(blank=True, required=False)
    conditionalDelete = fields.CharField(blank=True, required=False)
    conditionalRead = fields.CharField(blank=True, required=False)
    conditionalUpdate = fields.BooleanField(blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    interaction = fields.EmbeddedDocumentListField("CapabilityStatementRestResourceInteraction", blank=False, required=True)
    profile = fields.ObjectIdField(blank=True, required=False)
    readHistory = fields.BooleanField(blank=True, required=False)
    referencePolicy = fields.ListField(fields.CharField(), blank=True, required=False)
    searchInclude = fields.ListField(fields.CharField(), blank=True, required=False)
    searchParam = fields.EmbeddedDocumentListField("CapabilityStatementRestResourceSearchParam", blank=True, required=False)
    searchRevInclude = fields.ListField(fields.CharField(), blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    updateCreate = fields.BooleanField(blank=True, required=False)
    versioning = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        conditionalCreate = Attribute(getter="conditionalCreate", setter="conditionalCreate", searcher=StringSearch("conditionalCreate"))
        conditionalDelete = Attribute(getter="conditionalDelete", setter="conditionalDelete", searcher=StringSearch("conditionalDelete"))
        conditionalRead = Attribute(getter="conditionalRead", setter="conditionalRead", searcher=StringSearch("conditionalRead"))
        conditionalUpdate = Attribute(getter="conditionalUpdate", setter="conditionalUpdate", searcher=StringSearch("conditionalUpdate"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        interaction = EmbeddedAttribute(type="CapabilityStatementRestResourceInteraction", getter="interaction", setter="interaction", searcher=StringSearch("interaction"))
        profile = ObjectIdReferenceAttribute({'StructureDefinition'}, ("profile", str), "profile", pk_setter="profile")
        readHistory = Attribute(getter="readHistory", setter="readHistory", searcher=StringSearch("readHistory"))
        referencePolicy = Attribute(getter="referencePolicy", setter="referencePolicy", searcher=StringSearch("referencePolicy"))
        searchInclude = Attribute(getter="searchInclude", setter="searchInclude", searcher=StringSearch("searchInclude"))
        searchParam = EmbeddedAttribute(type="CapabilityStatementRestResourceSearchParam", getter="searchParam", setter="searchParam", searcher=StringSearch("searchParam"))
        searchRevInclude = Attribute(getter="searchRevInclude", setter="searchRevInclude", searcher=StringSearch("searchRevInclude"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        updateCreate = Attribute(getter="updateCreate", setter="updateCreate", searcher=StringSearch("updateCreate"))
        versioning = Attribute(getter="versioning", setter="versioning", searcher=StringSearch("versioning"))

class CapabilityStatementRestResourceInteraction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    documentation = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))

class CapabilityStatementRestResourceSearchParam(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    definition = fields.CharField(blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class CapabilityStatementRestSecurity(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    certificate = fields.EmbeddedDocumentListField("CapabilityStatementRestSecurityCertificate", blank=True, required=False)
    cors = fields.BooleanField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    service = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        certificate = EmbeddedAttribute(type="CapabilityStatementRestSecurityCertificate", getter="certificate", setter="certificate", searcher=StringSearch("certificate"))
        cors = Attribute(getter="cors", setter="cors", searcher=StringSearch("cors"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        service = EmbeddedAttribute(type="CodeableConcept", getter="service", setter="service", searcher=StringSearch("service"))

class CapabilityStatementRestSecurityCertificate(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    blob = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        blob = Attribute(getter="blob", setter="blob", searcher=StringSearch("blob"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class CapabilityStatementSoftware(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    releaseDate = fields.DateTimeField(blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        releaseDate = DateAttribute("releaseDate")
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class CarePlan(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    activity = fields.EmbeddedDocumentListField("CarePlanActivity", blank=True, required=False)
    addresses = fields.ObjectIdField(blank=True, required=False)
    author = fields.ObjectIdField(blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    careTeam = fields.ObjectIdField(blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    definition = fields.ObjectIdField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    goal = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    intent = fields.CharField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    partOf = fields.ObjectIdField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    replaces = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=False, required=True)
    supportingInfo = fields.ObjectIdField(blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        activity = EmbeddedAttribute(type="CarePlanActivity", getter="activity", setter="activity", searcher=StringSearch("activity"))
        addresses = ObjectIdReferenceAttribute({'Condition'}, ("addresses", str), "addresses", pk_setter="addresses")
        author = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'CareTeam'}, ("author", str), "author", pk_setter="author")
        basedOn = ObjectIdReferenceAttribute({'CarePlan'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        careTeam = ObjectIdReferenceAttribute({'CareTeam'}, ("careTeam", str), "careTeam", pk_setter="careTeam")
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        definition = ObjectIdReferenceAttribute({'PlanDefinition', 'Questionnaire'}, ("definition", str), "definition", pk_setter="definition")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        goal = ObjectIdReferenceAttribute({'Goal'}, ("goal", str), "goal", pk_setter="goal")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        intent = Attribute(getter="intent", setter="intent", searcher=StringSearch("intent"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        partOf = ObjectIdReferenceAttribute({'CarePlan'}, ("partOf", str), "partOf", pk_setter="partOf")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        replaces = ObjectIdReferenceAttribute({'CarePlan'}, ("replaces", str), "replaces", pk_setter="replaces")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")
        supportingInfo = ObjectIdReferenceAttribute({'Resource'}, ("supportingInfo", str), "supportingInfo", pk_setter="supportingInfo")
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))

class CarePlanActivity(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    detail = fields.EmbeddedDocumentField("CarePlanActivityDetail", blank=True, required=False)
    outcomeCodeableConcept = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    outcomeReference = fields.ObjectIdField(blank=True, required=False)
    progress = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    reference = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        detail = EmbeddedAttribute(type="CarePlanActivityDetail", getter="detail", setter="detail", searcher=StringSearch("detail"))
        outcomeCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="outcomeCodeableConcept", setter="outcomeCodeableConcept", searcher=StringSearch("outcomeCodeableConcept"))
        outcomeReference = ObjectIdReferenceAttribute({'Resource'}, ("outcomeReference", str), "outcomeReference", pk_setter="outcomeReference")
        progress = EmbeddedAttribute(type="Annotation", getter="progress", setter="progress", searcher=StringSearch("progress"))
        reference = ObjectIdReferenceAttribute({'CommunicationRequest', 'MedicationRequest', 'ProcedureRequest', 'Task', 'Appointment', 'ReferralRequest', 'NutritionOrder', 'RequestGroup', 'DeviceRequest', 'VisionPrescription'}, ("reference", str), "reference", pk_setter="reference")

class CarePlanActivityDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    dailyAmount = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    definition = fields.ObjectIdField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    goal = fields.ObjectIdField(blank=True, required=False)
    location = fields.ObjectIdField(blank=True, required=False)
    performer = fields.ObjectIdField(blank=True, required=False)
    productCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    productReference = fields.ObjectIdField(blank=True, required=False)
    prohibited = fields.BooleanField(blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    scheduledPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    scheduledString = fields.CharField(blank=True, required=False)
    scheduledTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusReason = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        dailyAmount = EmbeddedAttribute(type="Quantity", getter="dailyAmount", setter="dailyAmount", searcher=StringSearch("dailyAmount"))
        definition = ObjectIdReferenceAttribute({'PlanDefinition', 'ActivityDefinition', 'Questionnaire'}, ("definition", str), "definition", pk_setter="definition")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        goal = ObjectIdReferenceAttribute({'Goal'}, ("goal", str), "goal", pk_setter="goal")
        location = ObjectIdReferenceAttribute({'Location'}, ("location", str), "location", pk_setter="location")
        performer = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'CareTeam'}, ("performer", str), "performer", pk_setter="performer")
        productCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="productCodeableConcept", setter="productCodeableConcept", searcher=StringSearch("productCodeableConcept"))
        productReference = ObjectIdReferenceAttribute({'Substance', 'Medication'}, ("productReference", str), "productReference", pk_setter="productReference")
        prohibited = Attribute(getter="prohibited", setter="prohibited", searcher=StringSearch("prohibited"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = ObjectIdReferenceAttribute({'Condition'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        scheduledPeriod = EmbeddedAttribute(type="Period", getter="scheduledPeriod", setter="scheduledPeriod", searcher=StringSearch("scheduledPeriod"))
        scheduledString = Attribute(getter="scheduledString", setter="scheduledString", searcher=StringSearch("scheduledString"))
        scheduledTiming = EmbeddedAttribute(type="Timing", getter="scheduledTiming", setter="scheduledTiming", searcher=StringSearch("scheduledTiming"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusReason = Attribute(getter="statusReason", setter="statusReason", searcher=StringSearch("statusReason"))

class CareTeam(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    managingOrganization = fields.ObjectIdField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    participant = fields.EmbeddedDocumentListField("CareTeamParticipant", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    subject = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        managingOrganization = ObjectIdReferenceAttribute({'Organization'}, ("managingOrganization", str), "managingOrganization", pk_setter="managingOrganization")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        participant = EmbeddedAttribute(type="CareTeamParticipant", getter="participant", setter="participant", searcher=StringSearch("participant"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = ObjectIdReferenceAttribute({'Condition'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")

class CareTeamParticipant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    member = fields.ObjectIdField(blank=True, required=False)
    onBehalfOf = fields.ObjectIdField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        member = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'CareTeam'}, ("member", str), "member", pk_setter="member")
        onBehalfOf = ObjectIdReferenceAttribute({'Organization'}, ("onBehalfOf", str), "onBehalfOf", pk_setter="onBehalfOf")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class ChargeItem(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    account = fields.ObjectIdField(blank=True, required=False)
    bodysite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    context = fields.ObjectIdField(blank=True, required=False)
    definition = fields.ListField(fields.CharField(), blank=True, required=False)
    enteredDate = fields.DateTimeField(blank=True, required=False)
    enterer = fields.ObjectIdField(blank=True, required=False)
    factorOverride = fields.FloatField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    occurrenceTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    overrideReason = fields.CharField(blank=True, required=False)
    partOf = fields.ObjectIdField(blank=True, required=False)
    participant = fields.EmbeddedDocumentListField("ChargeItemParticipant", blank=True, required=False)
    performingOrganization = fields.ObjectIdField(blank=True, required=False)
    priceOverride = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    reason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    requestingOrganization = fields.ObjectIdField(blank=True, required=False)
    service = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=False, required=True)
    supportingInformation = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        account = ObjectIdReferenceAttribute({'Account'}, ("account", str), "account", pk_setter="account")
        bodysite = EmbeddedAttribute(type="CodeableConcept", getter="bodysite", setter="bodysite", searcher=StringSearch("bodysite"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        enteredDate = DateAttribute("enteredDate")
        enterer = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("enterer", str), "enterer", pk_setter="enterer")
        factorOverride = Attribute(getter="factorOverride", setter="factorOverride", searcher=NumericSearch("factorOverride"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        occurrenceTiming = EmbeddedAttribute(type="Timing", getter="occurrenceTiming", setter="occurrenceTiming", searcher=StringSearch("occurrenceTiming"))
        overrideReason = Attribute(getter="overrideReason", setter="overrideReason", searcher=StringSearch("overrideReason"))
        partOf = ObjectIdReferenceAttribute({'ChargeItem'}, ("partOf", str), "partOf", pk_setter="partOf")
        participant = EmbeddedAttribute(type="ChargeItemParticipant", getter="participant", setter="participant", searcher=StringSearch("participant"))
        performingOrganization = ObjectIdReferenceAttribute({'Organization'}, ("performingOrganization", str), "performingOrganization", pk_setter="performingOrganization")
        priceOverride = EmbeddedAttribute(type="Money", getter="priceOverride", setter="priceOverride", searcher=StringSearch("priceOverride"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        requestingOrganization = ObjectIdReferenceAttribute({'Organization'}, ("requestingOrganization", str), "requestingOrganization", pk_setter="requestingOrganization")
        service = ObjectIdReferenceAttribute({'ImagingStudy', 'Observation', 'SupplyDelivery', 'Immunization', 'MedicationAdministration', 'MedicationDispense', 'Procedure', 'DiagnosticReport'}, ("service", str), "service", pk_setter="service")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")
        supportingInformation = ObjectIdReferenceAttribute({'Resource'}, ("supportingInformation", str), "supportingInformation", pk_setter="supportingInformation")

class ChargeItemParticipant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.ObjectIdField(blank=False, required=True)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("actor", str), "actor", pk_setter="actor")
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class Claim(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    accident = fields.EmbeddedDocumentField("ClaimAccident", blank=True, required=False)
    billablePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    careTeam = fields.EmbeddedDocumentListField("ClaimCareTeam", blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    diagnosis = fields.EmbeddedDocumentListField("ClaimDiagnosis", blank=True, required=False)
    employmentImpacted = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    enterer = fields.ObjectIdField(blank=True, required=False)
    facility = fields.ObjectIdField(blank=True, required=False)
    fundsReserve = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    hospitalization = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    information = fields.EmbeddedDocumentListField("ClaimInformation", blank=True, required=False)
    insurance = fields.EmbeddedDocumentListField("ClaimInsurance", blank=True, required=False)
    insurer = fields.ObjectIdField(blank=True, required=False)
    item = fields.EmbeddedDocumentListField("ClaimItem", blank=True, required=False)
    organization = fields.ObjectIdField(blank=True, required=False)
    originalPrescription = fields.ObjectIdField(blank=True, required=False)
    patient = fields.ObjectIdField(blank=True, required=False)
    payee = fields.EmbeddedDocumentField("ClaimPayee", blank=True, required=False)
    prescription = fields.ObjectIdField(blank=True, required=False)
    priority = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    procedure = fields.EmbeddedDocumentListField("ClaimProcedure", blank=True, required=False)
    provider = fields.ObjectIdField(blank=True, required=False)
    referral = fields.ObjectIdField(blank=True, required=False)
    related = fields.EmbeddedDocumentListField("ClaimRelated", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    subType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    total = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    use = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        accident = EmbeddedAttribute(type="ClaimAccident", getter="accident", setter="accident", searcher=StringSearch("accident"))
        billablePeriod = EmbeddedAttribute(type="Period", getter="billablePeriod", setter="billablePeriod", searcher=StringSearch("billablePeriod"))
        careTeam = EmbeddedAttribute(type="ClaimCareTeam", getter="careTeam", setter="careTeam", searcher=StringSearch("careTeam"))
        created = DateAttribute("created")
        diagnosis = EmbeddedAttribute(type="ClaimDiagnosis", getter="diagnosis", setter="diagnosis", searcher=StringSearch("diagnosis"))
        employmentImpacted = EmbeddedAttribute(type="Period", getter="employmentImpacted", setter="employmentImpacted", searcher=StringSearch("employmentImpacted"))
        enterer = ObjectIdReferenceAttribute({'Practitioner'}, ("enterer", str), "enterer", pk_setter="enterer")
        facility = ObjectIdReferenceAttribute({'Location'}, ("facility", str), "facility", pk_setter="facility")
        fundsReserve = EmbeddedAttribute(type="CodeableConcept", getter="fundsReserve", setter="fundsReserve", searcher=StringSearch("fundsReserve"))
        hospitalization = EmbeddedAttribute(type="Period", getter="hospitalization", setter="hospitalization", searcher=StringSearch("hospitalization"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        information = EmbeddedAttribute(type="ClaimInformation", getter="information", setter="information", searcher=StringSearch("information"))
        insurance = EmbeddedAttribute(type="ClaimInsurance", getter="insurance", setter="insurance", searcher=StringSearch("insurance"))
        insurer = ObjectIdReferenceAttribute({'Organization'}, ("insurer", str), "insurer", pk_setter="insurer")
        item = EmbeddedAttribute(type="ClaimItem", getter="item", setter="item", searcher=StringSearch("item"))
        organization = ObjectIdReferenceAttribute({'Organization'}, ("organization", str), "organization", pk_setter="organization")
        originalPrescription = ObjectIdReferenceAttribute({'MedicationRequest'}, ("originalPrescription", str), "originalPrescription", pk_setter="originalPrescription")
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        payee = EmbeddedAttribute(type="ClaimPayee", getter="payee", setter="payee", searcher=StringSearch("payee"))
        prescription = ObjectIdReferenceAttribute({'VisionPrescription', 'MedicationRequest'}, ("prescription", str), "prescription", pk_setter="prescription")
        priority = EmbeddedAttribute(type="CodeableConcept", getter="priority", setter="priority", searcher=StringSearch("priority"))
        procedure = EmbeddedAttribute(type="ClaimProcedure", getter="procedure", setter="procedure", searcher=StringSearch("procedure"))
        provider = ObjectIdReferenceAttribute({'Practitioner'}, ("provider", str), "provider", pk_setter="provider")
        referral = ObjectIdReferenceAttribute({'ReferralRequest'}, ("referral", str), "referral", pk_setter="referral")
        related = EmbeddedAttribute(type="ClaimRelated", getter="related", setter="related", searcher=StringSearch("related"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subType = EmbeddedAttribute(type="CodeableConcept", getter="subType", setter="subType", searcher=StringSearch("subType"))
        total = EmbeddedAttribute(type="Money", getter="total", setter="total", searcher=StringSearch("total"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))

class ClaimAccident(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    date = fields.DateTimeField(blank=False, required=True)
    locationAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    locationReference = fields.ObjectIdField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        date = DateAttribute("date")
        locationAddress = EmbeddedAttribute(type="Address", getter="locationAddress", setter="locationAddress", searcher=StringSearch("locationAddress"))
        locationReference = ObjectIdReferenceAttribute({'Location'}, ("locationReference", str), "locationReference", pk_setter="locationReference")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ClaimCareTeam(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    provider = fields.ObjectIdField(blank=False, required=True)
    qualification = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    responsible = fields.BooleanField(blank=True, required=False)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        provider = ObjectIdReferenceAttribute({'Practitioner', 'Organization'}, ("provider", str), "provider", pk_setter="provider")
        qualification = EmbeddedAttribute(type="CodeableConcept", getter="qualification", setter="qualification", searcher=StringSearch("qualification"))
        responsible = Attribute(getter="responsible", setter="responsible", searcher=StringSearch("responsible"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))

class ClaimDiagnosis(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    diagnosisCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    diagnosisReference = fields.ObjectIdField(blank=False, required=True)
    packageCode = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        diagnosisCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="diagnosisCodeableConcept", setter="diagnosisCodeableConcept", searcher=StringSearch("diagnosisCodeableConcept"))
        diagnosisReference = ObjectIdReferenceAttribute({'Condition'}, ("diagnosisReference", str), "diagnosisReference", pk_setter="diagnosisReference")
        packageCode = EmbeddedAttribute(type="CodeableConcept", getter="packageCode", setter="packageCode", searcher=StringSearch("packageCode"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ClaimInformation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    reason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    timingDate = fields.DateTimeField(blank=True, required=False)
    timingPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueReference = fields.ObjectIdField(blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        timingDate = DateAttribute("timingDate")
        timingPeriod = EmbeddedAttribute(type="Period", getter="timingPeriod", setter="timingPeriod", searcher=StringSearch("timingPeriod"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueReference = ObjectIdReferenceAttribute({'Resource'}, ("valueReference", str), "valueReference", pk_setter="valueReference")
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))

class ClaimInsurance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    businessArrangement = fields.CharField(blank=True, required=False)
    claimResponse = fields.ObjectIdField(blank=True, required=False)
    coverage = fields.ObjectIdField(blank=False, required=True)
    focal = fields.BooleanField(blank=False, required=True)
    preAuthRef = fields.ListField(fields.CharField(), blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        businessArrangement = Attribute(getter="businessArrangement", setter="businessArrangement", searcher=StringSearch("businessArrangement"))
        claimResponse = ObjectIdReferenceAttribute({'ClaimResponse'}, ("claimResponse", str), "claimResponse", pk_setter="claimResponse")
        coverage = ObjectIdReferenceAttribute({'Coverage'}, ("coverage", str), "coverage", pk_setter="coverage")
        focal = Attribute(getter="focal", setter="focal", searcher=StringSearch("focal"))
        preAuthRef = Attribute(getter="preAuthRef", setter="preAuthRef", searcher=StringSearch("preAuthRef"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))

class ClaimItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    careTeamLinkId = fields.ListField(fields.IntegerField(), blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    detail = fields.EmbeddedDocumentListField("ClaimItemDetail", blank=True, required=False)
    diagnosisLinkId = fields.ListField(fields.IntegerField(), blank=True, required=False)
    encounter = fields.ObjectIdField(blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    informationLinkId = fields.ListField(fields.IntegerField(), blank=True, required=False)
    locationAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    locationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    locationReference = fields.ObjectIdField(blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    procedureLinkId = fields.ListField(fields.IntegerField(), blank=True, required=False)
    programCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    revenue = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    service = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    servicedDate = fields.DateTimeField(blank=True, required=False)
    servicedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    subSite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    udi = fields.ObjectIdField(blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        careTeamLinkId = Attribute(getter="careTeamLinkId", setter="careTeamLinkId", searcher=NumericSearch("careTeamLinkId"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        detail = EmbeddedAttribute(type="ClaimItemDetail", getter="detail", setter="detail", searcher=StringSearch("detail"))
        diagnosisLinkId = Attribute(getter="diagnosisLinkId", setter="diagnosisLinkId", searcher=NumericSearch("diagnosisLinkId"))
        encounter = ObjectIdReferenceAttribute({'Encounter'}, ("encounter", str), "encounter", pk_setter="encounter")
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        informationLinkId = Attribute(getter="informationLinkId", setter="informationLinkId", searcher=NumericSearch("informationLinkId"))
        locationAddress = EmbeddedAttribute(type="Address", getter="locationAddress", setter="locationAddress", searcher=StringSearch("locationAddress"))
        locationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="locationCodeableConcept", setter="locationCodeableConcept", searcher=StringSearch("locationCodeableConcept"))
        locationReference = ObjectIdReferenceAttribute({'Location'}, ("locationReference", str), "locationReference", pk_setter="locationReference")
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        procedureLinkId = Attribute(getter="procedureLinkId", setter="procedureLinkId", searcher=NumericSearch("procedureLinkId"))
        programCode = EmbeddedAttribute(type="CodeableConcept", getter="programCode", setter="programCode", searcher=StringSearch("programCode"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        revenue = EmbeddedAttribute(type="CodeableConcept", getter="revenue", setter="revenue", searcher=StringSearch("revenue"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        service = EmbeddedAttribute(type="CodeableConcept", getter="service", setter="service", searcher=StringSearch("service"))
        servicedDate = DateAttribute("servicedDate")
        servicedPeriod = EmbeddedAttribute(type="Period", getter="servicedPeriod", setter="servicedPeriod", searcher=StringSearch("servicedPeriod"))
        subSite = EmbeddedAttribute(type="CodeableConcept", getter="subSite", setter="subSite", searcher=StringSearch("subSite"))
        udi = ObjectIdReferenceAttribute({'Device'}, ("udi", str), "udi", pk_setter="udi")
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ClaimItemDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    programCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    revenue = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    service = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subDetail = fields.EmbeddedDocumentListField("ClaimItemDetailSubDetail", blank=True, required=False)
    udi = fields.ObjectIdField(blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        programCode = EmbeddedAttribute(type="CodeableConcept", getter="programCode", setter="programCode", searcher=StringSearch("programCode"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        revenue = EmbeddedAttribute(type="CodeableConcept", getter="revenue", setter="revenue", searcher=StringSearch("revenue"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        service = EmbeddedAttribute(type="CodeableConcept", getter="service", setter="service", searcher=StringSearch("service"))
        subDetail = EmbeddedAttribute(type="ClaimItemDetailSubDetail", getter="subDetail", setter="subDetail", searcher=StringSearch("subDetail"))
        udi = ObjectIdReferenceAttribute({'Device'}, ("udi", str), "udi", pk_setter="udi")
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ClaimItemDetailSubDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    programCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    revenue = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    service = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    udi = fields.ObjectIdField(blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        programCode = EmbeddedAttribute(type="CodeableConcept", getter="programCode", setter="programCode", searcher=StringSearch("programCode"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        revenue = EmbeddedAttribute(type="CodeableConcept", getter="revenue", setter="revenue", searcher=StringSearch("revenue"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        service = EmbeddedAttribute(type="CodeableConcept", getter="service", setter="service", searcher=StringSearch("service"))
        udi = ObjectIdReferenceAttribute({'Device'}, ("udi", str), "udi", pk_setter="udi")
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ClaimPayee(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    party = fields.ObjectIdField(blank=True, required=False)
    resourceType = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        party = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Practitioner', 'Organization'}, ("party", str), "party", pk_setter="party")
        resourceType = EmbeddedAttribute(type="Coding", getter="resourceType", setter="resourceType", searcher=StringSearch("resourceType"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ClaimProcedure(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    procedureCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    procedureReference = fields.ObjectIdField(blank=False, required=True)
    sequence = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        date = DateAttribute("date")
        procedureCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="procedureCodeableConcept", setter="procedureCodeableConcept", searcher=StringSearch("procedureCodeableConcept"))
        procedureReference = ObjectIdReferenceAttribute({'Procedure'}, ("procedureReference", str), "procedureReference", pk_setter="procedureReference")
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))

class ClaimRelated(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    claim = fields.ObjectIdField(blank=True, required=False)
    reference = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    relationship = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        claim = ObjectIdReferenceAttribute({'Claim'}, ("claim", str), "claim", pk_setter="claim")
        reference = EmbeddedAttribute(type="Identifier", getter="reference", setter="reference", searcher=StringSearch("reference"))
        relationship = EmbeddedAttribute(type="CodeableConcept", getter="relationship", setter="relationship", searcher=StringSearch("relationship"))

class ClaimResponse(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    addItem = fields.EmbeddedDocumentListField("ClaimResponseAddItem", blank=True, required=False)
    communicationRequest = fields.ObjectIdField(blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    disposition = fields.CharField(blank=True, required=False)
    error = fields.EmbeddedDocumentListField("ClaimResponseError", blank=True, required=False)
    form = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    insurance = fields.EmbeddedDocumentListField("ClaimResponseInsurance", blank=True, required=False)
    insurer = fields.ObjectIdField(blank=True, required=False)
    item = fields.EmbeddedDocumentListField("ClaimResponseItem", blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    patient = fields.ObjectIdField(blank=True, required=False)
    payeeType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    payment = fields.EmbeddedDocumentField("ClaimResponsePayment", blank=True, required=False)
    processNote = fields.EmbeddedDocumentListField("ClaimResponseProcessNote", blank=True, required=False)
    request = fields.ObjectIdField(blank=True, required=False)
    requestOrganization = fields.ObjectIdField(blank=True, required=False)
    requestProvider = fields.ObjectIdField(blank=True, required=False)
    reserved = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    totalBenefit = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    totalCost = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    unallocDeductable = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        addItem = EmbeddedAttribute(type="ClaimResponseAddItem", getter="addItem", setter="addItem", searcher=StringSearch("addItem"))
        communicationRequest = ObjectIdReferenceAttribute({'CommunicationRequest'}, ("communicationRequest", str), "communicationRequest", pk_setter="communicationRequest")
        created = DateAttribute("created")
        disposition = Attribute(getter="disposition", setter="disposition", searcher=StringSearch("disposition"))
        error = EmbeddedAttribute(type="ClaimResponseError", getter="error", setter="error", searcher=StringSearch("error"))
        form = EmbeddedAttribute(type="CodeableConcept", getter="form", setter="form", searcher=StringSearch("form"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        insurance = EmbeddedAttribute(type="ClaimResponseInsurance", getter="insurance", setter="insurance", searcher=StringSearch("insurance"))
        insurer = ObjectIdReferenceAttribute({'Organization'}, ("insurer", str), "insurer", pk_setter="insurer")
        item = EmbeddedAttribute(type="ClaimResponseItem", getter="item", setter="item", searcher=StringSearch("item"))
        outcome = EmbeddedAttribute(type="CodeableConcept", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        payeeType = EmbeddedAttribute(type="CodeableConcept", getter="payeeType", setter="payeeType", searcher=StringSearch("payeeType"))
        payment = EmbeddedAttribute(type="ClaimResponsePayment", getter="payment", setter="payment", searcher=StringSearch("payment"))
        processNote = EmbeddedAttribute(type="ClaimResponseProcessNote", getter="processNote", setter="processNote", searcher=StringSearch("processNote"))
        request = ObjectIdReferenceAttribute({'Claim'}, ("request", str), "request", pk_setter="request")
        requestOrganization = ObjectIdReferenceAttribute({'Organization'}, ("requestOrganization", str), "requestOrganization", pk_setter="requestOrganization")
        requestProvider = ObjectIdReferenceAttribute({'Practitioner'}, ("requestProvider", str), "requestProvider", pk_setter="requestProvider")
        reserved = EmbeddedAttribute(type="Coding", getter="reserved", setter="reserved", searcher=StringSearch("reserved"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        totalBenefit = EmbeddedAttribute(type="Money", getter="totalBenefit", setter="totalBenefit", searcher=StringSearch("totalBenefit"))
        totalCost = EmbeddedAttribute(type="Money", getter="totalCost", setter="totalCost", searcher=StringSearch("totalCost"))
        unallocDeductable = EmbeddedAttribute(type="Money", getter="unallocDeductable", setter="unallocDeductable", searcher=StringSearch("unallocDeductable"))

class ClaimResponseAddItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ClaimResponseItemAdjudication", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    detail = fields.EmbeddedDocumentListField("ClaimResponseAddItemDetail", blank=True, required=False)
    fee = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    revenue = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequenceLinkId = fields.ListField(fields.IntegerField(), blank=True, required=False)
    service = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ClaimResponseItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        detail = EmbeddedAttribute(type="ClaimResponseAddItemDetail", getter="detail", setter="detail", searcher=StringSearch("detail"))
        fee = EmbeddedAttribute(type="Money", getter="fee", setter="fee", searcher=StringSearch("fee"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        revenue = EmbeddedAttribute(type="CodeableConcept", getter="revenue", setter="revenue", searcher=StringSearch("revenue"))
        sequenceLinkId = Attribute(getter="sequenceLinkId", setter="sequenceLinkId", searcher=NumericSearch("sequenceLinkId"))
        service = EmbeddedAttribute(type="CodeableConcept", getter="service", setter="service", searcher=StringSearch("service"))

class ClaimResponseAddItemDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ClaimResponseItemAdjudication", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    fee = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    revenue = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    service = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ClaimResponseItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        fee = EmbeddedAttribute(type="Money", getter="fee", setter="fee", searcher=StringSearch("fee"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        revenue = EmbeddedAttribute(type="CodeableConcept", getter="revenue", setter="revenue", searcher=StringSearch("revenue"))
        service = EmbeddedAttribute(type="CodeableConcept", getter="service", setter="service", searcher=StringSearch("service"))

class ClaimResponseError(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    detailSequenceLinkId = fields.IntegerField(blank=True, required=False)
    sequenceLinkId = fields.IntegerField(blank=True, required=False)
    subdetailSequenceLinkId = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        detailSequenceLinkId = Attribute(getter="detailSequenceLinkId", setter="detailSequenceLinkId", searcher=NumericSearch("detailSequenceLinkId"))
        sequenceLinkId = Attribute(getter="sequenceLinkId", setter="sequenceLinkId", searcher=NumericSearch("sequenceLinkId"))
        subdetailSequenceLinkId = Attribute(getter="subdetailSequenceLinkId", setter="subdetailSequenceLinkId", searcher=NumericSearch("subdetailSequenceLinkId"))

class ClaimResponseInsurance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    businessArrangement = fields.CharField(blank=True, required=False)
    claimResponse = fields.ObjectIdField(blank=True, required=False)
    coverage = fields.ObjectIdField(blank=False, required=True)
    focal = fields.BooleanField(blank=False, required=True)
    preAuthRef = fields.ListField(fields.CharField(), blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        businessArrangement = Attribute(getter="businessArrangement", setter="businessArrangement", searcher=StringSearch("businessArrangement"))
        claimResponse = ObjectIdReferenceAttribute({'ClaimResponse'}, ("claimResponse", str), "claimResponse", pk_setter="claimResponse")
        coverage = ObjectIdReferenceAttribute({'Coverage'}, ("coverage", str), "coverage", pk_setter="coverage")
        focal = Attribute(getter="focal", setter="focal", searcher=StringSearch("focal"))
        preAuthRef = Attribute(getter="preAuthRef", setter="preAuthRef", searcher=StringSearch("preAuthRef"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))

class ClaimResponseItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ClaimResponseItemAdjudication", blank=True, required=False)
    detail = fields.EmbeddedDocumentListField("ClaimResponseItemDetail", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    sequenceLinkId = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ClaimResponseItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        detail = EmbeddedAttribute(type="ClaimResponseItemDetail", getter="detail", setter="detail", searcher=StringSearch("detail"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        sequenceLinkId = Attribute(getter="sequenceLinkId", setter="sequenceLinkId", searcher=NumericSearch("sequenceLinkId"))

class ClaimResponseItemAdjudication(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    reason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="Money", getter="amount", setter="amount", searcher=StringSearch("amount"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class ClaimResponseItemDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ClaimResponseItemAdjudication", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    sequenceLinkId = fields.IntegerField(blank=False, required=True)
    subDetail = fields.EmbeddedDocumentListField("ClaimResponseItemDetailSubDetail", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ClaimResponseItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        sequenceLinkId = Attribute(getter="sequenceLinkId", setter="sequenceLinkId", searcher=NumericSearch("sequenceLinkId"))
        subDetail = EmbeddedAttribute(type="ClaimResponseItemDetailSubDetail", getter="subDetail", setter="subDetail", searcher=StringSearch("subDetail"))

class ClaimResponseItemDetailSubDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ClaimResponseItemAdjudication", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    sequenceLinkId = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ClaimResponseItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        sequenceLinkId = Attribute(getter="sequenceLinkId", setter="sequenceLinkId", searcher=NumericSearch("sequenceLinkId"))

class ClaimResponsePayment(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjustment = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    adjustmentReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjustment = EmbeddedAttribute(type="Money", getter="adjustment", setter="adjustment", searcher=StringSearch("adjustment"))
        adjustmentReason = EmbeddedAttribute(type="CodeableConcept", getter="adjustmentReason", setter="adjustmentReason", searcher=StringSearch("adjustmentReason"))
        amount = EmbeddedAttribute(type="Money", getter="amount", setter="amount", searcher=StringSearch("amount"))
        date = DateAttribute("date")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ClaimResponseProcessNote(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    language = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    number = fields.IntegerField(blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        language = EmbeddedAttribute(type="CodeableConcept", getter="language", setter="language", searcher=StringSearch("language"))
        number = Attribute(getter="number", setter="number", searcher=NumericSearch("number"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ClinicalImpression(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    action = fields.ObjectIdField(blank=True, required=False)
    assessor = fields.ObjectIdField(blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    effectiveDateTime = fields.DateTimeField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    finding = fields.EmbeddedDocumentListField("ClinicalImpressionFinding", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    investigation = fields.EmbeddedDocumentListField("ClinicalImpressionInvestigation", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    previous = fields.ObjectIdField(blank=True, required=False)
    problem = fields.ObjectIdField(blank=True, required=False)
    prognosisCodeableConcept = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    prognosisReference = fields.ObjectIdField(blank=True, required=False)
    protocol = fields.ListField(fields.CharField(), blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=False, required=True)
    summary = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        action = ObjectIdReferenceAttribute({'MedicationRequest', 'ProcedureRequest', 'Appointment', 'ReferralRequest', 'Procedure'}, ("action", str), "action", pk_setter="action")
        assessor = ObjectIdReferenceAttribute({'Practitioner'}, ("assessor", str), "assessor", pk_setter="assessor")
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        effectiveDateTime = DateAttribute("effectiveDateTime")
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        finding = EmbeddedAttribute(type="ClinicalImpressionFinding", getter="finding", setter="finding", searcher=StringSearch("finding"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        investigation = EmbeddedAttribute(type="ClinicalImpressionInvestigation", getter="investigation", setter="investigation", searcher=StringSearch("investigation"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        previous = ObjectIdReferenceAttribute({'ClinicalImpression'}, ("previous", str), "previous", pk_setter="previous")
        problem = ObjectIdReferenceAttribute({'AllergyIntolerance', 'Condition'}, ("problem", str), "problem", pk_setter="problem")
        prognosisCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="prognosisCodeableConcept", setter="prognosisCodeableConcept", searcher=StringSearch("prognosisCodeableConcept"))
        prognosisReference = ObjectIdReferenceAttribute({'RiskAssessment'}, ("prognosisReference", str), "prognosisReference", pk_setter="prognosisReference")
        protocol = Attribute(getter="protocol", setter="protocol", searcher=StringSearch("protocol"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")
        summary = Attribute(getter="summary", setter="summary", searcher=StringSearch("summary"))

class ClinicalImpressionFinding(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    basis = fields.CharField(blank=True, required=False)
    itemCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    itemReference = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        basis = Attribute(getter="basis", setter="basis", searcher=StringSearch("basis"))
        itemCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="itemCodeableConcept", setter="itemCodeableConcept", searcher=StringSearch("itemCodeableConcept"))
        itemReference = ObjectIdReferenceAttribute({'Condition', 'Observation'}, ("itemReference", str), "itemReference", pk_setter="itemReference")

class ClinicalImpressionInvestigation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    item = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        item = ObjectIdReferenceAttribute({'ImagingStudy', 'QuestionnaireResponse', 'Observation', 'FamilyMemberHistory', 'RiskAssessment', 'DiagnosticReport'}, ("item", str), "item", pk_setter="item")

class CodeSystem(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    caseSensitive = fields.BooleanField(blank=True, required=False)
    compositional = fields.BooleanField(blank=True, required=False)
    concept = fields.EmbeddedDocumentListField("CodeSystemConcept", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    content = fields.CharField(blank=False, required=True)
    copyright = fields.CharField(blank=True, required=False)
    count = fields.IntegerField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    filter = fields.EmbeddedDocumentListField("CodeSystemFilter", blank=True, required=False)
    hierarchyMeaning = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    property = fields.EmbeddedDocumentListField("CodeSystemProperty", blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    valueSet = fields.CharField(blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    versionNeeded = fields.BooleanField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        caseSensitive = Attribute(getter="caseSensitive", setter="caseSensitive", searcher=StringSearch("caseSensitive"))
        compositional = Attribute(getter="compositional", setter="compositional", searcher=StringSearch("compositional"))
        concept = EmbeddedAttribute(type="CodeSystemConcept", getter="concept", setter="concept", searcher=StringSearch("concept"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        content = Attribute(getter="content", setter="content", searcher=StringSearch("content"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        count = Attribute(getter="count", setter="count", searcher=NumericSearch("count"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        filter = EmbeddedAttribute(type="CodeSystemFilter", getter="filter", setter="filter", searcher=StringSearch("filter"))
        hierarchyMeaning = Attribute(getter="hierarchyMeaning", setter="hierarchyMeaning", searcher=StringSearch("hierarchyMeaning"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        property = EmbeddedAttribute(type="CodeSystemProperty", getter="property", setter="property", searcher=StringSearch("property"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        valueSet = Attribute(getter="valueSet", setter="valueSet", searcher=StringSearch("valueSet"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))
        versionNeeded = Attribute(getter="versionNeeded", setter="versionNeeded", searcher=StringSearch("versionNeeded"))

class CodeSystemConcept(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    concept = fields.EmbeddedDocumentListField("CodeSystemConcept", blank=True, required=False)
    definition = fields.CharField(blank=True, required=False)
    designation = fields.EmbeddedDocumentListField("CodeSystemConceptDesignation", blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    property = fields.EmbeddedDocumentListField("CodeSystemConceptProperty", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        concept = EmbeddedAttribute(type="CodeSystemConcept", getter="concept", setter="concept", searcher=StringSearch("concept"))
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        designation = EmbeddedAttribute(type="CodeSystemConceptDesignation", getter="designation", setter="designation", searcher=StringSearch("designation"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        property = EmbeddedAttribute(type="CodeSystemConceptProperty", getter="property", setter="property", searcher=StringSearch("property"))

class CodeSystemConceptDesignation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    use = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        use = EmbeddedAttribute(type="Coding", getter="use", setter="use", searcher=StringSearch("use"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class CodeSystemConceptProperty(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    valueBoolean = fields.BooleanField(blank=False, required=True)
    valueCode = fields.CharField(blank=False, required=True)
    valueCoding = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    valueDateTime = fields.DateTimeField(blank=False, required=True)
    valueInteger = fields.IntegerField(blank=False, required=True)
    valueString = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCode = Attribute(getter="valueCode", setter="valueCode", searcher=StringSearch("valueCode"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueDateTime = DateAttribute("valueDateTime")
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))

class CodeSystemFilter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    operator = fields.ListField(fields.CharField(), blank=False, required=True)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        operator = Attribute(getter="operator", setter="operator", searcher=StringSearch("operator"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class CodeSystemProperty(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    uri = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        uri = Attribute(getter="uri", setter="uri", searcher=StringSearch("uri"))

class CodeableConcept(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    coding = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        coding = EmbeddedAttribute(type="Coding", getter="coding", setter="coding", searcher=StringSearch("coding"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))

class Coding(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    userSelected = fields.BooleanField(blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        userSelected = Attribute(getter="userSelected", setter="userSelected", searcher=StringSearch("userSelected"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class Communication(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    definition = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    medium = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    notDone = fields.BooleanField(blank=True, required=False)
    notDoneReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    partOf = fields.ObjectIdField(blank=True, required=False)
    payload = fields.EmbeddedDocumentListField("CommunicationPayload", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    received = fields.DateTimeField(blank=True, required=False)
    recipient = fields.ObjectIdField(blank=True, required=False)
    sender = fields.ObjectIdField(blank=True, required=False)
    sent = fields.DateTimeField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=True, required=False)
    topic = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        basedOn = ObjectIdReferenceAttribute({'Resource'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        definition = ObjectIdReferenceAttribute({'PlanDefinition', 'ActivityDefinition'}, ("definition", str), "definition", pk_setter="definition")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        medium = EmbeddedAttribute(type="CodeableConcept", getter="medium", setter="medium", searcher=StringSearch("medium"))
        notDone = Attribute(getter="notDone", setter="notDone", searcher=StringSearch("notDone"))
        notDoneReason = EmbeddedAttribute(type="CodeableConcept", getter="notDoneReason", setter="notDoneReason", searcher=StringSearch("notDoneReason"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        partOf = ObjectIdReferenceAttribute({'Resource'}, ("partOf", str), "partOf", pk_setter="partOf")
        payload = EmbeddedAttribute(type="CommunicationPayload", getter="payload", setter="payload", searcher=StringSearch("payload"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = ObjectIdReferenceAttribute({'Condition', 'Observation'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        received = DateAttribute("received")
        recipient = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Group', 'Device'}, ("recipient", str), "recipient", pk_setter="recipient")
        sender = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("sender", str), "sender", pk_setter="sender")
        sent = DateAttribute("sent")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")
        topic = ObjectIdReferenceAttribute({'Resource'}, ("topic", str), "topic", pk_setter="topic")

class CommunicationPayload(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    contentAttachment = fields.EmbeddedDocumentField("Attachment", blank=False, required=True)
    contentReference = fields.ObjectIdField(blank=False, required=True)
    contentString = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        contentAttachment = EmbeddedAttribute(type="Attachment", getter="contentAttachment", setter="contentAttachment", searcher=StringSearch("contentAttachment"))
        contentReference = ObjectIdReferenceAttribute({'Resource'}, ("contentReference", str), "contentReference", pk_setter="contentReference")
        contentString = Attribute(getter="contentString", setter="contentString", searcher=StringSearch("contentString"))

class CommunicationRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    groupIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    medium = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    payload = fields.EmbeddedDocumentListField("CommunicationRequestPayload", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    recipient = fields.ObjectIdField(blank=True, required=False)
    replaces = fields.ObjectIdField(blank=True, required=False)
    requester = fields.EmbeddedDocumentField("CommunicationRequestRequester", blank=True, required=False)
    sender = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=True, required=False)
    topic = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authoredOn = DateAttribute("authoredOn")
        basedOn = ObjectIdReferenceAttribute({'Resource'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        groupIdentifier = EmbeddedAttribute(type="Identifier", getter="groupIdentifier", setter="groupIdentifier", searcher=StringSearch("groupIdentifier"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        medium = EmbeddedAttribute(type="CodeableConcept", getter="medium", setter="medium", searcher=StringSearch("medium"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        payload = EmbeddedAttribute(type="CommunicationRequestPayload", getter="payload", setter="payload", searcher=StringSearch("payload"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = ObjectIdReferenceAttribute({'Condition', 'Observation'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        recipient = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'CareTeam', 'Organization', 'Group', 'Device'}, ("recipient", str), "recipient", pk_setter="recipient")
        replaces = ObjectIdReferenceAttribute({'CommunicationRequest'}, ("replaces", str), "replaces", pk_setter="replaces")
        requester = EmbeddedAttribute(type="CommunicationRequestRequester", getter="requester", setter="requester", searcher=StringSearch("requester"))
        sender = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("sender", str), "sender", pk_setter="sender")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")
        topic = ObjectIdReferenceAttribute({'Resource'}, ("topic", str), "topic", pk_setter="topic")

class CommunicationRequestPayload(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    contentAttachment = fields.EmbeddedDocumentField("Attachment", blank=False, required=True)
    contentReference = fields.ObjectIdField(blank=False, required=True)
    contentString = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        contentAttachment = EmbeddedAttribute(type="Attachment", getter="contentAttachment", setter="contentAttachment", searcher=StringSearch("contentAttachment"))
        contentReference = ObjectIdReferenceAttribute({'Resource'}, ("contentReference", str), "contentReference", pk_setter="contentReference")
        contentString = Attribute(getter="contentString", setter="contentString", searcher=StringSearch("contentString"))

class CommunicationRequestRequester(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    agent = fields.ObjectIdField(blank=False, required=True)
    onBehalfOf = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        agent = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("agent", str), "agent", pk_setter="agent")
        onBehalfOf = ObjectIdReferenceAttribute({'Organization'}, ("onBehalfOf", str), "onBehalfOf", pk_setter="onBehalfOf")

class CompartmentDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    resource = fields.EmbeddedDocumentListField("CompartmentDefinitionResource", blank=True, required=False)
    search = fields.BooleanField(blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=False, required=True)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        resource = EmbeddedAttribute(type="CompartmentDefinitionResource", getter="resource", setter="resource", searcher=StringSearch("resource"))
        search = Attribute(getter="search", setter="search", searcher=StringSearch("search"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))

class CompartmentDefinitionResource(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    documentation = fields.CharField(blank=True, required=False)
    param = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        param = Attribute(getter="param", setter="param", searcher=StringSearch("param"))

class Composition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    attester = fields.EmbeddedDocumentListField("CompositionAttester", blank=True, required=False)
    author = fields.ObjectIdField(blank=False, required=True)
    class_ = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    confidentiality = fields.CharField(blank=True, required=False)
    custodian = fields.ObjectIdField(blank=True, required=False)
    date = fields.DateTimeField(blank=False, required=True)
    encounter = fields.ObjectIdField(blank=True, required=False)
    event = fields.EmbeddedDocumentListField("CompositionEvent", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    relatesTo = fields.EmbeddedDocumentListField("CompositionRelatesTo", blank=True, required=False)
    section = fields.EmbeddedDocumentListField("CompositionSection", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=False, required=True)
    title = fields.CharField(blank=False, required=True)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        attester = EmbeddedAttribute(type="CompositionAttester", getter="attester", setter="attester", searcher=StringSearch("attester"))
        author = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Device', 'Practitioner'}, ("author", str), "author", pk_setter="author")
        class_ = EmbeddedAttribute(type="CodeableConcept", getter="class_", setter="class_", searcher=StringSearch("class_"))
        confidentiality = Attribute(getter="confidentiality", setter="confidentiality", searcher=StringSearch("confidentiality"))
        custodian = ObjectIdReferenceAttribute({'Organization'}, ("custodian", str), "custodian", pk_setter="custodian")
        date = DateAttribute("date")
        encounter = ObjectIdReferenceAttribute({'Encounter'}, ("encounter", str), "encounter", pk_setter="encounter")
        event = EmbeddedAttribute(type="CompositionEvent", getter="event", setter="event", searcher=StringSearch("event"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        relatesTo = EmbeddedAttribute(type="CompositionRelatesTo", getter="relatesTo", setter="relatesTo", searcher=StringSearch("relatesTo"))
        section = EmbeddedAttribute(type="CompositionSection", getter="section", setter="section", searcher=StringSearch("section"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Practitioner', 'Resource', 'Patient', 'Location', 'Group', 'Device'}, ("subject", str), "subject", pk_setter="subject")
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class CompositionAttester(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    mode = fields.ListField(fields.CharField(), blank=False, required=True)
    party = fields.ObjectIdField(blank=True, required=False)
    time = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        party = ObjectIdReferenceAttribute({'Patient', 'Practitioner', 'Organization'}, ("party", str), "party", pk_setter="party")
        time = DateAttribute("time")

class CompositionEvent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    detail = fields.ObjectIdField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        detail = ObjectIdReferenceAttribute({'Resource'}, ("detail", str), "detail", pk_setter="detail")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))

class CompositionRelatesTo(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    targetIdentifier = fields.EmbeddedDocumentField("Identifier", blank=False, required=True)
    targetReference = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        targetIdentifier = EmbeddedAttribute(type="Identifier", getter="targetIdentifier", setter="targetIdentifier", searcher=StringSearch("targetIdentifier"))
        targetReference = ObjectIdReferenceAttribute({'Composition'}, ("targetReference", str), "targetReference", pk_setter="targetReference")

class CompositionSection(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    emptyReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    entry = fields.ObjectIdField(blank=True, required=False)
    mode = fields.CharField(blank=True, required=False)
    orderedBy = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    section = fields.EmbeddedDocumentListField("CompositionSection", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        emptyReason = EmbeddedAttribute(type="CodeableConcept", getter="emptyReason", setter="emptyReason", searcher=StringSearch("emptyReason"))
        entry = ObjectIdReferenceAttribute({'Resource'}, ("entry", str), "entry", pk_setter="entry")
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        orderedBy = EmbeddedAttribute(type="CodeableConcept", getter="orderedBy", setter="orderedBy", searcher=StringSearch("orderedBy"))
        section = EmbeddedAttribute(type="CompositionSection", getter="section", setter="section", searcher=StringSearch("section"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))

class ConceptMap(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    group = fields.EmbeddedDocumentListField("ConceptMapGroup", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    sourceReference = fields.ObjectIdField(blank=True, required=False)
    sourceUri = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    targetReference = fields.ObjectIdField(blank=True, required=False)
    targetUri = fields.CharField(blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        group = EmbeddedAttribute(type="ConceptMapGroup", getter="group", setter="group", searcher=StringSearch("group"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        sourceReference = ObjectIdReferenceAttribute({'ValueSet'}, ("sourceReference", str), "sourceReference", pk_setter="sourceReference")
        sourceUri = Attribute(getter="sourceUri", setter="sourceUri", searcher=StringSearch("sourceUri"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        targetReference = ObjectIdReferenceAttribute({'ValueSet'}, ("targetReference", str), "targetReference", pk_setter="targetReference")
        targetUri = Attribute(getter="targetUri", setter="targetUri", searcher=StringSearch("targetUri"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ConceptMapGroup(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    element = fields.EmbeddedDocumentListField("ConceptMapGroupElement", blank=False, required=True)
    source = fields.CharField(blank=True, required=False)
    sourceVersion = fields.CharField(blank=True, required=False)
    target = fields.CharField(blank=True, required=False)
    targetVersion = fields.CharField(blank=True, required=False)
    unmapped = fields.EmbeddedDocumentField("ConceptMapGroupUnmapped", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        element = EmbeddedAttribute(type="ConceptMapGroupElement", getter="element", setter="element", searcher=StringSearch("element"))
        source = Attribute(getter="source", setter="source", searcher=StringSearch("source"))
        sourceVersion = Attribute(getter="sourceVersion", setter="sourceVersion", searcher=StringSearch("sourceVersion"))
        target = Attribute(getter="target", setter="target", searcher=StringSearch("target"))
        targetVersion = Attribute(getter="targetVersion", setter="targetVersion", searcher=StringSearch("targetVersion"))
        unmapped = EmbeddedAttribute(type="ConceptMapGroupUnmapped", getter="unmapped", setter="unmapped", searcher=StringSearch("unmapped"))

class ConceptMapGroupElement(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    target = fields.EmbeddedDocumentListField("ConceptMapGroupElementTarget", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        target = EmbeddedAttribute(type="ConceptMapGroupElementTarget", getter="target", setter="target", searcher=StringSearch("target"))

class ConceptMapGroupElementTarget(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    dependsOn = fields.EmbeddedDocumentListField("ConceptMapGroupElementTargetDependsOn", blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    equivalence = fields.CharField(blank=True, required=False)
    product = fields.EmbeddedDocumentListField("ConceptMapGroupElementTargetDependsOn", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        dependsOn = EmbeddedAttribute(type="ConceptMapGroupElementTargetDependsOn", getter="dependsOn", setter="dependsOn", searcher=StringSearch("dependsOn"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        equivalence = Attribute(getter="equivalence", setter="equivalence", searcher=StringSearch("equivalence"))
        product = EmbeddedAttribute(type="ConceptMapGroupElementTargetDependsOn", getter="product", setter="product", searcher=StringSearch("product"))

class ConceptMapGroupElementTargetDependsOn(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    display = fields.CharField(blank=True, required=False)
    property = fields.CharField(blank=False, required=True)
    system = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        property = Attribute(getter="property", setter="property", searcher=StringSearch("property"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))

class ConceptMapGroupUnmapped(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    mode = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class Condition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    abatementAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    abatementBoolean = fields.BooleanField(blank=True, required=False)
    abatementDateTime = fields.DateTimeField(blank=True, required=False)
    abatementPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    abatementRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    abatementString = fields.CharField(blank=True, required=False)
    assertedDate = fields.DateTimeField(blank=True, required=False)
    asserter = fields.ObjectIdField(blank=True, required=False)
    bodySite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    clinicalStatus = fields.CharField(blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    evidence = fields.EmbeddedDocumentListField("ConditionEvidence", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    onsetAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    onsetDateTime = fields.DateTimeField(blank=True, required=False)
    onsetPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    onsetRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    onsetString = fields.CharField(blank=True, required=False)
    severity = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    stage = fields.EmbeddedDocumentField("ConditionStage", blank=True, required=False)
    subject = fields.ObjectIdField(blank=False, required=True)
    verificationStatus = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        abatementAge = EmbeddedAttribute(type="Age", getter="abatementAge", setter="abatementAge", searcher=StringSearch("abatementAge"))
        abatementBoolean = Attribute(getter="abatementBoolean", setter="abatementBoolean", searcher=StringSearch("abatementBoolean"))
        abatementDateTime = DateAttribute("abatementDateTime")
        abatementPeriod = EmbeddedAttribute(type="Period", getter="abatementPeriod", setter="abatementPeriod", searcher=StringSearch("abatementPeriod"))
        abatementRange = EmbeddedAttribute(type="Range", getter="abatementRange", setter="abatementRange", searcher=StringSearch("abatementRange"))
        abatementString = Attribute(getter="abatementString", setter="abatementString", searcher=StringSearch("abatementString"))
        assertedDate = DateAttribute("assertedDate")
        asserter = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Practitioner'}, ("asserter", str), "asserter", pk_setter="asserter")
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        clinicalStatus = Attribute(getter="clinicalStatus", setter="clinicalStatus", searcher=StringSearch("clinicalStatus"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        evidence = EmbeddedAttribute(type="ConditionEvidence", getter="evidence", setter="evidence", searcher=StringSearch("evidence"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        onsetAge = EmbeddedAttribute(type="Age", getter="onsetAge", setter="onsetAge", searcher=StringSearch("onsetAge"))
        onsetDateTime = DateAttribute("onsetDateTime")
        onsetPeriod = EmbeddedAttribute(type="Period", getter="onsetPeriod", setter="onsetPeriod", searcher=StringSearch("onsetPeriod"))
        onsetRange = EmbeddedAttribute(type="Range", getter="onsetRange", setter="onsetRange", searcher=StringSearch("onsetRange"))
        onsetString = Attribute(getter="onsetString", setter="onsetString", searcher=StringSearch("onsetString"))
        severity = EmbeddedAttribute(type="CodeableConcept", getter="severity", setter="severity", searcher=StringSearch("severity"))
        stage = EmbeddedAttribute(type="ConditionStage", getter="stage", setter="stage", searcher=StringSearch("stage"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")
        verificationStatus = Attribute(getter="verificationStatus", setter="verificationStatus", searcher=StringSearch("verificationStatus"))

class ConditionEvidence(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    detail = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        detail = ObjectIdReferenceAttribute({'Resource'}, ("detail", str), "detail", pk_setter="detail")

class ConditionStage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    assessment = fields.ObjectIdField(blank=True, required=False)
    summary = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        assessment = ObjectIdReferenceAttribute({'ClinicalImpression', 'DiagnosticReport', 'Observation'}, ("assessment", str), "assessment", pk_setter="assessment")
        summary = EmbeddedAttribute(type="CodeableConcept", getter="summary", setter="summary", searcher=StringSearch("summary"))

class Consent(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    actor = fields.EmbeddedDocumentListField("ConsentActor", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    consentingParty = fields.ObjectIdField(blank=True, required=False)
    data = fields.EmbeddedDocumentListField("ConsentData", blank=True, required=False)
    dataPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    dateTime = fields.DateTimeField(blank=True, required=False)
    except_ = fields.EmbeddedDocumentListField("ConsentExcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    organization = fields.ObjectIdField(blank=True, required=False)
    patient = fields.ObjectIdField(blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    policy = fields.EmbeddedDocumentListField("ConsentPolicy", blank=True, required=False)
    policyRule = fields.CharField(blank=True, required=False)
    purpose = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    securityLabel = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    sourceAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    sourceIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    sourceReference = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        action = EmbeddedAttribute(type="CodeableConcept", getter="action", setter="action", searcher=StringSearch("action"))
        actor = EmbeddedAttribute(type="ConsentActor", getter="actor", setter="actor", searcher=StringSearch("actor"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        consentingParty = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Practitioner', 'Organization'}, ("consentingParty", str), "consentingParty", pk_setter="consentingParty")
        data = EmbeddedAttribute(type="ConsentData", getter="data", setter="data", searcher=StringSearch("data"))
        dataPeriod = EmbeddedAttribute(type="Period", getter="dataPeriod", setter="dataPeriod", searcher=StringSearch("dataPeriod"))
        dateTime = DateAttribute("dateTime")
        except_ = EmbeddedAttribute(type="ConsentExcept", getter="except_", setter="except_", searcher=StringSearch("except_"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        organization = ObjectIdReferenceAttribute({'Organization'}, ("organization", str), "organization", pk_setter="organization")
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        policy = EmbeddedAttribute(type="ConsentPolicy", getter="policy", setter="policy", searcher=StringSearch("policy"))
        policyRule = Attribute(getter="policyRule", setter="policyRule", searcher=StringSearch("policyRule"))
        purpose = EmbeddedAttribute(type="Coding", getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        securityLabel = EmbeddedAttribute(type="Coding", getter="securityLabel", setter="securityLabel", searcher=StringSearch("securityLabel"))
        sourceAttachment = EmbeddedAttribute(type="Attachment", getter="sourceAttachment", setter="sourceAttachment", searcher=StringSearch("sourceAttachment"))
        sourceIdentifier = EmbeddedAttribute(type="Identifier", getter="sourceIdentifier", setter="sourceIdentifier", searcher=StringSearch("sourceIdentifier"))
        sourceReference = ObjectIdReferenceAttribute({'Consent', 'QuestionnaireResponse', 'Contract', 'DocumentReference'}, ("sourceReference", str), "sourceReference", pk_setter="sourceReference")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class ConsentActor(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    reference = fields.ObjectIdField(blank=False, required=True)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        reference = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'CareTeam', 'Organization', 'Group', 'Device'}, ("reference", str), "reference", pk_setter="reference")
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class ConsentData(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    meaning = fields.CharField(blank=False, required=True)
    reference = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        meaning = Attribute(getter="meaning", setter="meaning", searcher=StringSearch("meaning"))
        reference = ObjectIdReferenceAttribute({'Resource'}, ("reference", str), "reference", pk_setter="reference")

class ConsentExcept(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    actor = fields.EmbeddedDocumentListField("ConsentExceptActor", blank=True, required=False)
    class_ = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    code = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    data = fields.EmbeddedDocumentListField("ConsentExceptData", blank=True, required=False)
    dataPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    purpose = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    securityLabel = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="CodeableConcept", getter="action", setter="action", searcher=StringSearch("action"))
        actor = EmbeddedAttribute(type="ConsentExceptActor", getter="actor", setter="actor", searcher=StringSearch("actor"))
        class_ = EmbeddedAttribute(type="Coding", getter="class_", setter="class_", searcher=StringSearch("class_"))
        code = EmbeddedAttribute(type="Coding", getter="code", setter="code", searcher=StringSearch("code"))
        data = EmbeddedAttribute(type="ConsentExceptData", getter="data", setter="data", searcher=StringSearch("data"))
        dataPeriod = EmbeddedAttribute(type="Period", getter="dataPeriod", setter="dataPeriod", searcher=StringSearch("dataPeriod"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        purpose = EmbeddedAttribute(type="Coding", getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        securityLabel = EmbeddedAttribute(type="Coding", getter="securityLabel", setter="securityLabel", searcher=StringSearch("securityLabel"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class ConsentExceptActor(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    reference = fields.ObjectIdField(blank=False, required=True)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        reference = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'CareTeam', 'Organization', 'Group', 'Device'}, ("reference", str), "reference", pk_setter="reference")
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class ConsentExceptData(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    meaning = fields.CharField(blank=False, required=True)
    reference = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        meaning = Attribute(getter="meaning", setter="meaning", searcher=StringSearch("meaning"))
        reference = ObjectIdReferenceAttribute({'Resource'}, ("reference", str), "reference", pk_setter="reference")

class ConsentPolicy(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    authority = fields.CharField(blank=True, required=False)
    uri = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        authority = Attribute(getter="authority", setter="authority", searcher=StringSearch("authority"))
        uri = Attribute(getter="uri", setter="uri", searcher=StringSearch("uri"))

class ContactDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class ContactPoint(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    rank = fields.IntegerField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    use = fields.CharField(blank=True, required=False)
    value = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        rank = Attribute(getter="rank", setter="rank", searcher=NumericSearch("rank"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class Contract(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    actionReason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    agent = fields.EmbeddedDocumentListField("ContractAgent", blank=True, required=False)
    applies = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    authority = fields.ObjectIdField(blank=True, required=False)
    bindingAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    bindingReference = fields.ObjectIdField(blank=True, required=False)
    contentDerivative = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    decisionType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    domain = fields.ObjectIdField(blank=True, required=False)
    friendly = fields.EmbeddedDocumentListField("ContractFriendly", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    issued = fields.DateTimeField(blank=True, required=False)
    legal = fields.EmbeddedDocumentListField("ContractLegal", blank=True, required=False)
    rule = fields.EmbeddedDocumentListField("ContractRule", blank=True, required=False)
    securityLabel = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    signer = fields.EmbeddedDocumentListField("ContractSigner", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    subType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    subject = fields.ObjectIdField(blank=True, required=False)
    term = fields.EmbeddedDocumentListField("ContractTerm", blank=True, required=False)
    topic = fields.ObjectIdField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valuedItem = fields.EmbeddedDocumentListField("ContractValuedItem", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        action = EmbeddedAttribute(type="CodeableConcept", getter="action", setter="action", searcher=StringSearch("action"))
        actionReason = EmbeddedAttribute(type="CodeableConcept", getter="actionReason", setter="actionReason", searcher=StringSearch("actionReason"))
        agent = EmbeddedAttribute(type="ContractAgent", getter="agent", setter="agent", searcher=StringSearch("agent"))
        applies = EmbeddedAttribute(type="Period", getter="applies", setter="applies", searcher=StringSearch("applies"))
        authority = ObjectIdReferenceAttribute({'Organization'}, ("authority", str), "authority", pk_setter="authority")
        bindingAttachment = EmbeddedAttribute(type="Attachment", getter="bindingAttachment", setter="bindingAttachment", searcher=StringSearch("bindingAttachment"))
        bindingReference = ObjectIdReferenceAttribute({'QuestionnaireResponse', 'Composition', 'DocumentReference'}, ("bindingReference", str), "bindingReference", pk_setter="bindingReference")
        contentDerivative = EmbeddedAttribute(type="CodeableConcept", getter="contentDerivative", setter="contentDerivative", searcher=StringSearch("contentDerivative"))
        decisionType = EmbeddedAttribute(type="CodeableConcept", getter="decisionType", setter="decisionType", searcher=StringSearch("decisionType"))
        domain = ObjectIdReferenceAttribute({'Location'}, ("domain", str), "domain", pk_setter="domain")
        friendly = EmbeddedAttribute(type="ContractFriendly", getter="friendly", setter="friendly", searcher=StringSearch("friendly"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        issued = DateAttribute("issued")
        legal = EmbeddedAttribute(type="ContractLegal", getter="legal", setter="legal", searcher=StringSearch("legal"))
        rule = EmbeddedAttribute(type="ContractRule", getter="rule", setter="rule", searcher=StringSearch("rule"))
        securityLabel = EmbeddedAttribute(type="Coding", getter="securityLabel", setter="securityLabel", searcher=StringSearch("securityLabel"))
        signer = EmbeddedAttribute(type="ContractSigner", getter="signer", setter="signer", searcher=StringSearch("signer"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subType = EmbeddedAttribute(type="CodeableConcept", getter="subType", setter="subType", searcher=StringSearch("subType"))
        subject = ObjectIdReferenceAttribute({'Resource'}, ("subject", str), "subject", pk_setter="subject")
        term = EmbeddedAttribute(type="ContractTerm", getter="term", setter="term", searcher=StringSearch("term"))
        topic = ObjectIdReferenceAttribute({'Resource'}, ("topic", str), "topic", pk_setter="topic")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        valuedItem = EmbeddedAttribute(type="ContractValuedItem", getter="valuedItem", setter="valuedItem", searcher=StringSearch("valuedItem"))

class ContractAgent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.ObjectIdField(blank=False, required=True)
    role = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Contract', 'Substance', 'Location', 'Organization', 'Group', 'Device'}, ("actor", str), "actor", pk_setter="actor")
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class ContractFriendly(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    contentAttachment = fields.EmbeddedDocumentField("Attachment", blank=False, required=True)
    contentReference = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        contentAttachment = EmbeddedAttribute(type="Attachment", getter="contentAttachment", setter="contentAttachment", searcher=StringSearch("contentAttachment"))
        contentReference = ObjectIdReferenceAttribute({'QuestionnaireResponse', 'Composition', 'DocumentReference'}, ("contentReference", str), "contentReference", pk_setter="contentReference")

class ContractLegal(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    contentAttachment = fields.EmbeddedDocumentField("Attachment", blank=False, required=True)
    contentReference = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        contentAttachment = EmbeddedAttribute(type="Attachment", getter="contentAttachment", setter="contentAttachment", searcher=StringSearch("contentAttachment"))
        contentReference = ObjectIdReferenceAttribute({'QuestionnaireResponse', 'Composition', 'DocumentReference'}, ("contentReference", str), "contentReference", pk_setter="contentReference")

class ContractRule(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    contentAttachment = fields.EmbeddedDocumentField("Attachment", blank=False, required=True)
    contentReference = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        contentAttachment = EmbeddedAttribute(type="Attachment", getter="contentAttachment", setter="contentAttachment", searcher=StringSearch("contentAttachment"))
        contentReference = ObjectIdReferenceAttribute({'DocumentReference'}, ("contentReference", str), "contentReference", pk_setter="contentReference")

class ContractSigner(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    party = fields.ObjectIdField(blank=False, required=True)
    signature = fields.EmbeddedDocumentListField("Signature", blank=False, required=True)
    type = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        party = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Practitioner', 'Organization'}, ("party", str), "party", pk_setter="party")
        signature = EmbeddedAttribute(type="Signature", getter="signature", setter="signature", searcher=StringSearch("signature"))
        type = EmbeddedAttribute(type="Coding", getter="type", setter="type", searcher=StringSearch("type"))

class ContractTerm(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    actionReason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    agent = fields.EmbeddedDocumentListField("ContractTermAgent", blank=True, required=False)
    applies = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    group = fields.EmbeddedDocumentListField("ContractTerm", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    issued = fields.DateTimeField(blank=True, required=False)
    securityLabel = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    subType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    topic = fields.ObjectIdField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valuedItem = fields.EmbeddedDocumentListField("ContractTermValuedItem", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="CodeableConcept", getter="action", setter="action", searcher=StringSearch("action"))
        actionReason = EmbeddedAttribute(type="CodeableConcept", getter="actionReason", setter="actionReason", searcher=StringSearch("actionReason"))
        agent = EmbeddedAttribute(type="ContractTermAgent", getter="agent", setter="agent", searcher=StringSearch("agent"))
        applies = EmbeddedAttribute(type="Period", getter="applies", setter="applies", searcher=StringSearch("applies"))
        group = EmbeddedAttribute(type="ContractTerm", getter="group", setter="group", searcher=StringSearch("group"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        issued = DateAttribute("issued")
        securityLabel = EmbeddedAttribute(type="Coding", getter="securityLabel", setter="securityLabel", searcher=StringSearch("securityLabel"))
        subType = EmbeddedAttribute(type="CodeableConcept", getter="subType", setter="subType", searcher=StringSearch("subType"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        topic = ObjectIdReferenceAttribute({'Resource'}, ("topic", str), "topic", pk_setter="topic")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        valuedItem = EmbeddedAttribute(type="ContractTermValuedItem", getter="valuedItem", setter="valuedItem", searcher=StringSearch("valuedItem"))

class ContractTermAgent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.ObjectIdField(blank=False, required=True)
    role = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Contract', 'Substance', 'Location', 'Organization', 'Group', 'Device'}, ("actor", str), "actor", pk_setter="actor")
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class ContractTermValuedItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    effectiveTime = fields.DateTimeField(blank=True, required=False)
    entityCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    entityReference = fields.ObjectIdField(blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    points = fields.FloatField(blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        effectiveTime = DateAttribute("effectiveTime")
        entityCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="entityCodeableConcept", setter="entityCodeableConcept", searcher=StringSearch("entityCodeableConcept"))
        entityReference = ObjectIdReferenceAttribute({'Resource'}, ("entityReference", str), "entityReference", pk_setter="entityReference")
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        points = Attribute(getter="points", setter="points", searcher=NumericSearch("points"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ContractValuedItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    effectiveTime = fields.DateTimeField(blank=True, required=False)
    entityCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    entityReference = fields.ObjectIdField(blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    points = fields.FloatField(blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        effectiveTime = DateAttribute("effectiveTime")
        entityCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="entityCodeableConcept", setter="entityCodeableConcept", searcher=StringSearch("entityCodeableConcept"))
        entityReference = ObjectIdReferenceAttribute({'Resource'}, ("entityReference", str), "entityReference", pk_setter="entityReference")
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        points = Attribute(getter="points", setter="points", searcher=NumericSearch("points"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class Contributor(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class Count(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    comparator = fields.CharField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    unit = fields.CharField(blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comparator = Attribute(getter="comparator", setter="comparator", searcher=StringSearch("comparator"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        unit = Attribute(getter="unit", setter="unit", searcher=StringSearch("unit"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class Coverage(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    beneficiary = fields.ObjectIdField(blank=True, required=False)
    contract = fields.ObjectIdField(blank=True, required=False)
    dependent = fields.CharField(blank=True, required=False)
    grouping = fields.EmbeddedDocumentField("CoverageGrouping", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    network = fields.CharField(blank=True, required=False)
    order = fields.IntegerField(blank=True, required=False)
    payor = fields.ObjectIdField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    policyHolder = fields.ObjectIdField(blank=True, required=False)
    relationship = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    subscriber = fields.ObjectIdField(blank=True, required=False)
    subscriberId = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        beneficiary = ObjectIdReferenceAttribute({'Patient'}, ("beneficiary", str), "beneficiary", pk_setter="beneficiary")
        contract = ObjectIdReferenceAttribute({'Contract'}, ("contract", str), "contract", pk_setter="contract")
        dependent = Attribute(getter="dependent", setter="dependent", searcher=StringSearch("dependent"))
        grouping = EmbeddedAttribute(type="CoverageGrouping", getter="grouping", setter="grouping", searcher=StringSearch("grouping"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        network = Attribute(getter="network", setter="network", searcher=StringSearch("network"))
        order = Attribute(getter="order", setter="order", searcher=NumericSearch("order"))
        payor = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Organization'}, ("payor", str), "payor", pk_setter="payor")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        policyHolder = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Organization'}, ("policyHolder", str), "policyHolder", pk_setter="policyHolder")
        relationship = EmbeddedAttribute(type="CodeableConcept", getter="relationship", setter="relationship", searcher=StringSearch("relationship"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=StringSearch("sequence"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subscriber = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson'}, ("subscriber", str), "subscriber", pk_setter="subscriber")
        subscriberId = Attribute(getter="subscriberId", setter="subscriberId", searcher=StringSearch("subscriberId"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class CoverageGrouping(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    classDisplay = fields.CharField(blank=True, required=False)
    class_ = fields.CharField(blank=True, required=False)
    group = fields.CharField(blank=True, required=False)
    groupDisplay = fields.CharField(blank=True, required=False)
    plan = fields.CharField(blank=True, required=False)
    planDisplay = fields.CharField(blank=True, required=False)
    subClass = fields.CharField(blank=True, required=False)
    subClassDisplay = fields.CharField(blank=True, required=False)
    subGroup = fields.CharField(blank=True, required=False)
    subGroupDisplay = fields.CharField(blank=True, required=False)
    subPlan = fields.CharField(blank=True, required=False)
    subPlanDisplay = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        classDisplay = Attribute(getter="classDisplay", setter="classDisplay", searcher=StringSearch("classDisplay"))
        class_ = Attribute(getter="class_", setter="class_", searcher=StringSearch("class_"))
        group = Attribute(getter="group", setter="group", searcher=StringSearch("group"))
        groupDisplay = Attribute(getter="groupDisplay", setter="groupDisplay", searcher=StringSearch("groupDisplay"))
        plan = Attribute(getter="plan", setter="plan", searcher=StringSearch("plan"))
        planDisplay = Attribute(getter="planDisplay", setter="planDisplay", searcher=StringSearch("planDisplay"))
        subClass = Attribute(getter="subClass", setter="subClass", searcher=StringSearch("subClass"))
        subClassDisplay = Attribute(getter="subClassDisplay", setter="subClassDisplay", searcher=StringSearch("subClassDisplay"))
        subGroup = Attribute(getter="subGroup", setter="subGroup", searcher=StringSearch("subGroup"))
        subGroupDisplay = Attribute(getter="subGroupDisplay", setter="subGroupDisplay", searcher=StringSearch("subGroupDisplay"))
        subPlan = Attribute(getter="subPlan", setter="subPlan", searcher=StringSearch("subPlan"))
        subPlanDisplay = Attribute(getter="subPlanDisplay", setter="subPlanDisplay", searcher=StringSearch("subPlanDisplay"))

class DataElement(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    element = fields.EmbeddedDocumentListField("ElementDefinition", blank=False, required=True)
    experimental = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    mapping = fields.EmbeddedDocumentListField("DataElementMapping", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    stringency = fields.CharField(blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        element = EmbeddedAttribute(type="ElementDefinition", getter="element", setter="element", searcher=StringSearch("element"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        mapping = EmbeddedAttribute(type="DataElementMapping", getter="mapping", setter="mapping", searcher=StringSearch("mapping"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        stringency = Attribute(getter="stringency", setter="stringency", searcher=StringSearch("stringency"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class DataElementMapping(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    identity = fields.CharField(blank=False, required=True)
    name = fields.CharField(blank=True, required=False)
    uri = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        identity = Attribute(getter="identity", setter="identity", searcher=StringSearch("identity"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        uri = Attribute(getter="uri", setter="uri", searcher=StringSearch("uri"))

class DataRequirement(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    codeFilter = fields.EmbeddedDocumentListField("DataRequirementCodeFilter", blank=True, required=False)
    dateFilter = fields.EmbeddedDocumentListField("DataRequirementDateFilter", blank=True, required=False)
    mustSupport = fields.ListField(fields.CharField(), blank=True, required=False)
    profile = fields.ListField(fields.CharField(), blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        codeFilter = EmbeddedAttribute(type="DataRequirementCodeFilter", getter="codeFilter", setter="codeFilter", searcher=StringSearch("codeFilter"))
        dateFilter = EmbeddedAttribute(type="DataRequirementDateFilter", getter="dateFilter", setter="dateFilter", searcher=StringSearch("dateFilter"))
        mustSupport = Attribute(getter="mustSupport", setter="mustSupport", searcher=StringSearch("mustSupport"))
        profile = Attribute(getter="profile", setter="profile", searcher=StringSearch("profile"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class DataRequirementCodeFilter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    path = fields.CharField(blank=False, required=True)
    valueCode = fields.ListField(fields.CharField(), blank=True, required=False)
    valueCodeableConcept = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    valueCoding = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    valueSetReference = fields.ObjectIdField(blank=True, required=False)
    valueSetString = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))
        valueCode = Attribute(getter="valueCode", setter="valueCode", searcher=StringSearch("valueCode"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueSetReference = ObjectIdReferenceAttribute({'ValueSet'}, ("valueSetReference", str), "valueSetReference", pk_setter="valueSetReference")
        valueSetString = Attribute(getter="valueSetString", setter="valueSetString", searcher=StringSearch("valueSetString"))

class DataRequirementDateFilter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    path = fields.CharField(blank=False, required=True)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valueDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    valuePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))
        valueDateTime = DateAttribute("valueDateTime")
        valueDuration = EmbeddedAttribute(type="Duration", getter="valueDuration", setter="valueDuration", searcher=StringSearch("valueDuration"))
        valuePeriod = EmbeddedAttribute(type="Period", getter="valuePeriod", setter="valuePeriod", searcher=StringSearch("valuePeriod"))

class DetectedIssue(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    author = fields.ObjectIdField(blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    detail = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    implicated = fields.ObjectIdField(blank=True, required=False)
    mitigation = fields.EmbeddedDocumentListField("DetectedIssueMitigation", blank=True, required=False)
    patient = fields.ObjectIdField(blank=True, required=False)
    reference = fields.CharField(blank=True, required=False)
    severity = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        author = ObjectIdReferenceAttribute({'Device', 'Practitioner'}, ("author", str), "author", pk_setter="author")
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        date = DateAttribute("date")
        detail = Attribute(getter="detail", setter="detail", searcher=StringSearch("detail"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        implicated = ObjectIdReferenceAttribute({'Resource'}, ("implicated", str), "implicated", pk_setter="implicated")
        mitigation = EmbeddedAttribute(type="DetectedIssueMitigation", getter="mitigation", setter="mitigation", searcher=StringSearch("mitigation"))
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        reference = Attribute(getter="reference", setter="reference", searcher=StringSearch("reference"))
        severity = Attribute(getter="severity", setter="severity", searcher=StringSearch("severity"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class DetectedIssueMitigation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    author = fields.ObjectIdField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="CodeableConcept", getter="action", setter="action", searcher=StringSearch("action"))
        author = ObjectIdReferenceAttribute({'Practitioner'}, ("author", str), "author", pk_setter="author")
        date = DateAttribute("date")

class Device(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    expirationDate = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    location = fields.ObjectIdField(blank=True, required=False)
    lotNumber = fields.CharField(blank=True, required=False)
    manufactureDate = fields.DateTimeField(blank=True, required=False)
    manufacturer = fields.CharField(blank=True, required=False)
    model = fields.CharField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    owner = fields.ObjectIdField(blank=True, required=False)
    patient = fields.ObjectIdField(blank=True, required=False)
    safety = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    udi = fields.EmbeddedDocumentField("DeviceUdi", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactPoint", getter="contact", setter="contact", searcher=StringSearch("contact"))
        expirationDate = DateAttribute("expirationDate")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        location = ObjectIdReferenceAttribute({'Location'}, ("location", str), "location", pk_setter="location")
        lotNumber = Attribute(getter="lotNumber", setter="lotNumber", searcher=StringSearch("lotNumber"))
        manufactureDate = DateAttribute("manufactureDate")
        manufacturer = Attribute(getter="manufacturer", setter="manufacturer", searcher=StringSearch("manufacturer"))
        model = Attribute(getter="model", setter="model", searcher=StringSearch("model"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        owner = ObjectIdReferenceAttribute({'Organization'}, ("owner", str), "owner", pk_setter="owner")
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        safety = EmbeddedAttribute(type="CodeableConcept", getter="safety", setter="safety", searcher=StringSearch("safety"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        udi = EmbeddedAttribute(type="DeviceUdi", getter="udi", setter="udi", searcher=StringSearch("udi"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class DeviceComponent(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=False, required=True)
    languageCode = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    lastSystemChange = fields.DateTimeField(blank=True, required=False)
    measurementPrinciple = fields.CharField(blank=True, required=False)
    operationalStatus = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    parameterGroup = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    parent = fields.ObjectIdField(blank=True, required=False)
    productionSpecification = fields.EmbeddedDocumentListField("DeviceComponentProductionSpecification", blank=True, required=False)
    source = fields.ObjectIdField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        languageCode = EmbeddedAttribute(type="CodeableConcept", getter="languageCode", setter="languageCode", searcher=StringSearch("languageCode"))
        lastSystemChange = DateAttribute("lastSystemChange")
        measurementPrinciple = Attribute(getter="measurementPrinciple", setter="measurementPrinciple", searcher=StringSearch("measurementPrinciple"))
        operationalStatus = EmbeddedAttribute(type="CodeableConcept", getter="operationalStatus", setter="operationalStatus", searcher=StringSearch("operationalStatus"))
        parameterGroup = EmbeddedAttribute(type="CodeableConcept", getter="parameterGroup", setter="parameterGroup", searcher=StringSearch("parameterGroup"))
        parent = ObjectIdReferenceAttribute({'DeviceComponent'}, ("parent", str), "parent", pk_setter="parent")
        productionSpecification = EmbeddedAttribute(type="DeviceComponentProductionSpecification", getter="productionSpecification", setter="productionSpecification", searcher=StringSearch("productionSpecification"))
        source = ObjectIdReferenceAttribute({'Device'}, ("source", str), "source", pk_setter="source")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class DeviceComponentProductionSpecification(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    componentId = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    productionSpec = fields.CharField(blank=True, required=False)
    specType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        componentId = EmbeddedAttribute(type="Identifier", getter="componentId", setter="componentId", searcher=StringSearch("componentId"))
        productionSpec = Attribute(getter="productionSpec", setter="productionSpec", searcher=StringSearch("productionSpec"))
        specType = EmbeddedAttribute(type="CodeableConcept", getter="specType", setter="specType", searcher=StringSearch("specType"))

class DeviceMetric(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    calibration = fields.EmbeddedDocumentListField("DeviceMetricCalibration", blank=True, required=False)
    category = fields.CharField(blank=False, required=True)
    color = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=False, required=True)
    measurementPeriod = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    operationalStatus = fields.CharField(blank=True, required=False)
    parent = fields.ObjectIdField(blank=True, required=False)
    source = fields.ObjectIdField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    unit = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        calibration = EmbeddedAttribute(type="DeviceMetricCalibration", getter="calibration", setter="calibration", searcher=StringSearch("calibration"))
        category = Attribute(getter="category", setter="category", searcher=StringSearch("category"))
        color = Attribute(getter="color", setter="color", searcher=StringSearch("color"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        measurementPeriod = EmbeddedAttribute(type="Timing", getter="measurementPeriod", setter="measurementPeriod", searcher=StringSearch("measurementPeriod"))
        operationalStatus = Attribute(getter="operationalStatus", setter="operationalStatus", searcher=StringSearch("operationalStatus"))
        parent = ObjectIdReferenceAttribute({'DeviceComponent'}, ("parent", str), "parent", pk_setter="parent")
        source = ObjectIdReferenceAttribute({'Device'}, ("source", str), "source", pk_setter="source")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        unit = EmbeddedAttribute(type="CodeableConcept", getter="unit", setter="unit", searcher=StringSearch("unit"))

class DeviceMetricCalibration(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    state = fields.CharField(blank=True, required=False)
    time = fields.DateTimeField(blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        state = Attribute(getter="state", setter="state", searcher=StringSearch("state"))
        time = DateAttribute("time")
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class DeviceRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    codeCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    codeReference = fields.ObjectIdField(blank=False, required=True)
    context = fields.ObjectIdField(blank=True, required=False)
    definition = fields.ObjectIdField(blank=True, required=False)
    groupIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    intent = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    occurrenceTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    performer = fields.ObjectIdField(blank=True, required=False)
    performerType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    priorRequest = fields.ObjectIdField(blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    relevantHistory = fields.ObjectIdField(blank=True, required=False)
    requester = fields.EmbeddedDocumentField("DeviceRequestRequester", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    subject = fields.ObjectIdField(blank=False, required=True)
    supportingInfo = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authoredOn = DateAttribute("authoredOn")
        basedOn = ObjectIdReferenceAttribute({'Resource'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        codeCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="codeCodeableConcept", setter="codeCodeableConcept", searcher=StringSearch("codeCodeableConcept"))
        codeReference = ObjectIdReferenceAttribute({'Device'}, ("codeReference", str), "codeReference", pk_setter="codeReference")
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        definition = ObjectIdReferenceAttribute({'PlanDefinition', 'ActivityDefinition'}, ("definition", str), "definition", pk_setter="definition")
        groupIdentifier = EmbeddedAttribute(type="Identifier", getter="groupIdentifier", setter="groupIdentifier", searcher=StringSearch("groupIdentifier"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        intent = EmbeddedAttribute(type="CodeableConcept", getter="intent", setter="intent", searcher=StringSearch("intent"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        occurrenceTiming = EmbeddedAttribute(type="Timing", getter="occurrenceTiming", setter="occurrenceTiming", searcher=StringSearch("occurrenceTiming"))
        performer = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'HealthcareService', 'Device'}, ("performer", str), "performer", pk_setter="performer")
        performerType = EmbeddedAttribute(type="CodeableConcept", getter="performerType", setter="performerType", searcher=StringSearch("performerType"))
        priorRequest = ObjectIdReferenceAttribute({'Resource'}, ("priorRequest", str), "priorRequest", pk_setter="priorRequest")
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = ObjectIdReferenceAttribute({'Resource'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        relevantHistory = ObjectIdReferenceAttribute({'Provenance'}, ("relevantHistory", str), "relevantHistory", pk_setter="relevantHistory")
        requester = EmbeddedAttribute(type="DeviceRequestRequester", getter="requester", setter="requester", searcher=StringSearch("requester"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Device', 'Patient', 'Group', 'Location'}, ("subject", str), "subject", pk_setter="subject")
        supportingInfo = ObjectIdReferenceAttribute({'Resource'}, ("supportingInfo", str), "supportingInfo", pk_setter="supportingInfo")

class DeviceRequestRequester(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    agent = fields.ObjectIdField(blank=False, required=True)
    onBehalfOf = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        agent = ObjectIdReferenceAttribute({'Device', 'Practitioner', 'Organization'}, ("agent", str), "agent", pk_setter="agent")
        onBehalfOf = ObjectIdReferenceAttribute({'Organization'}, ("onBehalfOf", str), "onBehalfOf", pk_setter="onBehalfOf")

class DeviceUdi(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    carrierAIDC = fields.CharField(blank=True, required=False)
    carrierHRF = fields.CharField(blank=True, required=False)
    deviceIdentifier = fields.CharField(blank=True, required=False)
    entryType = fields.CharField(blank=True, required=False)
    issuer = fields.CharField(blank=True, required=False)
    jurisdiction = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        carrierAIDC = Attribute(getter="carrierAIDC", setter="carrierAIDC", searcher=StringSearch("carrierAIDC"))
        carrierHRF = Attribute(getter="carrierHRF", setter="carrierHRF", searcher=StringSearch("carrierHRF"))
        deviceIdentifier = Attribute(getter="deviceIdentifier", setter="deviceIdentifier", searcher=StringSearch("deviceIdentifier"))
        entryType = Attribute(getter="entryType", setter="entryType", searcher=StringSearch("entryType"))
        issuer = Attribute(getter="issuer", setter="issuer", searcher=StringSearch("issuer"))
        jurisdiction = Attribute(getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))

class DeviceUseStatement(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    device = fields.ObjectIdField(blank=False, required=True)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    indication = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    recordedOn = fields.DateTimeField(blank=True, required=False)
    source = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=False, required=True)
    timingDateTime = fields.DateTimeField(blank=True, required=False)
    timingPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    timingTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    whenUsed = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        device = ObjectIdReferenceAttribute({'Device'}, ("device", str), "device", pk_setter="device")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        indication = EmbeddedAttribute(type="CodeableConcept", getter="indication", setter="indication", searcher=StringSearch("indication"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        recordedOn = DateAttribute("recordedOn")
        source = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Practitioner'}, ("source", str), "source", pk_setter="source")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")
        timingDateTime = DateAttribute("timingDateTime")
        timingPeriod = EmbeddedAttribute(type="Period", getter="timingPeriod", setter="timingPeriod", searcher=StringSearch("timingPeriod"))
        timingTiming = EmbeddedAttribute(type="Timing", getter="timingTiming", setter="timingTiming", searcher=StringSearch("timingTiming"))
        whenUsed = EmbeddedAttribute(type="Period", getter="whenUsed", setter="whenUsed", searcher=StringSearch("whenUsed"))

class DiagnosticReport(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    codedDiagnosis = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    conclusion = fields.CharField(blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    effectiveDateTime = fields.DateTimeField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    image = fields.EmbeddedDocumentListField("DiagnosticReportImage", blank=True, required=False)
    imagingStudy = fields.ObjectIdField(blank=True, required=False)
    issued = fields.DateTimeField(blank=True, required=False)
    performer = fields.EmbeddedDocumentListField("DiagnosticReportPerformer", blank=True, required=False)
    presentedForm = fields.EmbeddedDocumentListField("Attachment", blank=True, required=False)
    result = fields.ObjectIdField(blank=True, required=False)
    specimen = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        basedOn = ObjectIdReferenceAttribute({'MedicationRequest', 'ProcedureRequest', 'ReferralRequest', 'NutritionOrder', 'ImmunizationRecommendation', 'CarePlan'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        codedDiagnosis = EmbeddedAttribute(type="CodeableConcept", getter="codedDiagnosis", setter="codedDiagnosis", searcher=StringSearch("codedDiagnosis"))
        conclusion = Attribute(getter="conclusion", setter="conclusion", searcher=StringSearch("conclusion"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        effectiveDateTime = DateAttribute("effectiveDateTime")
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        image = EmbeddedAttribute(type="DiagnosticReportImage", getter="image", setter="image", searcher=StringSearch("image"))
        imagingStudy = ObjectIdReferenceAttribute({'ImagingStudy', 'ImagingManifest'}, ("imagingStudy", str), "imagingStudy", pk_setter="imagingStudy")
        issued = DateAttribute("issued")
        performer = EmbeddedAttribute(type="DiagnosticReportPerformer", getter="performer", setter="performer", searcher=StringSearch("performer"))
        presentedForm = EmbeddedAttribute(type="Attachment", getter="presentedForm", setter="presentedForm", searcher=StringSearch("presentedForm"))
        result = ObjectIdReferenceAttribute({'hdlcholesterol', 'Observation', 'cholesterol', 'triglyceride', 'ldlcholesterol'}, ("result", str), "result", pk_setter="result")
        specimen = ObjectIdReferenceAttribute({'Specimen'}, ("specimen", str), "specimen", pk_setter="specimen")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group', 'Device', 'Location'}, ("subject", str), "subject", pk_setter="subject")

class DiagnosticReportImage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    link = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        link = ObjectIdReferenceAttribute({'Media'}, ("link", str), "link", pk_setter="link")

class DiagnosticReportPerformer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.ObjectIdField(blank=False, required=True)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = ObjectIdReferenceAttribute({'Practitioner', 'Organization'}, ("actor", str), "actor", pk_setter="actor")
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class Distance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    comparator = fields.CharField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    unit = fields.CharField(blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comparator = Attribute(getter="comparator", setter="comparator", searcher=StringSearch("comparator"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        unit = Attribute(getter="unit", setter="unit", searcher=StringSearch("unit"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class DocumentManifest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    author = fields.ObjectIdField(blank=True, required=False)
    content = fields.EmbeddedDocumentListField("DocumentManifestContent", blank=False, required=True)
    created = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    masterIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    recipient = fields.ObjectIdField(blank=True, required=False)
    related = fields.EmbeddedDocumentListField("DocumentManifestRelated", blank=True, required=False)
    source = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        author = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("author", str), "author", pk_setter="author")
        content = EmbeddedAttribute(type="DocumentManifestContent", getter="content", setter="content", searcher=StringSearch("content"))
        created = DateAttribute("created")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        masterIdentifier = EmbeddedAttribute(type="Identifier", getter="masterIdentifier", setter="masterIdentifier", searcher=StringSearch("masterIdentifier"))
        recipient = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Practitioner', 'Organization'}, ("recipient", str), "recipient", pk_setter="recipient")
        related = EmbeddedAttribute(type="DocumentManifestRelated", getter="related", setter="related", searcher=StringSearch("related"))
        source = Attribute(getter="source", setter="source", searcher=StringSearch("source"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group', 'Device', 'Practitioner'}, ("subject", str), "subject", pk_setter="subject")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class DocumentManifestContent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    pAttachment = fields.EmbeddedDocumentField("Attachment", blank=False, required=True)
    pReference = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        pAttachment = EmbeddedAttribute(type="Attachment", getter="pAttachment", setter="pAttachment", searcher=StringSearch("pAttachment"))
        pReference = ObjectIdReferenceAttribute({'Resource'}, ("pReference", str), "pReference", pk_setter="pReference")

class DocumentManifestRelated(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    ref = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        ref = ObjectIdReferenceAttribute({'Resource'}, ("ref", str), "ref", pk_setter="ref")

class DocumentReference(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authenticator = fields.ObjectIdField(blank=True, required=False)
    author = fields.ObjectIdField(blank=True, required=False)
    class_ = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    content = fields.EmbeddedDocumentListField("DocumentReferenceContent", blank=False, required=True)
    context = fields.EmbeddedDocumentField("DocumentReferenceContext", blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    custodian = fields.ObjectIdField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    docStatus = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    indexed = fields.DateTimeField(blank=False, required=True)
    masterIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    relatesTo = fields.EmbeddedDocumentListField("DocumentReferenceRelatesTo", blank=True, required=False)
    securityLabel = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authenticator = ObjectIdReferenceAttribute({'Practitioner', 'Organization'}, ("authenticator", str), "authenticator", pk_setter="authenticator")
        author = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("author", str), "author", pk_setter="author")
        class_ = EmbeddedAttribute(type="CodeableConcept", getter="class_", setter="class_", searcher=StringSearch("class_"))
        content = EmbeddedAttribute(type="DocumentReferenceContent", getter="content", setter="content", searcher=StringSearch("content"))
        context = EmbeddedAttribute(type="DocumentReferenceContext", getter="context", setter="context", searcher=StringSearch("context"))
        created = DateAttribute("created")
        custodian = ObjectIdReferenceAttribute({'Organization'}, ("custodian", str), "custodian", pk_setter="custodian")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        docStatus = Attribute(getter="docStatus", setter="docStatus", searcher=StringSearch("docStatus"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        indexed = DateAttribute("indexed")
        masterIdentifier = EmbeddedAttribute(type="Identifier", getter="masterIdentifier", setter="masterIdentifier", searcher=StringSearch("masterIdentifier"))
        relatesTo = EmbeddedAttribute(type="DocumentReferenceRelatesTo", getter="relatesTo", setter="relatesTo", searcher=StringSearch("relatesTo"))
        securityLabel = EmbeddedAttribute(type="CodeableConcept", getter="securityLabel", setter="securityLabel", searcher=StringSearch("securityLabel"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group', 'Device', 'Practitioner'}, ("subject", str), "subject", pk_setter="subject")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class DocumentReferenceContent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    attachment = fields.EmbeddedDocumentField("Attachment", blank=False, required=True)
    format = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        attachment = EmbeddedAttribute(type="Attachment", getter="attachment", setter="attachment", searcher=StringSearch("attachment"))
        format = EmbeddedAttribute(type="Coding", getter="format", setter="format", searcher=StringSearch("format"))

class DocumentReferenceContext(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    encounter = fields.ObjectIdField(blank=True, required=False)
    event = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    facilityType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    practiceSetting = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    related = fields.EmbeddedDocumentListField("DocumentReferenceContextRelated", blank=True, required=False)
    sourcePatientInfo = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        encounter = ObjectIdReferenceAttribute({'Encounter'}, ("encounter", str), "encounter", pk_setter="encounter")
        event = EmbeddedAttribute(type="CodeableConcept", getter="event", setter="event", searcher=StringSearch("event"))
        facilityType = EmbeddedAttribute(type="CodeableConcept", getter="facilityType", setter="facilityType", searcher=StringSearch("facilityType"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        practiceSetting = EmbeddedAttribute(type="CodeableConcept", getter="practiceSetting", setter="practiceSetting", searcher=StringSearch("practiceSetting"))
        related = EmbeddedAttribute(type="DocumentReferenceContextRelated", getter="related", setter="related", searcher=StringSearch("related"))
        sourcePatientInfo = ObjectIdReferenceAttribute({'Patient'}, ("sourcePatientInfo", str), "sourcePatientInfo", pk_setter="sourcePatientInfo")

class DocumentReferenceContextRelated(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    ref = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        ref = ObjectIdReferenceAttribute({'Resource'}, ("ref", str), "ref", pk_setter="ref")

class DocumentReferenceRelatesTo(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    target = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        target = ObjectIdReferenceAttribute({'DocumentReference'}, ("target", str), "target", pk_setter="target")

class DomainResource(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))

class Dosage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    additionalInstruction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    asNeededBoolean = fields.BooleanField(blank=True, required=False)
    asNeededCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    doseQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    doseRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    maxDosePerAdministration = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    maxDosePerLifetime = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    maxDosePerPeriod = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    method = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    patientInstruction = fields.CharField(blank=True, required=False)
    rateQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    rateRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    rateRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    route = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=True, required=False)
    site = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    timing = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        additionalInstruction = EmbeddedAttribute(type="CodeableConcept", getter="additionalInstruction", setter="additionalInstruction", searcher=StringSearch("additionalInstruction"))
        asNeededBoolean = Attribute(getter="asNeededBoolean", setter="asNeededBoolean", searcher=StringSearch("asNeededBoolean"))
        asNeededCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="asNeededCodeableConcept", setter="asNeededCodeableConcept", searcher=StringSearch("asNeededCodeableConcept"))
        doseQuantity = EmbeddedAttribute(type="Quantity", getter="doseQuantity", setter="doseQuantity", searcher=StringSearch("doseQuantity"))
        doseRange = EmbeddedAttribute(type="Range", getter="doseRange", setter="doseRange", searcher=StringSearch("doseRange"))
        maxDosePerAdministration = EmbeddedAttribute(type="Quantity", getter="maxDosePerAdministration", setter="maxDosePerAdministration", searcher=StringSearch("maxDosePerAdministration"))
        maxDosePerLifetime = EmbeddedAttribute(type="Quantity", getter="maxDosePerLifetime", setter="maxDosePerLifetime", searcher=StringSearch("maxDosePerLifetime"))
        maxDosePerPeriod = EmbeddedAttribute(type="Ratio", getter="maxDosePerPeriod", setter="maxDosePerPeriod", searcher=StringSearch("maxDosePerPeriod"))
        method = EmbeddedAttribute(type="CodeableConcept", getter="method", setter="method", searcher=StringSearch("method"))
        patientInstruction = Attribute(getter="patientInstruction", setter="patientInstruction", searcher=StringSearch("patientInstruction"))
        rateQuantity = EmbeddedAttribute(type="Quantity", getter="rateQuantity", setter="rateQuantity", searcher=StringSearch("rateQuantity"))
        rateRange = EmbeddedAttribute(type="Range", getter="rateRange", setter="rateRange", searcher=StringSearch("rateRange"))
        rateRatio = EmbeddedAttribute(type="Ratio", getter="rateRatio", setter="rateRatio", searcher=StringSearch("rateRatio"))
        route = EmbeddedAttribute(type="CodeableConcept", getter="route", setter="route", searcher=StringSearch("route"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        site = EmbeddedAttribute(type="CodeableConcept", getter="site", setter="site", searcher=StringSearch("site"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        timing = EmbeddedAttribute(type="Timing", getter="timing", setter="timing", searcher=StringSearch("timing"))

class Duration(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    comparator = fields.CharField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    unit = fields.CharField(blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comparator = Attribute(getter="comparator", setter="comparator", searcher=StringSearch("comparator"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        unit = Attribute(getter="unit", setter="unit", searcher=StringSearch("unit"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class Element(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))

class ElementDefinition(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    alias = fields.ListField(fields.CharField(), blank=True, required=False)
    base = fields.EmbeddedDocumentField("ElementDefinitionBase", blank=True, required=False)
    binding = fields.EmbeddedDocumentField("ElementDefinitionBinding", blank=True, required=False)
    code = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    condition = fields.ListField(fields.CharField(), blank=True, required=False)
    constraint = fields.EmbeddedDocumentListField("ElementDefinitionConstraint", blank=True, required=False)
    contentReference = fields.CharField(blank=True, required=False)
    defaultValueAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    defaultValueAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    defaultValueAnnotation = fields.EmbeddedDocumentField("Annotation", blank=True, required=False)
    defaultValueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    defaultValueBase64Binary = fields.CharField(blank=True, required=False)
    defaultValueBoolean = fields.BooleanField(blank=True, required=False)
    defaultValueCode = fields.CharField(blank=True, required=False)
    defaultValueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    defaultValueCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    defaultValueContactPoint = fields.EmbeddedDocumentField("ContactPoint", blank=True, required=False)
    defaultValueCount = fields.EmbeddedDocumentField("Count", blank=True, required=False)
    defaultValueDate = fields.DateTimeField(blank=True, required=False)
    defaultValueDateTime = fields.DateTimeField(blank=True, required=False)
    defaultValueDecimal = fields.FloatField(blank=True, required=False)
    defaultValueDistance = fields.EmbeddedDocumentField("Distance", blank=True, required=False)
    defaultValueDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    defaultValueHumanName = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    defaultValueId = fields.CharField(blank=True, required=False)
    defaultValueIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    defaultValueInstant = fields.DateTimeField(blank=True, required=False)
    defaultValueInteger = fields.IntegerField(blank=True, required=False)
    defaultValueMarkdown = fields.CharField(blank=True, required=False)
    defaultValueMeta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    defaultValueMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    defaultValueOid = fields.CharField(blank=True, required=False)
    defaultValuePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    defaultValuePositiveInt = fields.IntegerField(blank=True, required=False)
    defaultValueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    defaultValueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    defaultValueRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    # defaultValueReference = fields.ReferenceField(, blank=True, required=False)
    defaultValueSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    defaultValueSignature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    defaultValueString = fields.CharField(blank=True, required=False)
    defaultValueTime = fields.DateTimeField(blank=True, required=False)
    defaultValueTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    defaultValueUnsignedInt = fields.IntegerField(blank=True, required=False)
    defaultValueUri = fields.CharField(blank=True, required=False)
    definition = fields.CharField(blank=True, required=False)
    example = fields.EmbeddedDocumentListField("ElementDefinitionExample", blank=True, required=False)
    fixedAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    fixedAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    fixedAnnotation = fields.EmbeddedDocumentField("Annotation", blank=True, required=False)
    fixedAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    fixedBase64Binary = fields.CharField(blank=True, required=False)
    fixedBoolean = fields.BooleanField(blank=True, required=False)
    fixedCode = fields.CharField(blank=True, required=False)
    fixedCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    fixedCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    fixedContactPoint = fields.EmbeddedDocumentField("ContactPoint", blank=True, required=False)
    fixedCount = fields.EmbeddedDocumentField("Count", blank=True, required=False)
    fixedDate = fields.DateTimeField(blank=True, required=False)
    fixedDateTime = fields.DateTimeField(blank=True, required=False)
    fixedDecimal = fields.FloatField(blank=True, required=False)
    fixedDistance = fields.EmbeddedDocumentField("Distance", blank=True, required=False)
    fixedDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    fixedHumanName = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    fixedId = fields.CharField(blank=True, required=False)
    fixedIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    fixedInstant = fields.DateTimeField(blank=True, required=False)
    fixedInteger = fields.IntegerField(blank=True, required=False)
    fixedMarkdown = fields.CharField(blank=True, required=False)
    fixedMeta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    fixedMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    fixedOid = fields.CharField(blank=True, required=False)
    fixedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    fixedPositiveInt = fields.IntegerField(blank=True, required=False)
    fixedQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    fixedRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    fixedRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    # fixedReference = fields.ReferenceField(, blank=True, required=False)
    fixedSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    fixedSignature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    fixedString = fields.CharField(blank=True, required=False)
    fixedTime = fields.DateTimeField(blank=True, required=False)
    fixedTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    fixedUnsignedInt = fields.IntegerField(blank=True, required=False)
    fixedUri = fields.CharField(blank=True, required=False)
    isModifier = fields.BooleanField(blank=True, required=False)
    isSummary = fields.BooleanField(blank=True, required=False)
    label = fields.CharField(blank=True, required=False)
    mapping = fields.EmbeddedDocumentListField("ElementDefinitionMapping", blank=True, required=False)
    max = fields.CharField(blank=True, required=False)
    maxLength = fields.IntegerField(blank=True, required=False)
    maxValueDate = fields.DateTimeField(blank=True, required=False)
    maxValueDateTime = fields.DateTimeField(blank=True, required=False)
    maxValueDecimal = fields.FloatField(blank=True, required=False)
    maxValueInstant = fields.DateTimeField(blank=True, required=False)
    maxValueInteger = fields.IntegerField(blank=True, required=False)
    maxValuePositiveInt = fields.IntegerField(blank=True, required=False)
    maxValueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    maxValueTime = fields.DateTimeField(blank=True, required=False)
    maxValueUnsignedInt = fields.IntegerField(blank=True, required=False)
    meaningWhenMissing = fields.CharField(blank=True, required=False)
    min = fields.IntegerField(blank=True, required=False)
    minValueDate = fields.DateTimeField(blank=True, required=False)
    minValueDateTime = fields.DateTimeField(blank=True, required=False)
    minValueDecimal = fields.FloatField(blank=True, required=False)
    minValueInstant = fields.DateTimeField(blank=True, required=False)
    minValueInteger = fields.IntegerField(blank=True, required=False)
    minValuePositiveInt = fields.IntegerField(blank=True, required=False)
    minValueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    minValueTime = fields.DateTimeField(blank=True, required=False)
    minValueUnsignedInt = fields.IntegerField(blank=True, required=False)
    mustSupport = fields.BooleanField(blank=True, required=False)
    orderMeaning = fields.CharField(blank=True, required=False)
    path = fields.CharField(blank=False, required=True)
    patternAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    patternAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    patternAnnotation = fields.EmbeddedDocumentField("Annotation", blank=True, required=False)
    patternAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    patternBase64Binary = fields.CharField(blank=True, required=False)
    patternBoolean = fields.BooleanField(blank=True, required=False)
    patternCode = fields.CharField(blank=True, required=False)
    patternCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    patternCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    patternContactPoint = fields.EmbeddedDocumentField("ContactPoint", blank=True, required=False)
    patternCount = fields.EmbeddedDocumentField("Count", blank=True, required=False)
    patternDate = fields.DateTimeField(blank=True, required=False)
    patternDateTime = fields.DateTimeField(blank=True, required=False)
    patternDecimal = fields.FloatField(blank=True, required=False)
    patternDistance = fields.EmbeddedDocumentField("Distance", blank=True, required=False)
    patternDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    patternHumanName = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    patternId = fields.CharField(blank=True, required=False)
    patternIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    patternInstant = fields.DateTimeField(blank=True, required=False)
    patternInteger = fields.IntegerField(blank=True, required=False)
    patternMarkdown = fields.CharField(blank=True, required=False)
    patternMeta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    patternMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    patternOid = fields.CharField(blank=True, required=False)
    patternPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    patternPositiveInt = fields.IntegerField(blank=True, required=False)
    patternQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    patternRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    patternRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    # patternReference = fields.ReferenceField(, blank=True, required=False)
    patternSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    patternSignature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    patternString = fields.CharField(blank=True, required=False)
    patternTime = fields.DateTimeField(blank=True, required=False)
    patternTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    patternUnsignedInt = fields.IntegerField(blank=True, required=False)
    patternUri = fields.CharField(blank=True, required=False)
    representation = fields.ListField(fields.CharField(), blank=True, required=False)
    requirements = fields.CharField(blank=True, required=False)
    short = fields.CharField(blank=True, required=False)
    sliceName = fields.CharField(blank=True, required=False)
    slicing = fields.EmbeddedDocumentField("ElementDefinitionSlicing", blank=True, required=False)
    type = fields.EmbeddedDocumentListField("ElementDefinitionType", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        alias = Attribute(getter="alias", setter="alias", searcher=StringSearch("alias"))
        base = EmbeddedAttribute(type="ElementDefinitionBase", getter="base", setter="base", searcher=StringSearch("base"))
        binding = EmbeddedAttribute(type="ElementDefinitionBinding", getter="binding", setter="binding", searcher=StringSearch("binding"))
        code = EmbeddedAttribute(type="Coding", getter="code", setter="code", searcher=StringSearch("code"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        condition = Attribute(getter="condition", setter="condition", searcher=StringSearch("condition"))
        constraint = EmbeddedAttribute(type="ElementDefinitionConstraint", getter="constraint", setter="constraint", searcher=StringSearch("constraint"))
        contentReference = Attribute(getter="contentReference", setter="contentReference", searcher=StringSearch("contentReference"))
        defaultValueAddress = EmbeddedAttribute(type="Address", getter="defaultValueAddress", setter="defaultValueAddress", searcher=StringSearch("defaultValueAddress"))
        defaultValueAge = EmbeddedAttribute(type="Age", getter="defaultValueAge", setter="defaultValueAge", searcher=StringSearch("defaultValueAge"))
        defaultValueAnnotation = EmbeddedAttribute(type="Annotation", getter="defaultValueAnnotation", setter="defaultValueAnnotation", searcher=StringSearch("defaultValueAnnotation"))
        defaultValueAttachment = EmbeddedAttribute(type="Attachment", getter="defaultValueAttachment", setter="defaultValueAttachment", searcher=StringSearch("defaultValueAttachment"))
        defaultValueBase64Binary = Attribute(getter="defaultValueBase64Binary", setter="defaultValueBase64Binary", searcher=StringSearch("defaultValueBase64Binary"))
        defaultValueBoolean = Attribute(getter="defaultValueBoolean", setter="defaultValueBoolean", searcher=StringSearch("defaultValueBoolean"))
        defaultValueCode = Attribute(getter="defaultValueCode", setter="defaultValueCode", searcher=StringSearch("defaultValueCode"))
        defaultValueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="defaultValueCodeableConcept", setter="defaultValueCodeableConcept", searcher=StringSearch("defaultValueCodeableConcept"))
        defaultValueCoding = EmbeddedAttribute(type="Coding", getter="defaultValueCoding", setter="defaultValueCoding", searcher=StringSearch("defaultValueCoding"))
        defaultValueContactPoint = EmbeddedAttribute(type="ContactPoint", getter="defaultValueContactPoint", setter="defaultValueContactPoint", searcher=StringSearch("defaultValueContactPoint"))
        defaultValueCount = EmbeddedAttribute(type="Count", getter="defaultValueCount", setter="defaultValueCount", searcher=StringSearch("defaultValueCount"))
        defaultValueDate = DateAttribute("defaultValueDate")
        defaultValueDateTime = DateAttribute("defaultValueDateTime")
        defaultValueDecimal = Attribute(getter="defaultValueDecimal", setter="defaultValueDecimal", searcher=NumericSearch("defaultValueDecimal"))
        defaultValueDistance = EmbeddedAttribute(type="Distance", getter="defaultValueDistance", setter="defaultValueDistance", searcher=StringSearch("defaultValueDistance"))
        defaultValueDuration = EmbeddedAttribute(type="Duration", getter="defaultValueDuration", setter="defaultValueDuration", searcher=StringSearch("defaultValueDuration"))
        defaultValueHumanName = EmbeddedAttribute(type="HumanName", getter="defaultValueHumanName", setter="defaultValueHumanName", searcher=StringSearch("defaultValueHumanName"))
        defaultValueId = Attribute(getter="defaultValueId", setter="defaultValueId", searcher=StringSearch("defaultValueId"))
        defaultValueIdentifier = EmbeddedAttribute(type="Identifier", getter="defaultValueIdentifier", setter="defaultValueIdentifier", searcher=StringSearch("defaultValueIdentifier"))
        defaultValueInstant = DateAttribute("defaultValueInstant")
        defaultValueInteger = Attribute(getter="defaultValueInteger", setter="defaultValueInteger", searcher=NumericSearch("defaultValueInteger"))
        defaultValueMarkdown = Attribute(getter="defaultValueMarkdown", setter="defaultValueMarkdown", searcher=StringSearch("defaultValueMarkdown"))
        defaultValueMeta = EmbeddedAttribute(type="Meta", getter="defaultValueMeta", setter="defaultValueMeta", searcher=StringSearch("defaultValueMeta"))
        defaultValueMoney = EmbeddedAttribute(type="Money", getter="defaultValueMoney", setter="defaultValueMoney", searcher=StringSearch("defaultValueMoney"))
        defaultValueOid = Attribute(getter="defaultValueOid", setter="defaultValueOid", searcher=StringSearch("defaultValueOid"))
        defaultValuePeriod = EmbeddedAttribute(type="Period", getter="defaultValuePeriod", setter="defaultValuePeriod", searcher=StringSearch("defaultValuePeriod"))
        defaultValuePositiveInt = Attribute(getter="defaultValuePositiveInt", setter="defaultValuePositiveInt", searcher=NumericSearch("defaultValuePositiveInt"))
        defaultValueQuantity = EmbeddedAttribute(type="Quantity", getter="defaultValueQuantity", setter="defaultValueQuantity", searcher=StringSearch("defaultValueQuantity"))
        defaultValueRange = EmbeddedAttribute(type="Range", getter="defaultValueRange", setter="defaultValueRange", searcher=StringSearch("defaultValueRange"))
        defaultValueRatio = EmbeddedAttribute(type="Ratio", getter="defaultValueRatio", setter="defaultValueRatio", searcher=StringSearch("defaultValueRatio"))
        # defaultValueReference = ObjectIdReferenceAttribute(getter="defaultValueReference", setter="defaultValueReference", searcher=StringSearch("defaultValueReference"))
        defaultValueSampledData = EmbeddedAttribute(type="SampledData", getter="defaultValueSampledData", setter="defaultValueSampledData", searcher=StringSearch("defaultValueSampledData"))
        defaultValueSignature = EmbeddedAttribute(type="Signature", getter="defaultValueSignature", setter="defaultValueSignature", searcher=StringSearch("defaultValueSignature"))
        defaultValueString = Attribute(getter="defaultValueString", setter="defaultValueString", searcher=StringSearch("defaultValueString"))
        defaultValueTime = DateAttribute("defaultValueTime")
        defaultValueTiming = EmbeddedAttribute(type="Timing", getter="defaultValueTiming", setter="defaultValueTiming", searcher=StringSearch("defaultValueTiming"))
        defaultValueUnsignedInt = Attribute(getter="defaultValueUnsignedInt", setter="defaultValueUnsignedInt", searcher=NumericSearch("defaultValueUnsignedInt"))
        defaultValueUri = Attribute(getter="defaultValueUri", setter="defaultValueUri", searcher=StringSearch("defaultValueUri"))
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        example = EmbeddedAttribute(type="ElementDefinitionExample", getter="example", setter="example", searcher=StringSearch("example"))
        fixedAddress = EmbeddedAttribute(type="Address", getter="fixedAddress", setter="fixedAddress", searcher=StringSearch("fixedAddress"))
        fixedAge = EmbeddedAttribute(type="Age", getter="fixedAge", setter="fixedAge", searcher=StringSearch("fixedAge"))
        fixedAnnotation = EmbeddedAttribute(type="Annotation", getter="fixedAnnotation", setter="fixedAnnotation", searcher=StringSearch("fixedAnnotation"))
        fixedAttachment = EmbeddedAttribute(type="Attachment", getter="fixedAttachment", setter="fixedAttachment", searcher=StringSearch("fixedAttachment"))
        fixedBase64Binary = Attribute(getter="fixedBase64Binary", setter="fixedBase64Binary", searcher=StringSearch("fixedBase64Binary"))
        fixedBoolean = Attribute(getter="fixedBoolean", setter="fixedBoolean", searcher=StringSearch("fixedBoolean"))
        fixedCode = Attribute(getter="fixedCode", setter="fixedCode", searcher=StringSearch("fixedCode"))
        fixedCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="fixedCodeableConcept", setter="fixedCodeableConcept", searcher=StringSearch("fixedCodeableConcept"))
        fixedCoding = EmbeddedAttribute(type="Coding", getter="fixedCoding", setter="fixedCoding", searcher=StringSearch("fixedCoding"))
        fixedContactPoint = EmbeddedAttribute(type="ContactPoint", getter="fixedContactPoint", setter="fixedContactPoint", searcher=StringSearch("fixedContactPoint"))
        fixedCount = EmbeddedAttribute(type="Count", getter="fixedCount", setter="fixedCount", searcher=StringSearch("fixedCount"))
        fixedDate = DateAttribute("fixedDate")
        fixedDateTime = DateAttribute("fixedDateTime")
        fixedDecimal = Attribute(getter="fixedDecimal", setter="fixedDecimal", searcher=NumericSearch("fixedDecimal"))
        fixedDistance = EmbeddedAttribute(type="Distance", getter="fixedDistance", setter="fixedDistance", searcher=StringSearch("fixedDistance"))
        fixedDuration = EmbeddedAttribute(type="Duration", getter="fixedDuration", setter="fixedDuration", searcher=StringSearch("fixedDuration"))
        fixedHumanName = EmbeddedAttribute(type="HumanName", getter="fixedHumanName", setter="fixedHumanName", searcher=StringSearch("fixedHumanName"))
        fixedId = Attribute(getter="fixedId", setter="fixedId", searcher=StringSearch("fixedId"))
        fixedIdentifier = EmbeddedAttribute(type="Identifier", getter="fixedIdentifier", setter="fixedIdentifier", searcher=StringSearch("fixedIdentifier"))
        fixedInstant = DateAttribute("fixedInstant")
        fixedInteger = Attribute(getter="fixedInteger", setter="fixedInteger", searcher=NumericSearch("fixedInteger"))
        fixedMarkdown = Attribute(getter="fixedMarkdown", setter="fixedMarkdown", searcher=StringSearch("fixedMarkdown"))
        fixedMeta = EmbeddedAttribute(type="Meta", getter="fixedMeta", setter="fixedMeta", searcher=StringSearch("fixedMeta"))
        fixedMoney = EmbeddedAttribute(type="Money", getter="fixedMoney", setter="fixedMoney", searcher=StringSearch("fixedMoney"))
        fixedOid = Attribute(getter="fixedOid", setter="fixedOid", searcher=StringSearch("fixedOid"))
        fixedPeriod = EmbeddedAttribute(type="Period", getter="fixedPeriod", setter="fixedPeriod", searcher=StringSearch("fixedPeriod"))
        fixedPositiveInt = Attribute(getter="fixedPositiveInt", setter="fixedPositiveInt", searcher=NumericSearch("fixedPositiveInt"))
        fixedQuantity = EmbeddedAttribute(type="Quantity", getter="fixedQuantity", setter="fixedQuantity", searcher=StringSearch("fixedQuantity"))
        fixedRange = EmbeddedAttribute(type="Range", getter="fixedRange", setter="fixedRange", searcher=StringSearch("fixedRange"))
        fixedRatio = EmbeddedAttribute(type="Ratio", getter="fixedRatio", setter="fixedRatio", searcher=StringSearch("fixedRatio"))
        # fixedReference = ObjectIdReferenceAttribute(getter="fixedReference", setter="fixedReference", searcher=StringSearch("fixedReference"))
        fixedSampledData = EmbeddedAttribute(type="SampledData", getter="fixedSampledData", setter="fixedSampledData", searcher=StringSearch("fixedSampledData"))
        fixedSignature = EmbeddedAttribute(type="Signature", getter="fixedSignature", setter="fixedSignature", searcher=StringSearch("fixedSignature"))
        fixedString = Attribute(getter="fixedString", setter="fixedString", searcher=StringSearch("fixedString"))
        fixedTime = DateAttribute("fixedTime")
        fixedTiming = EmbeddedAttribute(type="Timing", getter="fixedTiming", setter="fixedTiming", searcher=StringSearch("fixedTiming"))
        fixedUnsignedInt = Attribute(getter="fixedUnsignedInt", setter="fixedUnsignedInt", searcher=NumericSearch("fixedUnsignedInt"))
        fixedUri = Attribute(getter="fixedUri", setter="fixedUri", searcher=StringSearch("fixedUri"))
        isModifier = Attribute(getter="isModifier", setter="isModifier", searcher=StringSearch("isModifier"))
        isSummary = Attribute(getter="isSummary", setter="isSummary", searcher=StringSearch("isSummary"))
        label = Attribute(getter="label", setter="label", searcher=StringSearch("label"))
        mapping = EmbeddedAttribute(type="ElementDefinitionMapping", getter="mapping", setter="mapping", searcher=StringSearch("mapping"))
        max = Attribute(getter="max", setter="max", searcher=StringSearch("max"))
        maxLength = Attribute(getter="maxLength", setter="maxLength", searcher=NumericSearch("maxLength"))
        maxValueDate = DateAttribute("maxValueDate")
        maxValueDateTime = DateAttribute("maxValueDateTime")
        maxValueDecimal = Attribute(getter="maxValueDecimal", setter="maxValueDecimal", searcher=NumericSearch("maxValueDecimal"))
        maxValueInstant = DateAttribute("maxValueInstant")
        maxValueInteger = Attribute(getter="maxValueInteger", setter="maxValueInteger", searcher=NumericSearch("maxValueInteger"))
        maxValuePositiveInt = Attribute(getter="maxValuePositiveInt", setter="maxValuePositiveInt", searcher=NumericSearch("maxValuePositiveInt"))
        maxValueQuantity = EmbeddedAttribute(type="Quantity", getter="maxValueQuantity", setter="maxValueQuantity", searcher=StringSearch("maxValueQuantity"))
        maxValueTime = DateAttribute("maxValueTime")
        maxValueUnsignedInt = Attribute(getter="maxValueUnsignedInt", setter="maxValueUnsignedInt", searcher=NumericSearch("maxValueUnsignedInt"))
        meaningWhenMissing = Attribute(getter="meaningWhenMissing", setter="meaningWhenMissing", searcher=StringSearch("meaningWhenMissing"))
        min = Attribute(getter="min", setter="min", searcher=NumericSearch("min"))
        minValueDate = DateAttribute("minValueDate")
        minValueDateTime = DateAttribute("minValueDateTime")
        minValueDecimal = Attribute(getter="minValueDecimal", setter="minValueDecimal", searcher=NumericSearch("minValueDecimal"))
        minValueInstant = DateAttribute("minValueInstant")
        minValueInteger = Attribute(getter="minValueInteger", setter="minValueInteger", searcher=NumericSearch("minValueInteger"))
        minValuePositiveInt = Attribute(getter="minValuePositiveInt", setter="minValuePositiveInt", searcher=NumericSearch("minValuePositiveInt"))
        minValueQuantity = EmbeddedAttribute(type="Quantity", getter="minValueQuantity", setter="minValueQuantity", searcher=StringSearch("minValueQuantity"))
        minValueTime = DateAttribute("minValueTime")
        minValueUnsignedInt = Attribute(getter="minValueUnsignedInt", setter="minValueUnsignedInt", searcher=NumericSearch("minValueUnsignedInt"))
        mustSupport = Attribute(getter="mustSupport", setter="mustSupport", searcher=StringSearch("mustSupport"))
        orderMeaning = Attribute(getter="orderMeaning", setter="orderMeaning", searcher=StringSearch("orderMeaning"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))
        patternAddress = EmbeddedAttribute(type="Address", getter="patternAddress", setter="patternAddress", searcher=StringSearch("patternAddress"))
        patternAge = EmbeddedAttribute(type="Age", getter="patternAge", setter="patternAge", searcher=StringSearch("patternAge"))
        patternAnnotation = EmbeddedAttribute(type="Annotation", getter="patternAnnotation", setter="patternAnnotation", searcher=StringSearch("patternAnnotation"))
        patternAttachment = EmbeddedAttribute(type="Attachment", getter="patternAttachment", setter="patternAttachment", searcher=StringSearch("patternAttachment"))
        patternBase64Binary = Attribute(getter="patternBase64Binary", setter="patternBase64Binary", searcher=StringSearch("patternBase64Binary"))
        patternBoolean = Attribute(getter="patternBoolean", setter="patternBoolean", searcher=StringSearch("patternBoolean"))
        patternCode = Attribute(getter="patternCode", setter="patternCode", searcher=StringSearch("patternCode"))
        patternCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="patternCodeableConcept", setter="patternCodeableConcept", searcher=StringSearch("patternCodeableConcept"))
        patternCoding = EmbeddedAttribute(type="Coding", getter="patternCoding", setter="patternCoding", searcher=StringSearch("patternCoding"))
        patternContactPoint = EmbeddedAttribute(type="ContactPoint", getter="patternContactPoint", setter="patternContactPoint", searcher=StringSearch("patternContactPoint"))
        patternCount = EmbeddedAttribute(type="Count", getter="patternCount", setter="patternCount", searcher=StringSearch("patternCount"))
        patternDate = DateAttribute("patternDate")
        patternDateTime = DateAttribute("patternDateTime")
        patternDecimal = Attribute(getter="patternDecimal", setter="patternDecimal", searcher=NumericSearch("patternDecimal"))
        patternDistance = EmbeddedAttribute(type="Distance", getter="patternDistance", setter="patternDistance", searcher=StringSearch("patternDistance"))
        patternDuration = EmbeddedAttribute(type="Duration", getter="patternDuration", setter="patternDuration", searcher=StringSearch("patternDuration"))
        patternHumanName = EmbeddedAttribute(type="HumanName", getter="patternHumanName", setter="patternHumanName", searcher=StringSearch("patternHumanName"))
        patternId = Attribute(getter="patternId", setter="patternId", searcher=StringSearch("patternId"))
        patternIdentifier = EmbeddedAttribute(type="Identifier", getter="patternIdentifier", setter="patternIdentifier", searcher=StringSearch("patternIdentifier"))
        patternInstant = DateAttribute("patternInstant")
        patternInteger = Attribute(getter="patternInteger", setter="patternInteger", searcher=NumericSearch("patternInteger"))
        patternMarkdown = Attribute(getter="patternMarkdown", setter="patternMarkdown", searcher=StringSearch("patternMarkdown"))
        patternMeta = EmbeddedAttribute(type="Meta", getter="patternMeta", setter="patternMeta", searcher=StringSearch("patternMeta"))
        patternMoney = EmbeddedAttribute(type="Money", getter="patternMoney", setter="patternMoney", searcher=StringSearch("patternMoney"))
        patternOid = Attribute(getter="patternOid", setter="patternOid", searcher=StringSearch("patternOid"))
        patternPeriod = EmbeddedAttribute(type="Period", getter="patternPeriod", setter="patternPeriod", searcher=StringSearch("patternPeriod"))
        patternPositiveInt = Attribute(getter="patternPositiveInt", setter="patternPositiveInt", searcher=NumericSearch("patternPositiveInt"))
        patternQuantity = EmbeddedAttribute(type="Quantity", getter="patternQuantity", setter="patternQuantity", searcher=StringSearch("patternQuantity"))
        patternRange = EmbeddedAttribute(type="Range", getter="patternRange", setter="patternRange", searcher=StringSearch("patternRange"))
        patternRatio = EmbeddedAttribute(type="Ratio", getter="patternRatio", setter="patternRatio", searcher=StringSearch("patternRatio"))
        # patternReference = ObjectIdReferenceAttribute(getter="patternReference", setter="patternReference", searcher=StringSearch("patternReference"))
        patternSampledData = EmbeddedAttribute(type="SampledData", getter="patternSampledData", setter="patternSampledData", searcher=StringSearch("patternSampledData"))
        patternSignature = EmbeddedAttribute(type="Signature", getter="patternSignature", setter="patternSignature", searcher=StringSearch("patternSignature"))
        patternString = Attribute(getter="patternString", setter="patternString", searcher=StringSearch("patternString"))
        patternTime = DateAttribute("patternTime")
        patternTiming = EmbeddedAttribute(type="Timing", getter="patternTiming", setter="patternTiming", searcher=StringSearch("patternTiming"))
        patternUnsignedInt = Attribute(getter="patternUnsignedInt", setter="patternUnsignedInt", searcher=NumericSearch("patternUnsignedInt"))
        patternUri = Attribute(getter="patternUri", setter="patternUri", searcher=StringSearch("patternUri"))
        representation = Attribute(getter="representation", setter="representation", searcher=StringSearch("representation"))
        requirements = Attribute(getter="requirements", setter="requirements", searcher=StringSearch("requirements"))
        short = Attribute(getter="short", setter="short", searcher=StringSearch("short"))
        sliceName = Attribute(getter="sliceName", setter="sliceName", searcher=StringSearch("sliceName"))
        slicing = EmbeddedAttribute(type="ElementDefinitionSlicing", getter="slicing", setter="slicing", searcher=StringSearch("slicing"))
        type = EmbeddedAttribute(type="ElementDefinitionType", getter="type", setter="type", searcher=StringSearch("type"))

class ElementDefinitionBase(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    max = fields.CharField(blank=False, required=True)
    min = fields.IntegerField(blank=False, required=True)
    path = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        max = Attribute(getter="max", setter="max", searcher=StringSearch("max"))
        min = Attribute(getter="min", setter="min", searcher=NumericSearch("min"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))

class ElementDefinitionBinding(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    strength = fields.CharField(blank=False, required=True)
    valueSetReference = fields.ObjectIdField(blank=True, required=False)
    valueSetUri = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        strength = Attribute(getter="strength", setter="strength", searcher=StringSearch("strength"))
        valueSetReference = ObjectIdReferenceAttribute({'ValueSet'}, ("valueSetReference", str), "valueSetReference", pk_setter="valueSetReference")
        valueSetUri = Attribute(getter="valueSetUri", setter="valueSetUri", searcher=StringSearch("valueSetUri"))

class ElementDefinitionConstraint(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    expression = fields.CharField(blank=False, required=True)
    human = fields.CharField(blank=False, required=True)
    key = fields.CharField(blank=False, required=True)
    requirements = fields.CharField(blank=True, required=False)
    severity = fields.CharField(blank=False, required=True)
    source = fields.CharField(blank=True, required=False)
    xpath = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        human = Attribute(getter="human", setter="human", searcher=StringSearch("human"))
        key = Attribute(getter="key", setter="key", searcher=StringSearch("key"))
        requirements = Attribute(getter="requirements", setter="requirements", searcher=StringSearch("requirements"))
        severity = Attribute(getter="severity", setter="severity", searcher=StringSearch("severity"))
        source = Attribute(getter="source", setter="source", searcher=StringSearch("source"))
        xpath = Attribute(getter="xpath", setter="xpath", searcher=StringSearch("xpath"))

class ElementDefinitionExample(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    label = fields.CharField(blank=False, required=True)
    valueAddress = fields.EmbeddedDocumentField("Address", blank=False, required=True)
    valueAge = fields.EmbeddedDocumentField("Age", blank=False, required=True)
    valueAnnotation = fields.EmbeddedDocumentField("Annotation", blank=False, required=True)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=False, required=True)
    valueBase64Binary = fields.CharField(blank=False, required=True)
    valueBoolean = fields.BooleanField(blank=False, required=True)
    valueCode = fields.CharField(blank=False, required=True)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    valueCoding = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    valueContactPoint = fields.EmbeddedDocumentField("ContactPoint", blank=False, required=True)
    valueCount = fields.EmbeddedDocumentField("Count", blank=False, required=True)
    valueDate = fields.DateTimeField(blank=False, required=True)
    valueDateTime = fields.DateTimeField(blank=False, required=True)
    valueDecimal = fields.FloatField(blank=False, required=True)
    valueDistance = fields.EmbeddedDocumentField("Distance", blank=False, required=True)
    valueDuration = fields.EmbeddedDocumentField("Duration", blank=False, required=True)
    valueHumanName = fields.EmbeddedDocumentField("HumanName", blank=False, required=True)
    valueId = fields.CharField(blank=False, required=True)
    valueIdentifier = fields.EmbeddedDocumentField("Identifier", blank=False, required=True)
    valueInstant = fields.DateTimeField(blank=False, required=True)
    valueInteger = fields.IntegerField(blank=False, required=True)
    valueMarkdown = fields.CharField(blank=False, required=True)
    valueMeta = fields.EmbeddedDocumentField("Meta", blank=False, required=True)
    valueMoney = fields.EmbeddedDocumentField("Money", blank=False, required=True)
    valueOid = fields.CharField(blank=False, required=True)
    valuePeriod = fields.EmbeddedDocumentField("Period", blank=False, required=True)
    valuePositiveInt = fields.IntegerField(blank=False, required=True)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=False, required=True)
    valueRange = fields.EmbeddedDocumentField("Range", blank=False, required=True)
    valueRatio = fields.EmbeddedDocumentField("Ratio", blank=False, required=True)
    # valueReference = fields.ReferenceField(, blank=False, required=True)
    valueSampledData = fields.EmbeddedDocumentField("SampledData", blank=False, required=True)
    valueSignature = fields.EmbeddedDocumentField("Signature", blank=False, required=True)
    valueString = fields.CharField(blank=False, required=True)
    valueTime = fields.DateTimeField(blank=False, required=True)
    valueTiming = fields.EmbeddedDocumentField("Timing", blank=False, required=True)
    valueUnsignedInt = fields.IntegerField(blank=False, required=True)
    valueUri = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        label = Attribute(getter="label", setter="label", searcher=StringSearch("label"))
        valueAddress = EmbeddedAttribute(type="Address", getter="valueAddress", setter="valueAddress", searcher=StringSearch("valueAddress"))
        valueAge = EmbeddedAttribute(type="Age", getter="valueAge", setter="valueAge", searcher=StringSearch("valueAge"))
        valueAnnotation = EmbeddedAttribute(type="Annotation", getter="valueAnnotation", setter="valueAnnotation", searcher=StringSearch("valueAnnotation"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueBase64Binary = Attribute(getter="valueBase64Binary", setter="valueBase64Binary", searcher=StringSearch("valueBase64Binary"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCode = Attribute(getter="valueCode", setter="valueCode", searcher=StringSearch("valueCode"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueContactPoint = EmbeddedAttribute(type="ContactPoint", getter="valueContactPoint", setter="valueContactPoint", searcher=StringSearch("valueContactPoint"))
        valueCount = EmbeddedAttribute(type="Count", getter="valueCount", setter="valueCount", searcher=StringSearch("valueCount"))
        valueDate = DateAttribute("valueDate")
        valueDateTime = DateAttribute("valueDateTime")
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueDistance = EmbeddedAttribute(type="Distance", getter="valueDistance", setter="valueDistance", searcher=StringSearch("valueDistance"))
        valueDuration = EmbeddedAttribute(type="Duration", getter="valueDuration", setter="valueDuration", searcher=StringSearch("valueDuration"))
        valueHumanName = EmbeddedAttribute(type="HumanName", getter="valueHumanName", setter="valueHumanName", searcher=StringSearch("valueHumanName"))
        valueId = Attribute(getter="valueId", setter="valueId", searcher=StringSearch("valueId"))
        valueIdentifier = EmbeddedAttribute(type="Identifier", getter="valueIdentifier", setter="valueIdentifier", searcher=StringSearch("valueIdentifier"))
        valueInstant = DateAttribute("valueInstant")
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueMarkdown = Attribute(getter="valueMarkdown", setter="valueMarkdown", searcher=StringSearch("valueMarkdown"))
        valueMeta = EmbeddedAttribute(type="Meta", getter="valueMeta", setter="valueMeta", searcher=StringSearch("valueMeta"))
        valueMoney = EmbeddedAttribute(type="Money", getter="valueMoney", setter="valueMoney", searcher=StringSearch("valueMoney"))
        valueOid = Attribute(getter="valueOid", setter="valueOid", searcher=StringSearch("valueOid"))
        valuePeriod = EmbeddedAttribute(type="Period", getter="valuePeriod", setter="valuePeriod", searcher=StringSearch("valuePeriod"))
        valuePositiveInt = Attribute(getter="valuePositiveInt", setter="valuePositiveInt", searcher=NumericSearch("valuePositiveInt"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))
        valueRatio = EmbeddedAttribute(type="Ratio", getter="valueRatio", setter="valueRatio", searcher=StringSearch("valueRatio"))
        # valueReference = ObjectIdReferenceAttribute(getter="valueReference", setter="valueReference", searcher=StringSearch("valueReference"))
        valueSampledData = EmbeddedAttribute(type="SampledData", getter="valueSampledData", setter="valueSampledData", searcher=StringSearch("valueSampledData"))
        valueSignature = EmbeddedAttribute(type="Signature", getter="valueSignature", setter="valueSignature", searcher=StringSearch("valueSignature"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")
        valueTiming = EmbeddedAttribute(type="Timing", getter="valueTiming", setter="valueTiming", searcher=StringSearch("valueTiming"))
        valueUnsignedInt = Attribute(getter="valueUnsignedInt", setter="valueUnsignedInt", searcher=NumericSearch("valueUnsignedInt"))
        valueUri = Attribute(getter="valueUri", setter="valueUri", searcher=StringSearch("valueUri"))

class ElementDefinitionMapping(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    identity = fields.CharField(blank=False, required=True)
    language = fields.CharField(blank=True, required=False)
    map = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        identity = Attribute(getter="identity", setter="identity", searcher=StringSearch("identity"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        map = Attribute(getter="map", setter="map", searcher=StringSearch("map"))

class ElementDefinitionSlicing(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    discriminator = fields.EmbeddedDocumentListField("ElementDefinitionSlicingDiscriminator", blank=True, required=False)
    ordered = fields.BooleanField(blank=True, required=False)
    rules = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        discriminator = EmbeddedAttribute(type="ElementDefinitionSlicingDiscriminator", getter="discriminator", setter="discriminator", searcher=StringSearch("discriminator"))
        ordered = Attribute(getter="ordered", setter="ordered", searcher=StringSearch("ordered"))
        rules = Attribute(getter="rules", setter="rules", searcher=StringSearch("rules"))

class ElementDefinitionSlicingDiscriminator(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    path = fields.CharField(blank=False, required=True)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class ElementDefinitionType(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    aggregation = fields.ListField(fields.CharField(), blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    profile = fields.CharField(blank=True, required=False)
    targetProfile = fields.CharField(blank=True, required=False)
    versioning = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        aggregation = Attribute(getter="aggregation", setter="aggregation", searcher=StringSearch("aggregation"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        profile = Attribute(getter="profile", setter="profile", searcher=StringSearch("profile"))
        targetProfile = Attribute(getter="targetProfile", setter="targetProfile", searcher=StringSearch("targetProfile"))
        versioning = Attribute(getter="versioning", setter="versioning", searcher=StringSearch("versioning"))

class EligibilityRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    benefitCategory = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    benefitSubCategory = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    businessArrangement = fields.CharField(blank=True, required=False)
    coverage = fields.ObjectIdField(blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    enterer = fields.ObjectIdField(blank=True, required=False)
    facility = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    insurer = fields.ObjectIdField(blank=True, required=False)
    organization = fields.ObjectIdField(blank=True, required=False)
    patient = fields.ObjectIdField(blank=True, required=False)
    priority = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    provider = fields.ObjectIdField(blank=True, required=False)
    servicedDate = fields.DateTimeField(blank=True, required=False)
    servicedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        benefitCategory = EmbeddedAttribute(type="CodeableConcept", getter="benefitCategory", setter="benefitCategory", searcher=StringSearch("benefitCategory"))
        benefitSubCategory = EmbeddedAttribute(type="CodeableConcept", getter="benefitSubCategory", setter="benefitSubCategory", searcher=StringSearch("benefitSubCategory"))
        businessArrangement = Attribute(getter="businessArrangement", setter="businessArrangement", searcher=StringSearch("businessArrangement"))
        coverage = ObjectIdReferenceAttribute({'Coverage'}, ("coverage", str), "coverage", pk_setter="coverage")
        created = DateAttribute("created")
        enterer = ObjectIdReferenceAttribute({'Practitioner'}, ("enterer", str), "enterer", pk_setter="enterer")
        facility = ObjectIdReferenceAttribute({'Location'}, ("facility", str), "facility", pk_setter="facility")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        insurer = ObjectIdReferenceAttribute({'Organization'}, ("insurer", str), "insurer", pk_setter="insurer")
        organization = ObjectIdReferenceAttribute({'Organization'}, ("organization", str), "organization", pk_setter="organization")
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        priority = EmbeddedAttribute(type="CodeableConcept", getter="priority", setter="priority", searcher=StringSearch("priority"))
        provider = ObjectIdReferenceAttribute({'Practitioner'}, ("provider", str), "provider", pk_setter="provider")
        servicedDate = DateAttribute("servicedDate")
        servicedPeriod = EmbeddedAttribute(type="Period", getter="servicedPeriod", setter="servicedPeriod", searcher=StringSearch("servicedPeriod"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class EligibilityResponse(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    disposition = fields.CharField(blank=True, required=False)
    error = fields.EmbeddedDocumentListField("EligibilityResponseError", blank=True, required=False)
    form = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    inforce = fields.BooleanField(blank=True, required=False)
    insurance = fields.EmbeddedDocumentListField("EligibilityResponseInsurance", blank=True, required=False)
    insurer = fields.ObjectIdField(blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    request = fields.ObjectIdField(blank=True, required=False)
    requestOrganization = fields.ObjectIdField(blank=True, required=False)
    requestProvider = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        created = DateAttribute("created")
        disposition = Attribute(getter="disposition", setter="disposition", searcher=StringSearch("disposition"))
        error = EmbeddedAttribute(type="EligibilityResponseError", getter="error", setter="error", searcher=StringSearch("error"))
        form = EmbeddedAttribute(type="CodeableConcept", getter="form", setter="form", searcher=StringSearch("form"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        inforce = Attribute(getter="inforce", setter="inforce", searcher=StringSearch("inforce"))
        insurance = EmbeddedAttribute(type="EligibilityResponseInsurance", getter="insurance", setter="insurance", searcher=StringSearch("insurance"))
        insurer = ObjectIdReferenceAttribute({'Organization'}, ("insurer", str), "insurer", pk_setter="insurer")
        outcome = EmbeddedAttribute(type="CodeableConcept", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        request = ObjectIdReferenceAttribute({'EligibilityRequest'}, ("request", str), "request", pk_setter="request")
        requestOrganization = ObjectIdReferenceAttribute({'Organization'}, ("requestOrganization", str), "requestOrganization", pk_setter="requestOrganization")
        requestProvider = ObjectIdReferenceAttribute({'Practitioner'}, ("requestProvider", str), "requestProvider", pk_setter="requestProvider")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class EligibilityResponseError(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))

class EligibilityResponseInsurance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    benefitBalance = fields.EmbeddedDocumentListField("EligibilityResponseInsuranceBenefitBalance", blank=True, required=False)
    contract = fields.ObjectIdField(blank=True, required=False)
    coverage = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        benefitBalance = EmbeddedAttribute(type="EligibilityResponseInsuranceBenefitBalance", getter="benefitBalance", setter="benefitBalance", searcher=StringSearch("benefitBalance"))
        contract = ObjectIdReferenceAttribute({'Contract'}, ("contract", str), "contract", pk_setter="contract")
        coverage = ObjectIdReferenceAttribute({'Coverage'}, ("coverage", str), "coverage", pk_setter="coverage")

class EligibilityResponseInsuranceBenefitBalance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    excluded = fields.BooleanField(blank=True, required=False)
    financial = fields.EmbeddedDocumentListField("EligibilityResponseInsuranceBenefitBalanceFinancial", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    network = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subCategory = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    term = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    unit = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        excluded = Attribute(getter="excluded", setter="excluded", searcher=StringSearch("excluded"))
        financial = EmbeddedAttribute(type="EligibilityResponseInsuranceBenefitBalanceFinancial", getter="financial", setter="financial", searcher=StringSearch("financial"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        network = EmbeddedAttribute(type="CodeableConcept", getter="network", setter="network", searcher=StringSearch("network"))
        subCategory = EmbeddedAttribute(type="CodeableConcept", getter="subCategory", setter="subCategory", searcher=StringSearch("subCategory"))
        term = EmbeddedAttribute(type="CodeableConcept", getter="term", setter="term", searcher=StringSearch("term"))
        unit = EmbeddedAttribute(type="CodeableConcept", getter="unit", setter="unit", searcher=StringSearch("unit"))

class EligibilityResponseInsuranceBenefitBalanceFinancial(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    allowedMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    allowedString = fields.CharField(blank=True, required=False)
    allowedUnsignedInt = fields.IntegerField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    usedMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    usedUnsignedInt = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        allowedMoney = EmbeddedAttribute(type="Money", getter="allowedMoney", setter="allowedMoney", searcher=StringSearch("allowedMoney"))
        allowedString = Attribute(getter="allowedString", setter="allowedString", searcher=StringSearch("allowedString"))
        allowedUnsignedInt = Attribute(getter="allowedUnsignedInt", setter="allowedUnsignedInt", searcher=NumericSearch("allowedUnsignedInt"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        usedMoney = EmbeddedAttribute(type="Money", getter="usedMoney", setter="usedMoney", searcher=StringSearch("usedMoney"))
        usedUnsignedInt = Attribute(getter="usedUnsignedInt", setter="usedUnsignedInt", searcher=NumericSearch("usedUnsignedInt"))

class Encounter(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    account = fields.ObjectIdField(blank=True, required=False)
    appointment = fields.ObjectIdField(blank=True, required=False)
    classHistory = fields.EmbeddedDocumentListField("EncounterClassHistory", blank=True, required=False)
    class_ = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    diagnosis = fields.EmbeddedDocumentListField("EncounterDiagnosis", blank=True, required=False)
    episodeOfCare = fields.ObjectIdField(blank=True, required=False)
    hospitalization = fields.EmbeddedDocumentField("EncounterHospitalization", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    incomingReferral = fields.ObjectIdField(blank=True, required=False)
    length = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    location = fields.EmbeddedDocumentListField("EncounterLocation", blank=True, required=False)
    partOf = fields.ObjectIdField(blank=True, required=False)
    participant = fields.EmbeddedDocumentListField("EncounterParticipant", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    priority = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    reason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    serviceProvider = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusHistory = fields.EmbeddedDocumentListField("EncounterStatusHistory", blank=True, required=False)
    subject = fields.ObjectIdField(blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        account = ObjectIdReferenceAttribute({'Account'}, ("account", str), "account", pk_setter="account")
        appointment = ObjectIdReferenceAttribute({'Appointment'}, ("appointment", str), "appointment", pk_setter="appointment")
        classHistory = EmbeddedAttribute(type="EncounterClassHistory", getter="classHistory", setter="classHistory", searcher=StringSearch("classHistory"))
        class_ = EmbeddedAttribute(type="Coding", getter="class_", setter="class_", searcher=StringSearch("class_"))
        diagnosis = EmbeddedAttribute(type="EncounterDiagnosis", getter="diagnosis", setter="diagnosis", searcher=StringSearch("diagnosis"))
        episodeOfCare = ObjectIdReferenceAttribute({'EpisodeOfCare'}, ("episodeOfCare", str), "episodeOfCare", pk_setter="episodeOfCare")
        hospitalization = EmbeddedAttribute(type="EncounterHospitalization", getter="hospitalization", setter="hospitalization", searcher=StringSearch("hospitalization"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        incomingReferral = ObjectIdReferenceAttribute({'ReferralRequest'}, ("incomingReferral", str), "incomingReferral", pk_setter="incomingReferral")
        length = EmbeddedAttribute(type="Duration", getter="length", setter="length", searcher=StringSearch("length"))
        location = EmbeddedAttribute(type="EncounterLocation", getter="location", setter="location", searcher=StringSearch("location"))
        partOf = ObjectIdReferenceAttribute({'Encounter'}, ("partOf", str), "partOf", pk_setter="partOf")
        participant = EmbeddedAttribute(type="EncounterParticipant", getter="participant", setter="participant", searcher=StringSearch("participant"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        priority = EmbeddedAttribute(type="CodeableConcept", getter="priority", setter="priority", searcher=StringSearch("priority"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        serviceProvider = ObjectIdReferenceAttribute({'Organization'}, ("serviceProvider", str), "serviceProvider", pk_setter="serviceProvider")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusHistory = EmbeddedAttribute(type="EncounterStatusHistory", getter="statusHistory", setter="statusHistory", searcher=StringSearch("statusHistory"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class EncounterClassHistory(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    class_ = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        class_ = EmbeddedAttribute(type="Coding", getter="class_", setter="class_", searcher=StringSearch("class_"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))

class EncounterDiagnosis(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    condition = fields.ObjectIdField(blank=False, required=True)
    rank = fields.IntegerField(blank=True, required=False)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        condition = ObjectIdReferenceAttribute({'Condition', 'Procedure'}, ("condition", str), "condition", pk_setter="condition")
        rank = Attribute(getter="rank", setter="rank", searcher=NumericSearch("rank"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class EncounterHospitalization(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    admitSource = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    destination = fields.ObjectIdField(blank=True, required=False)
    dietPreference = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    dischargeDisposition = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    origin = fields.ObjectIdField(blank=True, required=False)
    preAdmissionIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    reAdmission = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    specialArrangement = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    specialCourtesy = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        admitSource = EmbeddedAttribute(type="CodeableConcept", getter="admitSource", setter="admitSource", searcher=StringSearch("admitSource"))
        destination = ObjectIdReferenceAttribute({'Location'}, ("destination", str), "destination", pk_setter="destination")
        dietPreference = EmbeddedAttribute(type="CodeableConcept", getter="dietPreference", setter="dietPreference", searcher=StringSearch("dietPreference"))
        dischargeDisposition = EmbeddedAttribute(type="CodeableConcept", getter="dischargeDisposition", setter="dischargeDisposition", searcher=StringSearch("dischargeDisposition"))
        origin = ObjectIdReferenceAttribute({'Location'}, ("origin", str), "origin", pk_setter="origin")
        preAdmissionIdentifier = EmbeddedAttribute(type="Identifier", getter="preAdmissionIdentifier", setter="preAdmissionIdentifier", searcher=StringSearch("preAdmissionIdentifier"))
        reAdmission = EmbeddedAttribute(type="CodeableConcept", getter="reAdmission", setter="reAdmission", searcher=StringSearch("reAdmission"))
        specialArrangement = EmbeddedAttribute(type="CodeableConcept", getter="specialArrangement", setter="specialArrangement", searcher=StringSearch("specialArrangement"))
        specialCourtesy = EmbeddedAttribute(type="CodeableConcept", getter="specialCourtesy", setter="specialCourtesy", searcher=StringSearch("specialCourtesy"))

class EncounterLocation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    location = fields.ObjectIdField(blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        location = ObjectIdReferenceAttribute({'Location'}, ("location", str), "location", pk_setter="location")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class EncounterParticipant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    individual = fields.ObjectIdField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        individual = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner'}, ("individual", str), "individual", pk_setter="individual")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class EncounterStatusHistory(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class Endpoint(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    address = fields.CharField(blank=False, required=True)
    connectionType = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    contact = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    header = fields.ListField(fields.CharField(), blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    managingOrganization = fields.ObjectIdField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    payloadMimeType = fields.ListField(fields.CharField(), blank=True, required=False)
    payloadType = fields.EmbeddedDocumentListField("CodeableConcept", blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        address = Attribute(getter="address", setter="address", searcher=StringSearch("address"))
        connectionType = EmbeddedAttribute(type="Coding", getter="connectionType", setter="connectionType", searcher=StringSearch("connectionType"))
        contact = EmbeddedAttribute(type="ContactPoint", getter="contact", setter="contact", searcher=StringSearch("contact"))
        header = Attribute(getter="header", setter="header", searcher=StringSearch("header"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        managingOrganization = ObjectIdReferenceAttribute({'Organization'}, ("managingOrganization", str), "managingOrganization", pk_setter="managingOrganization")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        payloadMimeType = Attribute(getter="payloadMimeType", setter="payloadMimeType", searcher=StringSearch("payloadMimeType"))
        payloadType = EmbeddedAttribute(type="CodeableConcept", getter="payloadType", setter="payloadType", searcher=StringSearch("payloadType"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class EnrollmentRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    coverage = fields.ObjectIdField(blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    insurer = fields.ObjectIdField(blank=True, required=False)
    organization = fields.ObjectIdField(blank=True, required=False)
    provider = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    subject = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        coverage = ObjectIdReferenceAttribute({'Coverage'}, ("coverage", str), "coverage", pk_setter="coverage")
        created = DateAttribute("created")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        insurer = ObjectIdReferenceAttribute({'Organization'}, ("insurer", str), "insurer", pk_setter="insurer")
        organization = ObjectIdReferenceAttribute({'Organization'}, ("organization", str), "organization", pk_setter="organization")
        provider = ObjectIdReferenceAttribute({'Practitioner'}, ("provider", str), "provider", pk_setter="provider")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient'}, ("subject", str), "subject", pk_setter="subject")

class EnrollmentResponse(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    disposition = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    organization = fields.ObjectIdField(blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    request = fields.ObjectIdField(blank=True, required=False)
    requestOrganization = fields.ObjectIdField(blank=True, required=False)
    requestProvider = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        created = DateAttribute("created")
        disposition = Attribute(getter="disposition", setter="disposition", searcher=StringSearch("disposition"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        organization = ObjectIdReferenceAttribute({'Organization'}, ("organization", str), "organization", pk_setter="organization")
        outcome = EmbeddedAttribute(type="CodeableConcept", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        request = ObjectIdReferenceAttribute({'EnrollmentRequest'}, ("request", str), "request", pk_setter="request")
        requestOrganization = ObjectIdReferenceAttribute({'Organization'}, ("requestOrganization", str), "requestOrganization", pk_setter="requestOrganization")
        requestProvider = ObjectIdReferenceAttribute({'Practitioner'}, ("requestProvider", str), "requestProvider", pk_setter="requestProvider")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class EpisodeOfCare(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    account = fields.ObjectIdField(blank=True, required=False)
    careManager = fields.ObjectIdField(blank=True, required=False)
    diagnosis = fields.EmbeddedDocumentListField("EpisodeOfCareDiagnosis", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    managingOrganization = fields.ObjectIdField(blank=True, required=False)
    patient = fields.ObjectIdField(blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    referralRequest = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusHistory = fields.EmbeddedDocumentListField("EpisodeOfCareStatusHistory", blank=True, required=False)
    team = fields.ObjectIdField(blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        account = ObjectIdReferenceAttribute({'Account'}, ("account", str), "account", pk_setter="account")
        careManager = ObjectIdReferenceAttribute({'Practitioner'}, ("careManager", str), "careManager", pk_setter="careManager")
        diagnosis = EmbeddedAttribute(type="EpisodeOfCareDiagnosis", getter="diagnosis", setter="diagnosis", searcher=StringSearch("diagnosis"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        managingOrganization = ObjectIdReferenceAttribute({'Organization'}, ("managingOrganization", str), "managingOrganization", pk_setter="managingOrganization")
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        referralRequest = ObjectIdReferenceAttribute({'ReferralRequest'}, ("referralRequest", str), "referralRequest", pk_setter="referralRequest")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusHistory = EmbeddedAttribute(type="EpisodeOfCareStatusHistory", getter="statusHistory", setter="statusHistory", searcher=StringSearch("statusHistory"))
        team = ObjectIdReferenceAttribute({'CareTeam'}, ("team", str), "team", pk_setter="team")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class EpisodeOfCareDiagnosis(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    condition = fields.ObjectIdField(blank=False, required=True)
    rank = fields.IntegerField(blank=True, required=False)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        condition = ObjectIdReferenceAttribute({'Condition'}, ("condition", str), "condition", pk_setter="condition")
        rank = Attribute(getter="rank", setter="rank", searcher=NumericSearch("rank"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class EpisodeOfCareStatusHistory(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class ExpansionProfile(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    activeOnly = fields.BooleanField(blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    designation = fields.EmbeddedDocumentField("ExpansionProfileDesignation", blank=True, required=False)
    displayLanguage = fields.CharField(blank=True, required=False)
    excludeNested = fields.BooleanField(blank=True, required=False)
    excludeNotForUI = fields.BooleanField(blank=True, required=False)
    excludePostCoordinated = fields.BooleanField(blank=True, required=False)
    excludedSystem = fields.EmbeddedDocumentField("ExpansionProfileExcludedSystem", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    fixedVersion = fields.EmbeddedDocumentListField("ExpansionProfileFixedVersion", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    includeDefinition = fields.BooleanField(blank=True, required=False)
    includeDesignations = fields.BooleanField(blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    limitedExpansion = fields.BooleanField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        activeOnly = Attribute(getter="activeOnly", setter="activeOnly", searcher=StringSearch("activeOnly"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        designation = EmbeddedAttribute(type="ExpansionProfileDesignation", getter="designation", setter="designation", searcher=StringSearch("designation"))
        displayLanguage = Attribute(getter="displayLanguage", setter="displayLanguage", searcher=StringSearch("displayLanguage"))
        excludeNested = Attribute(getter="excludeNested", setter="excludeNested", searcher=StringSearch("excludeNested"))
        excludeNotForUI = Attribute(getter="excludeNotForUI", setter="excludeNotForUI", searcher=StringSearch("excludeNotForUI"))
        excludePostCoordinated = Attribute(getter="excludePostCoordinated", setter="excludePostCoordinated", searcher=StringSearch("excludePostCoordinated"))
        excludedSystem = EmbeddedAttribute(type="ExpansionProfileExcludedSystem", getter="excludedSystem", setter="excludedSystem", searcher=StringSearch("excludedSystem"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        fixedVersion = EmbeddedAttribute(type="ExpansionProfileFixedVersion", getter="fixedVersion", setter="fixedVersion", searcher=StringSearch("fixedVersion"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        includeDefinition = Attribute(getter="includeDefinition", setter="includeDefinition", searcher=StringSearch("includeDefinition"))
        includeDesignations = Attribute(getter="includeDesignations", setter="includeDesignations", searcher=StringSearch("includeDesignations"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        limitedExpansion = Attribute(getter="limitedExpansion", setter="limitedExpansion", searcher=StringSearch("limitedExpansion"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ExpansionProfileDesignation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    exclude = fields.EmbeddedDocumentField("ExpansionProfileDesignationExclude", blank=True, required=False)
    include = fields.EmbeddedDocumentField("ExpansionProfileDesignationInclude", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        exclude = EmbeddedAttribute(type="ExpansionProfileDesignationExclude", getter="exclude", setter="exclude", searcher=StringSearch("exclude"))
        include = EmbeddedAttribute(type="ExpansionProfileDesignationInclude", getter="include", setter="include", searcher=StringSearch("include"))

class ExpansionProfileDesignationExclude(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    designation = fields.EmbeddedDocumentListField("ExpansionProfileDesignationExcludeDesignation", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        designation = EmbeddedAttribute(type="ExpansionProfileDesignationExcludeDesignation", getter="designation", setter="designation", searcher=StringSearch("designation"))

class ExpansionProfileDesignationExcludeDesignation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    use = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        use = EmbeddedAttribute(type="Coding", getter="use", setter="use", searcher=StringSearch("use"))

class ExpansionProfileDesignationInclude(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    designation = fields.EmbeddedDocumentListField("ExpansionProfileDesignationIncludeDesignation", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        designation = EmbeddedAttribute(type="ExpansionProfileDesignationIncludeDesignation", getter="designation", setter="designation", searcher=StringSearch("designation"))

class ExpansionProfileDesignationIncludeDesignation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    use = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        use = EmbeddedAttribute(type="Coding", getter="use", setter="use", searcher=StringSearch("use"))

class ExpansionProfileExcludedSystem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    system = fields.CharField(blank=False, required=True)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ExpansionProfileFixedVersion(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    mode = fields.CharField(blank=False, required=True)
    system = fields.CharField(blank=False, required=True)
    version = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ExplanationOfBenefit(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    accident = fields.EmbeddedDocumentField("ExplanationOfBenefitAccident", blank=True, required=False)
    addItem = fields.EmbeddedDocumentListField("ExplanationOfBenefitAddItem", blank=True, required=False)
    benefitBalance = fields.EmbeddedDocumentListField("ExplanationOfBenefitBenefitBalance", blank=True, required=False)
    billablePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    careTeam = fields.EmbeddedDocumentListField("ExplanationOfBenefitCareTeam", blank=True, required=False)
    claim = fields.ObjectIdField(blank=True, required=False)
    claimResponse = fields.ObjectIdField(blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    diagnosis = fields.EmbeddedDocumentListField("ExplanationOfBenefitDiagnosis", blank=True, required=False)
    disposition = fields.CharField(blank=True, required=False)
    employmentImpacted = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    enterer = fields.ObjectIdField(blank=True, required=False)
    facility = fields.ObjectIdField(blank=True, required=False)
    form = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    hospitalization = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    information = fields.EmbeddedDocumentListField("ExplanationOfBenefitInformation", blank=True, required=False)
    insurance = fields.EmbeddedDocumentField("ExplanationOfBenefitInsurance", blank=True, required=False)
    insurer = fields.ObjectIdField(blank=True, required=False)
    item = fields.EmbeddedDocumentListField("ExplanationOfBenefitItem", blank=True, required=False)
    organization = fields.ObjectIdField(blank=True, required=False)
    originalPrescription = fields.ObjectIdField(blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    patient = fields.ObjectIdField(blank=True, required=False)
    payee = fields.EmbeddedDocumentField("ExplanationOfBenefitPayee", blank=True, required=False)
    payment = fields.EmbeddedDocumentField("ExplanationOfBenefitPayment", blank=True, required=False)
    precedence = fields.IntegerField(blank=True, required=False)
    prescription = fields.ObjectIdField(blank=True, required=False)
    procedure = fields.EmbeddedDocumentListField("ExplanationOfBenefitProcedure", blank=True, required=False)
    processNote = fields.EmbeddedDocumentListField("ExplanationOfBenefitProcessNote", blank=True, required=False)
    provider = fields.ObjectIdField(blank=True, required=False)
    referral = fields.ObjectIdField(blank=True, required=False)
    related = fields.EmbeddedDocumentListField("ExplanationOfBenefitRelated", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    subType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    totalBenefit = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    totalCost = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    unallocDeductable = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        accident = EmbeddedAttribute(type="ExplanationOfBenefitAccident", getter="accident", setter="accident", searcher=StringSearch("accident"))
        addItem = EmbeddedAttribute(type="ExplanationOfBenefitAddItem", getter="addItem", setter="addItem", searcher=StringSearch("addItem"))
        benefitBalance = EmbeddedAttribute(type="ExplanationOfBenefitBenefitBalance", getter="benefitBalance", setter="benefitBalance", searcher=StringSearch("benefitBalance"))
        billablePeriod = EmbeddedAttribute(type="Period", getter="billablePeriod", setter="billablePeriod", searcher=StringSearch("billablePeriod"))
        careTeam = EmbeddedAttribute(type="ExplanationOfBenefitCareTeam", getter="careTeam", setter="careTeam", searcher=StringSearch("careTeam"))
        claim = ObjectIdReferenceAttribute({'Claim'}, ("claim", str), "claim", pk_setter="claim")
        claimResponse = ObjectIdReferenceAttribute({'ClaimResponse'}, ("claimResponse", str), "claimResponse", pk_setter="claimResponse")
        created = DateAttribute("created")
        diagnosis = EmbeddedAttribute(type="ExplanationOfBenefitDiagnosis", getter="diagnosis", setter="diagnosis", searcher=StringSearch("diagnosis"))
        disposition = Attribute(getter="disposition", setter="disposition", searcher=StringSearch("disposition"))
        employmentImpacted = EmbeddedAttribute(type="Period", getter="employmentImpacted", setter="employmentImpacted", searcher=StringSearch("employmentImpacted"))
        enterer = ObjectIdReferenceAttribute({'Practitioner'}, ("enterer", str), "enterer", pk_setter="enterer")
        facility = ObjectIdReferenceAttribute({'Location'}, ("facility", str), "facility", pk_setter="facility")
        form = EmbeddedAttribute(type="CodeableConcept", getter="form", setter="form", searcher=StringSearch("form"))
        hospitalization = EmbeddedAttribute(type="Period", getter="hospitalization", setter="hospitalization", searcher=StringSearch("hospitalization"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        information = EmbeddedAttribute(type="ExplanationOfBenefitInformation", getter="information", setter="information", searcher=StringSearch("information"))
        insurance = EmbeddedAttribute(type="ExplanationOfBenefitInsurance", getter="insurance", setter="insurance", searcher=StringSearch("insurance"))
        insurer = ObjectIdReferenceAttribute({'Organization'}, ("insurer", str), "insurer", pk_setter="insurer")
        item = EmbeddedAttribute(type="ExplanationOfBenefitItem", getter="item", setter="item", searcher=StringSearch("item"))
        organization = ObjectIdReferenceAttribute({'Organization'}, ("organization", str), "organization", pk_setter="organization")
        originalPrescription = ObjectIdReferenceAttribute({'MedicationRequest'}, ("originalPrescription", str), "originalPrescription", pk_setter="originalPrescription")
        outcome = EmbeddedAttribute(type="CodeableConcept", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        payee = EmbeddedAttribute(type="ExplanationOfBenefitPayee", getter="payee", setter="payee", searcher=StringSearch("payee"))
        payment = EmbeddedAttribute(type="ExplanationOfBenefitPayment", getter="payment", setter="payment", searcher=StringSearch("payment"))
        precedence = Attribute(getter="precedence", setter="precedence", searcher=NumericSearch("precedence"))
        prescription = ObjectIdReferenceAttribute({'VisionPrescription', 'MedicationRequest'}, ("prescription", str), "prescription", pk_setter="prescription")
        procedure = EmbeddedAttribute(type="ExplanationOfBenefitProcedure", getter="procedure", setter="procedure", searcher=StringSearch("procedure"))
        processNote = EmbeddedAttribute(type="ExplanationOfBenefitProcessNote", getter="processNote", setter="processNote", searcher=StringSearch("processNote"))
        provider = ObjectIdReferenceAttribute({'Practitioner'}, ("provider", str), "provider", pk_setter="provider")
        referral = ObjectIdReferenceAttribute({'ReferralRequest'}, ("referral", str), "referral", pk_setter="referral")
        related = EmbeddedAttribute(type="ExplanationOfBenefitRelated", getter="related", setter="related", searcher=StringSearch("related"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subType = EmbeddedAttribute(type="CodeableConcept", getter="subType", setter="subType", searcher=StringSearch("subType"))
        totalBenefit = EmbeddedAttribute(type="Money", getter="totalBenefit", setter="totalBenefit", searcher=StringSearch("totalBenefit"))
        totalCost = EmbeddedAttribute(type="Money", getter="totalCost", setter="totalCost", searcher=StringSearch("totalCost"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        unallocDeductable = EmbeddedAttribute(type="Money", getter="unallocDeductable", setter="unallocDeductable", searcher=StringSearch("unallocDeductable"))

class ExplanationOfBenefitAccident(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    locationAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    locationReference = fields.ObjectIdField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        date = DateAttribute("date")
        locationAddress = EmbeddedAttribute(type="Address", getter="locationAddress", setter="locationAddress", searcher=StringSearch("locationAddress"))
        locationReference = ObjectIdReferenceAttribute({'Location'}, ("locationReference", str), "locationReference", pk_setter="locationReference")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ExplanationOfBenefitAddItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ExplanationOfBenefitItemAdjudication", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    detail = fields.EmbeddedDocumentListField("ExplanationOfBenefitAddItemDetail", blank=True, required=False)
    fee = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    revenue = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequenceLinkId = fields.ListField(fields.IntegerField(), blank=True, required=False)
    service = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ExplanationOfBenefitItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        detail = EmbeddedAttribute(type="ExplanationOfBenefitAddItemDetail", getter="detail", setter="detail", searcher=StringSearch("detail"))
        fee = EmbeddedAttribute(type="Money", getter="fee", setter="fee", searcher=StringSearch("fee"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        revenue = EmbeddedAttribute(type="CodeableConcept", getter="revenue", setter="revenue", searcher=StringSearch("revenue"))
        sequenceLinkId = Attribute(getter="sequenceLinkId", setter="sequenceLinkId", searcher=NumericSearch("sequenceLinkId"))
        service = EmbeddedAttribute(type="CodeableConcept", getter="service", setter="service", searcher=StringSearch("service"))

class ExplanationOfBenefitAddItemDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ExplanationOfBenefitItemAdjudication", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    fee = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    revenue = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    service = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ExplanationOfBenefitItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        fee = EmbeddedAttribute(type="Money", getter="fee", setter="fee", searcher=StringSearch("fee"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        revenue = EmbeddedAttribute(type="CodeableConcept", getter="revenue", setter="revenue", searcher=StringSearch("revenue"))
        service = EmbeddedAttribute(type="CodeableConcept", getter="service", setter="service", searcher=StringSearch("service"))

class ExplanationOfBenefitBenefitBalance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    excluded = fields.BooleanField(blank=True, required=False)
    financial = fields.EmbeddedDocumentListField("ExplanationOfBenefitBenefitBalanceFinancial", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    network = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subCategory = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    term = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    unit = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        excluded = Attribute(getter="excluded", setter="excluded", searcher=StringSearch("excluded"))
        financial = EmbeddedAttribute(type="ExplanationOfBenefitBenefitBalanceFinancial", getter="financial", setter="financial", searcher=StringSearch("financial"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        network = EmbeddedAttribute(type="CodeableConcept", getter="network", setter="network", searcher=StringSearch("network"))
        subCategory = EmbeddedAttribute(type="CodeableConcept", getter="subCategory", setter="subCategory", searcher=StringSearch("subCategory"))
        term = EmbeddedAttribute(type="CodeableConcept", getter="term", setter="term", searcher=StringSearch("term"))
        unit = EmbeddedAttribute(type="CodeableConcept", getter="unit", setter="unit", searcher=StringSearch("unit"))

class ExplanationOfBenefitBenefitBalanceFinancial(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    allowedMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    allowedString = fields.CharField(blank=True, required=False)
    allowedUnsignedInt = fields.IntegerField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    usedMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    usedUnsignedInt = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        allowedMoney = EmbeddedAttribute(type="Money", getter="allowedMoney", setter="allowedMoney", searcher=StringSearch("allowedMoney"))
        allowedString = Attribute(getter="allowedString", setter="allowedString", searcher=StringSearch("allowedString"))
        allowedUnsignedInt = Attribute(getter="allowedUnsignedInt", setter="allowedUnsignedInt", searcher=NumericSearch("allowedUnsignedInt"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        usedMoney = EmbeddedAttribute(type="Money", getter="usedMoney", setter="usedMoney", searcher=StringSearch("usedMoney"))
        usedUnsignedInt = Attribute(getter="usedUnsignedInt", setter="usedUnsignedInt", searcher=NumericSearch("usedUnsignedInt"))

class ExplanationOfBenefitCareTeam(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    provider = fields.ObjectIdField(blank=False, required=True)
    qualification = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    responsible = fields.BooleanField(blank=True, required=False)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        provider = ObjectIdReferenceAttribute({'Practitioner', 'Organization'}, ("provider", str), "provider", pk_setter="provider")
        qualification = EmbeddedAttribute(type="CodeableConcept", getter="qualification", setter="qualification", searcher=StringSearch("qualification"))
        responsible = Attribute(getter="responsible", setter="responsible", searcher=StringSearch("responsible"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))

class ExplanationOfBenefitDiagnosis(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    diagnosisCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    diagnosisReference = fields.ObjectIdField(blank=False, required=True)
    packageCode = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        diagnosisCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="diagnosisCodeableConcept", setter="diagnosisCodeableConcept", searcher=StringSearch("diagnosisCodeableConcept"))
        diagnosisReference = ObjectIdReferenceAttribute({'Condition'}, ("diagnosisReference", str), "diagnosisReference", pk_setter="diagnosisReference")
        packageCode = EmbeddedAttribute(type="CodeableConcept", getter="packageCode", setter="packageCode", searcher=StringSearch("packageCode"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ExplanationOfBenefitInformation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    reason = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    timingDate = fields.DateTimeField(blank=True, required=False)
    timingPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueReference = fields.ObjectIdField(blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        reason = EmbeddedAttribute(type="Coding", getter="reason", setter="reason", searcher=StringSearch("reason"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        timingDate = DateAttribute("timingDate")
        timingPeriod = EmbeddedAttribute(type="Period", getter="timingPeriod", setter="timingPeriod", searcher=StringSearch("timingPeriod"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueReference = ObjectIdReferenceAttribute({'Resource'}, ("valueReference", str), "valueReference", pk_setter="valueReference")
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))

class ExplanationOfBenefitInsurance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    coverage = fields.ObjectIdField(blank=True, required=False)
    preAuthRef = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        coverage = ObjectIdReferenceAttribute({'Coverage'}, ("coverage", str), "coverage", pk_setter="coverage")
        preAuthRef = Attribute(getter="preAuthRef", setter="preAuthRef", searcher=StringSearch("preAuthRef"))

class ExplanationOfBenefitItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ExplanationOfBenefitItemAdjudication", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    careTeamLinkId = fields.ListField(fields.IntegerField(), blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    detail = fields.EmbeddedDocumentListField("ExplanationOfBenefitItemDetail", blank=True, required=False)
    diagnosisLinkId = fields.ListField(fields.IntegerField(), blank=True, required=False)
    encounter = fields.ObjectIdField(blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    informationLinkId = fields.ListField(fields.IntegerField(), blank=True, required=False)
    locationAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    locationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    locationReference = fields.ObjectIdField(blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    procedureLinkId = fields.ListField(fields.IntegerField(), blank=True, required=False)
    programCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    revenue = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    service = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    servicedDate = fields.DateTimeField(blank=True, required=False)
    servicedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    subSite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    udi = fields.ObjectIdField(blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ExplanationOfBenefitItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        careTeamLinkId = Attribute(getter="careTeamLinkId", setter="careTeamLinkId", searcher=NumericSearch("careTeamLinkId"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        detail = EmbeddedAttribute(type="ExplanationOfBenefitItemDetail", getter="detail", setter="detail", searcher=StringSearch("detail"))
        diagnosisLinkId = Attribute(getter="diagnosisLinkId", setter="diagnosisLinkId", searcher=NumericSearch("diagnosisLinkId"))
        encounter = ObjectIdReferenceAttribute({'Encounter'}, ("encounter", str), "encounter", pk_setter="encounter")
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        informationLinkId = Attribute(getter="informationLinkId", setter="informationLinkId", searcher=NumericSearch("informationLinkId"))
        locationAddress = EmbeddedAttribute(type="Address", getter="locationAddress", setter="locationAddress", searcher=StringSearch("locationAddress"))
        locationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="locationCodeableConcept", setter="locationCodeableConcept", searcher=StringSearch("locationCodeableConcept"))
        locationReference = ObjectIdReferenceAttribute({'Location'}, ("locationReference", str), "locationReference", pk_setter="locationReference")
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        procedureLinkId = Attribute(getter="procedureLinkId", setter="procedureLinkId", searcher=NumericSearch("procedureLinkId"))
        programCode = EmbeddedAttribute(type="CodeableConcept", getter="programCode", setter="programCode", searcher=StringSearch("programCode"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        revenue = EmbeddedAttribute(type="CodeableConcept", getter="revenue", setter="revenue", searcher=StringSearch("revenue"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        service = EmbeddedAttribute(type="CodeableConcept", getter="service", setter="service", searcher=StringSearch("service"))
        servicedDate = DateAttribute("servicedDate")
        servicedPeriod = EmbeddedAttribute(type="Period", getter="servicedPeriod", setter="servicedPeriod", searcher=StringSearch("servicedPeriod"))
        subSite = EmbeddedAttribute(type="CodeableConcept", getter="subSite", setter="subSite", searcher=StringSearch("subSite"))
        udi = ObjectIdReferenceAttribute({'Device'}, ("udi", str), "udi", pk_setter="udi")
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ExplanationOfBenefitItemAdjudication(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    reason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="Money", getter="amount", setter="amount", searcher=StringSearch("amount"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class ExplanationOfBenefitItemDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ExplanationOfBenefitItemAdjudication", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    programCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    revenue = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    service = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    subDetail = fields.EmbeddedDocumentListField("ExplanationOfBenefitItemDetailSubDetail", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    udi = fields.ObjectIdField(blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ExplanationOfBenefitItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        programCode = EmbeddedAttribute(type="CodeableConcept", getter="programCode", setter="programCode", searcher=StringSearch("programCode"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        revenue = EmbeddedAttribute(type="CodeableConcept", getter="revenue", setter="revenue", searcher=StringSearch("revenue"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        service = EmbeddedAttribute(type="CodeableConcept", getter="service", setter="service", searcher=StringSearch("service"))
        subDetail = EmbeddedAttribute(type="ExplanationOfBenefitItemDetailSubDetail", getter="subDetail", setter="subDetail", searcher=StringSearch("subDetail"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        udi = ObjectIdReferenceAttribute({'Device'}, ("udi", str), "udi", pk_setter="udi")
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ExplanationOfBenefitItemDetailSubDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjudication = fields.EmbeddedDocumentListField("ExplanationOfBenefitItemAdjudication", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    factor = fields.FloatField(blank=True, required=False)
    modifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    net = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    noteNumber = fields.ListField(fields.IntegerField(), blank=True, required=False)
    programCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    revenue = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sequence = fields.IntegerField(blank=False, required=True)
    service = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    udi = fields.ObjectIdField(blank=True, required=False)
    unitPrice = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjudication = EmbeddedAttribute(type="ExplanationOfBenefitItemAdjudication", getter="adjudication", setter="adjudication", searcher=StringSearch("adjudication"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        net = EmbeddedAttribute(type="Money", getter="net", setter="net", searcher=StringSearch("net"))
        noteNumber = Attribute(getter="noteNumber", setter="noteNumber", searcher=NumericSearch("noteNumber"))
        programCode = EmbeddedAttribute(type="CodeableConcept", getter="programCode", setter="programCode", searcher=StringSearch("programCode"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        revenue = EmbeddedAttribute(type="CodeableConcept", getter="revenue", setter="revenue", searcher=StringSearch("revenue"))
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))
        service = EmbeddedAttribute(type="CodeableConcept", getter="service", setter="service", searcher=StringSearch("service"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        udi = ObjectIdReferenceAttribute({'Device'}, ("udi", str), "udi", pk_setter="udi")
        unitPrice = EmbeddedAttribute(type="Money", getter="unitPrice", setter="unitPrice", searcher=StringSearch("unitPrice"))

class ExplanationOfBenefitPayee(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    party = fields.ObjectIdField(blank=True, required=False)
    resourceType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        party = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Practitioner', 'Organization'}, ("party", str), "party", pk_setter="party")
        resourceType = EmbeddedAttribute(type="CodeableConcept", getter="resourceType", setter="resourceType", searcher=StringSearch("resourceType"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ExplanationOfBenefitPayment(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    adjustment = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    adjustmentReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        adjustment = EmbeddedAttribute(type="Money", getter="adjustment", setter="adjustment", searcher=StringSearch("adjustment"))
        adjustmentReason = EmbeddedAttribute(type="CodeableConcept", getter="adjustmentReason", setter="adjustmentReason", searcher=StringSearch("adjustmentReason"))
        amount = EmbeddedAttribute(type="Money", getter="amount", setter="amount", searcher=StringSearch("amount"))
        date = DateAttribute("date")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ExplanationOfBenefitProcedure(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    procedureCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    procedureReference = fields.ObjectIdField(blank=False, required=True)
    sequence = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        date = DateAttribute("date")
        procedureCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="procedureCodeableConcept", setter="procedureCodeableConcept", searcher=StringSearch("procedureCodeableConcept"))
        procedureReference = ObjectIdReferenceAttribute({'Procedure'}, ("procedureReference", str), "procedureReference", pk_setter="procedureReference")
        sequence = Attribute(getter="sequence", setter="sequence", searcher=NumericSearch("sequence"))

class ExplanationOfBenefitProcessNote(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    language = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    number = fields.IntegerField(blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        language = EmbeddedAttribute(type="CodeableConcept", getter="language", setter="language", searcher=StringSearch("language"))
        number = Attribute(getter="number", setter="number", searcher=NumericSearch("number"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ExplanationOfBenefitRelated(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    claim = fields.ObjectIdField(blank=True, required=False)
    reference = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    relationship = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        claim = ObjectIdReferenceAttribute({'Claim'}, ("claim", str), "claim", pk_setter="claim")
        reference = EmbeddedAttribute(type="Identifier", getter="reference", setter="reference", searcher=StringSearch("reference"))
        relationship = EmbeddedAttribute(type="CodeableConcept", getter="relationship", setter="relationship", searcher=StringSearch("relationship"))







class FHIRReference(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    reference = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        reference = Attribute(getter="reference", setter="reference", searcher=StringSearch("reference"))

class FamilyMemberHistory(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    ageAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    ageRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    ageString = fields.CharField(blank=True, required=False)
    bornDate = fields.DateTimeField(blank=True, required=False)
    bornPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    bornString = fields.CharField(blank=True, required=False)
    condition = fields.EmbeddedDocumentListField("FamilyMemberHistoryCondition", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    deceasedAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    deceasedBoolean = fields.BooleanField(blank=True, required=False)
    deceasedDate = fields.DateTimeField(blank=True, required=False)
    deceasedRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    deceasedString = fields.CharField(blank=True, required=False)
    definition = fields.ObjectIdField(blank=True, required=False)
    estimatedAge = fields.BooleanField(blank=True, required=False)
    gender = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    notDone = fields.BooleanField(blank=True, required=False)
    notDoneReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    patient = fields.ObjectIdField(blank=False, required=True)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    relationship = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        ageAge = EmbeddedAttribute(type="Age", getter="ageAge", setter="ageAge", searcher=StringSearch("ageAge"))
        ageRange = EmbeddedAttribute(type="Range", getter="ageRange", setter="ageRange", searcher=StringSearch("ageRange"))
        ageString = Attribute(getter="ageString", setter="ageString", searcher=StringSearch("ageString"))
        bornDate = DateAttribute("bornDate")
        bornPeriod = EmbeddedAttribute(type="Period", getter="bornPeriod", setter="bornPeriod", searcher=StringSearch("bornPeriod"))
        bornString = Attribute(getter="bornString", setter="bornString", searcher=StringSearch("bornString"))
        condition = EmbeddedAttribute(type="FamilyMemberHistoryCondition", getter="condition", setter="condition", searcher=StringSearch("condition"))
        date = DateAttribute("date")
        deceasedAge = EmbeddedAttribute(type="Age", getter="deceasedAge", setter="deceasedAge", searcher=StringSearch("deceasedAge"))
        deceasedBoolean = Attribute(getter="deceasedBoolean", setter="deceasedBoolean", searcher=StringSearch("deceasedBoolean"))
        deceasedDate = DateAttribute("deceasedDate")
        deceasedRange = EmbeddedAttribute(type="Range", getter="deceasedRange", setter="deceasedRange", searcher=StringSearch("deceasedRange"))
        deceasedString = Attribute(getter="deceasedString", setter="deceasedString", searcher=StringSearch("deceasedString"))
        definition = ObjectIdReferenceAttribute({'PlanDefinition', 'Questionnaire'}, ("definition", str), "definition", pk_setter="definition")
        estimatedAge = Attribute(getter="estimatedAge", setter="estimatedAge", searcher=StringSearch("estimatedAge"))
        gender = Attribute(getter="gender", setter="gender", searcher=StringSearch("gender"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        notDone = Attribute(getter="notDone", setter="notDone", searcher=StringSearch("notDone"))
        notDoneReason = EmbeddedAttribute(type="CodeableConcept", getter="notDoneReason", setter="notDoneReason", searcher=StringSearch("notDoneReason"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = ObjectIdReferenceAttribute({'AllergyIntolerance', 'QuestionnaireResponse', 'Condition', 'Observation'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        relationship = EmbeddedAttribute(type="CodeableConcept", getter="relationship", setter="relationship", searcher=StringSearch("relationship"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class FamilyMemberHistoryCondition(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    onsetAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    onsetPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    onsetRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    onsetString = fields.CharField(blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        onsetAge = EmbeddedAttribute(type="Age", getter="onsetAge", setter="onsetAge", searcher=StringSearch("onsetAge"))
        onsetPeriod = EmbeddedAttribute(type="Period", getter="onsetPeriod", setter="onsetPeriod", searcher=StringSearch("onsetPeriod"))
        onsetRange = EmbeddedAttribute(type="Range", getter="onsetRange", setter="onsetRange", searcher=StringSearch("onsetRange"))
        onsetString = Attribute(getter="onsetString", setter="onsetString", searcher=StringSearch("onsetString"))
        outcome = EmbeddedAttribute(type="CodeableConcept", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))

class Flag(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    author = fields.ObjectIdField(blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    encounter = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        author = ObjectIdReferenceAttribute({'Patient', 'Device', 'Practitioner', 'Organization'}, ("author", str), "author", pk_setter="author")
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        encounter = ObjectIdReferenceAttribute({'Encounter'}, ("encounter", str), "encounter", pk_setter="encounter")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Practitioner', 'Patient', 'Medication', 'Location', 'Procedure', 'Organization', 'PlanDefinition', 'Group'}, ("subject", str), "subject", pk_setter="subject")

class Goal(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    addresses = fields.ObjectIdField(blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    description = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    expressedBy = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    outcomeCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    outcomeReference = fields.ObjectIdField(blank=True, required=False)
    priority = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    startCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    startDate = fields.DateTimeField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusDate = fields.DateTimeField(blank=True, required=False)
    statusReason = fields.CharField(blank=True, required=False)
    subject = fields.ObjectIdField(blank=True, required=False)
    target = fields.EmbeddedDocumentField("GoalTarget", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        addresses = ObjectIdReferenceAttribute({'MedicationStatement', 'ProcedureRequest', 'Observation', 'NutritionOrder', 'Condition', 'RiskAssessment'}, ("addresses", str), "addresses", pk_setter="addresses")
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        description = EmbeddedAttribute(type="CodeableConcept", getter="description", setter="description", searcher=StringSearch("description"))
        expressedBy = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Practitioner'}, ("expressedBy", str), "expressedBy", pk_setter="expressedBy")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        outcomeCode = EmbeddedAttribute(type="CodeableConcept", getter="outcomeCode", setter="outcomeCode", searcher=StringSearch("outcomeCode"))
        outcomeReference = ObjectIdReferenceAttribute({'Observation'}, ("outcomeReference", str), "outcomeReference", pk_setter="outcomeReference")
        priority = EmbeddedAttribute(type="CodeableConcept", getter="priority", setter="priority", searcher=StringSearch("priority"))
        startCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="startCodeableConcept", setter="startCodeableConcept", searcher=StringSearch("startCodeableConcept"))
        startDate = DateAttribute("startDate")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusDate = DateAttribute("statusDate")
        statusReason = Attribute(getter="statusReason", setter="statusReason", searcher=StringSearch("statusReason"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group', 'Organization'}, ("subject", str), "subject", pk_setter="subject")
        target = EmbeddedAttribute(type="GoalTarget", getter="target", setter="target", searcher=StringSearch("target"))

class GoalTarget(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    detailCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    detailQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    detailRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    dueDate = fields.DateTimeField(blank=True, required=False)
    dueDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    measure = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        detailCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="detailCodeableConcept", setter="detailCodeableConcept", searcher=StringSearch("detailCodeableConcept"))
        detailQuantity = EmbeddedAttribute(type="Quantity", getter="detailQuantity", setter="detailQuantity", searcher=StringSearch("detailQuantity"))
        detailRange = EmbeddedAttribute(type="Range", getter="detailRange", setter="detailRange", searcher=StringSearch("detailRange"))
        dueDate = DateAttribute("dueDate")
        dueDuration = EmbeddedAttribute(type="Duration", getter="dueDuration", setter="dueDuration", searcher=StringSearch("dueDuration"))
        measure = EmbeddedAttribute(type="CodeableConcept", getter="measure", setter="measure", searcher=StringSearch("measure"))

class GraphDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    link = fields.EmbeddedDocumentListField("GraphDefinitionLink", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    profile = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    start = fields.CharField(blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        link = EmbeddedAttribute(type="GraphDefinitionLink", getter="link", setter="link", searcher=StringSearch("link"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        profile = Attribute(getter="profile", setter="profile", searcher=StringSearch("profile"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        start = Attribute(getter="start", setter="start", searcher=StringSearch("start"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class GraphDefinitionLink(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    max = fields.CharField(blank=True, required=False)
    min = fields.IntegerField(blank=True, required=False)
    path = fields.CharField(blank=False, required=True)
    sliceName = fields.CharField(blank=True, required=False)
    target = fields.EmbeddedDocumentListField("GraphDefinitionLinkTarget", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        max = Attribute(getter="max", setter="max", searcher=StringSearch("max"))
        min = Attribute(getter="min", setter="min", searcher=NumericSearch("min"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))
        sliceName = Attribute(getter="sliceName", setter="sliceName", searcher=StringSearch("sliceName"))
        target = EmbeddedAttribute(type="GraphDefinitionLinkTarget", getter="target", setter="target", searcher=StringSearch("target"))

class GraphDefinitionLinkTarget(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    compartment = fields.EmbeddedDocumentListField("GraphDefinitionLinkTargetCompartment", blank=True, required=False)
    link = fields.EmbeddedDocumentListField("GraphDefinitionLink", blank=True, required=False)
    profile = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        compartment = EmbeddedAttribute(type="GraphDefinitionLinkTargetCompartment", getter="compartment", setter="compartment", searcher=StringSearch("compartment"))
        link = EmbeddedAttribute(type="GraphDefinitionLink", getter="link", setter="link", searcher=StringSearch("link"))
        profile = Attribute(getter="profile", setter="profile", searcher=StringSearch("profile"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class GraphDefinitionLinkTargetCompartment(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    expression = fields.CharField(blank=True, required=False)
    rule = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        rule = Attribute(getter="rule", setter="rule", searcher=StringSearch("rule"))

class Group(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    actual = fields.BooleanField(blank=False, required=True)
    characteristic = fields.EmbeddedDocumentListField("GroupCharacteristic", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    member = fields.EmbeddedDocumentListField("GroupMember", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    quantity = fields.IntegerField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        actual = Attribute(getter="actual", setter="actual", searcher=StringSearch("actual"))
        characteristic = EmbeddedAttribute(type="GroupCharacteristic", getter="characteristic", setter="characteristic", searcher=StringSearch("characteristic"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        member = EmbeddedAttribute(type="GroupMember", getter="member", setter="member", searcher=StringSearch("member"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        quantity = Attribute(getter="quantity", setter="quantity", searcher=NumericSearch("quantity"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class GroupCharacteristic(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    exclude = fields.BooleanField(blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=False, required=True)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=False, required=True)
    valueRange = fields.EmbeddedDocumentField("Range", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        exclude = Attribute(getter="exclude", setter="exclude", searcher=StringSearch("exclude"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))

class GroupMember(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    entity = fields.ObjectIdField(blank=False, required=True)
    inactive = fields.BooleanField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        entity = ObjectIdReferenceAttribute({'Practitioner', 'Patient', 'Medication', 'Substance', 'Device'}, ("entity", str), "entity", pk_setter="entity")
        inactive = Attribute(getter="inactive", setter="inactive", searcher=StringSearch("inactive"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))

class GuidanceResponse(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    dataRequirement = fields.EmbeddedDocumentListField("DataRequirement", blank=True, required=False)
    evaluationMessage = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    module = fields.ObjectIdField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    outputParameters = fields.ObjectIdField(blank=True, required=False)
    performer = fields.ObjectIdField(blank=True, required=False)
    reasonCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    requestId = fields.CharField(blank=True, required=False)
    result = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        dataRequirement = EmbeddedAttribute(type="DataRequirement", getter="dataRequirement", setter="dataRequirement", searcher=StringSearch("dataRequirement"))
        evaluationMessage = ObjectIdReferenceAttribute({'OperationOutcome'}, ("evaluationMessage", str), "evaluationMessage", pk_setter="evaluationMessage")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        module = ObjectIdReferenceAttribute({'ServiceDefinition'}, ("module", str), "module", pk_setter="module")
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        outputParameters = ObjectIdReferenceAttribute({'Parameters'}, ("outputParameters", str), "outputParameters", pk_setter="outputParameters")
        performer = ObjectIdReferenceAttribute({'Device'}, ("performer", str), "performer", pk_setter="performer")
        reasonCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="reasonCodeableConcept", setter="reasonCodeableConcept", searcher=StringSearch("reasonCodeableConcept"))
        reasonReference = ObjectIdReferenceAttribute({'Resource'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        requestId = Attribute(getter="requestId", setter="requestId", searcher=StringSearch("requestId"))
        result = ObjectIdReferenceAttribute({'CarePlan', 'RequestGroup'}, ("result", str), "result", pk_setter="result")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")

class HealthcareService(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    appointmentRequired = fields.BooleanField(blank=True, required=False)
    availabilityExceptions = fields.CharField(blank=True, required=False)
    availableTime = fields.EmbeddedDocumentListField("HealthcareServiceAvailableTime", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    characteristic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    coverageArea = fields.ObjectIdField(blank=True, required=False)
    eligibility = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    eligibilityNote = fields.CharField(blank=True, required=False)
    endpoint = fields.ObjectIdField(blank=True, required=False)
    extraDetails = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    location = fields.ObjectIdField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    notAvailable = fields.EmbeddedDocumentListField("HealthcareServiceNotAvailable", blank=True, required=False)
    photo = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    programName = fields.ListField(fields.CharField(), blank=True, required=False)
    providedBy = fields.ObjectIdField(blank=True, required=False)
    referralMethod = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    serviceProvisionCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    specialty = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        appointmentRequired = Attribute(getter="appointmentRequired", setter="appointmentRequired", searcher=StringSearch("appointmentRequired"))
        availabilityExceptions = Attribute(getter="availabilityExceptions", setter="availabilityExceptions", searcher=StringSearch("availabilityExceptions"))
        availableTime = EmbeddedAttribute(type="HealthcareServiceAvailableTime", getter="availableTime", setter="availableTime", searcher=StringSearch("availableTime"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        characteristic = EmbeddedAttribute(type="CodeableConcept", getter="characteristic", setter="characteristic", searcher=StringSearch("characteristic"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        coverageArea = ObjectIdReferenceAttribute({'Location'}, ("coverageArea", str), "coverageArea", pk_setter="coverageArea")
        eligibility = EmbeddedAttribute(type="CodeableConcept", getter="eligibility", setter="eligibility", searcher=StringSearch("eligibility"))
        eligibilityNote = Attribute(getter="eligibilityNote", setter="eligibilityNote", searcher=StringSearch("eligibilityNote"))
        endpoint = ObjectIdReferenceAttribute({'Endpoint'}, ("endpoint", str), "endpoint", pk_setter="endpoint")
        extraDetails = Attribute(getter="extraDetails", setter="extraDetails", searcher=StringSearch("extraDetails"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        location = ObjectIdReferenceAttribute({'Location'}, ("location", str), "location", pk_setter="location")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        notAvailable = EmbeddedAttribute(type="HealthcareServiceNotAvailable", getter="notAvailable", setter="notAvailable", searcher=StringSearch("notAvailable"))
        photo = EmbeddedAttribute(type="Attachment", getter="photo", setter="photo", searcher=StringSearch("photo"))
        programName = Attribute(getter="programName", setter="programName", searcher=StringSearch("programName"))
        providedBy = ObjectIdReferenceAttribute({'Organization'}, ("providedBy", str), "providedBy", pk_setter="providedBy")
        referralMethod = EmbeddedAttribute(type="CodeableConcept", getter="referralMethod", setter="referralMethod", searcher=StringSearch("referralMethod"))
        serviceProvisionCode = EmbeddedAttribute(type="CodeableConcept", getter="serviceProvisionCode", setter="serviceProvisionCode", searcher=StringSearch("serviceProvisionCode"))
        specialty = EmbeddedAttribute(type="CodeableConcept", getter="specialty", setter="specialty", searcher=StringSearch("specialty"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class HealthcareServiceAvailableTime(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    allDay = fields.BooleanField(blank=True, required=False)
    availableEndTime = fields.DateTimeField(blank=True, required=False)
    availableStartTime = fields.DateTimeField(blank=True, required=False)
    daysOfWeek = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        allDay = Attribute(getter="allDay", setter="allDay", searcher=StringSearch("allDay"))
        availableEndTime = DateAttribute("availableEndTime")
        availableStartTime = DateAttribute("availableStartTime")
        daysOfWeek = Attribute(getter="daysOfWeek", setter="daysOfWeek", searcher=StringSearch("daysOfWeek"))

class HealthcareServiceNotAvailable(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=False, required=True)
    during = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        during = EmbeddedAttribute(type="Period", getter="during", setter="during", searcher=StringSearch("during"))

class HumanName(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    family = fields.CharField(blank=True, required=False)
    given = fields.ListField(fields.CharField(), blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    prefix = fields.ListField(fields.CharField(), blank=True, required=False)
    suffix = fields.ListField(fields.CharField(), blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    use = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        family = Attribute(getter="family", setter="family", searcher=StringSearch("family"))
        given = Attribute(getter="given", setter="given", searcher=StringSearch("given"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        prefix = Attribute(getter="prefix", setter="prefix", searcher=StringSearch("prefix"))
        suffix = Attribute(getter="suffix", setter="suffix", searcher=StringSearch("suffix"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))

class Identifier(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    assigner = fields.ObjectIdField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    use = fields.CharField(blank=True, required=False)
    value = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        assigner = ObjectIdReferenceAttribute({'Organization'}, ("assigner", str), "assigner", pk_setter="assigner")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class ImagingManifest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    author = fields.ObjectIdField(blank=True, required=False)
    authoringTime = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    patient = fields.ObjectIdField(blank=False, required=True)
    study = fields.EmbeddedDocumentListField("ImagingManifestStudy", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        author = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("author", str), "author", pk_setter="author")
        authoringTime = DateAttribute("authoringTime")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        study = EmbeddedAttribute(type="ImagingManifestStudy", getter="study", setter="study", searcher=StringSearch("study"))

class ImagingManifestStudy(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    endpoint = fields.ObjectIdField(blank=True, required=False)
    imagingStudy = fields.ObjectIdField(blank=True, required=False)
    series = fields.EmbeddedDocumentListField("ImagingManifestStudySeries", blank=False, required=True)
    uid = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        endpoint = ObjectIdReferenceAttribute({'Endpoint'}, ("endpoint", str), "endpoint", pk_setter="endpoint")
        imagingStudy = ObjectIdReferenceAttribute({'ImagingStudy'}, ("imagingStudy", str), "imagingStudy", pk_setter="imagingStudy")
        series = EmbeddedAttribute(type="ImagingManifestStudySeries", getter="series", setter="series", searcher=StringSearch("series"))
        uid = Attribute(getter="uid", setter="uid", searcher=StringSearch("uid"))

class ImagingManifestStudySeries(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    endpoint = fields.ObjectIdField(blank=True, required=False)
    instance = fields.EmbeddedDocumentListField("ImagingManifestStudySeriesInstance", blank=False, required=True)
    uid = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        endpoint = ObjectIdReferenceAttribute({'Endpoint'}, ("endpoint", str), "endpoint", pk_setter="endpoint")
        instance = EmbeddedAttribute(type="ImagingManifestStudySeriesInstance", getter="instance", setter="instance", searcher=StringSearch("instance"))
        uid = Attribute(getter="uid", setter="uid", searcher=StringSearch("uid"))

class ImagingManifestStudySeriesInstance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    sopClass = fields.CharField(blank=False, required=True)
    uid = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        sopClass = Attribute(getter="sopClass", setter="sopClass", searcher=StringSearch("sopClass"))
        uid = Attribute(getter="uid", setter="uid", searcher=StringSearch("uid"))

class ImagingStudy(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    accession = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    availability = fields.CharField(blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    endpoint = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    interpreter = fields.ObjectIdField(blank=True, required=False)
    modalityList = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    numberOfInstances = fields.IntegerField(blank=True, required=False)
    numberOfSeries = fields.IntegerField(blank=True, required=False)
    patient = fields.ObjectIdField(blank=False, required=True)
    procedureCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    procedureReference = fields.ObjectIdField(blank=True, required=False)
    reason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    referrer = fields.ObjectIdField(blank=True, required=False)
    series = fields.EmbeddedDocumentListField("ImagingStudySeries", blank=True, required=False)
    started = fields.DateTimeField(blank=True, required=False)
    uid = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        accession = EmbeddedAttribute(type="Identifier", getter="accession", setter="accession", searcher=StringSearch("accession"))
        availability = Attribute(getter="availability", setter="availability", searcher=StringSearch("availability"))
        basedOn = ObjectIdReferenceAttribute({'CarePlan', 'ProcedureRequest', 'ReferralRequest'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        endpoint = ObjectIdReferenceAttribute({'Endpoint'}, ("endpoint", str), "endpoint", pk_setter="endpoint")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        interpreter = ObjectIdReferenceAttribute({'Practitioner'}, ("interpreter", str), "interpreter", pk_setter="interpreter")
        modalityList = EmbeddedAttribute(type="Coding", getter="modalityList", setter="modalityList", searcher=StringSearch("modalityList"))
        numberOfInstances = Attribute(getter="numberOfInstances", setter="numberOfInstances", searcher=NumericSearch("numberOfInstances"))
        numberOfSeries = Attribute(getter="numberOfSeries", setter="numberOfSeries", searcher=NumericSearch("numberOfSeries"))
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        procedureCode = EmbeddedAttribute(type="CodeableConcept", getter="procedureCode", setter="procedureCode", searcher=StringSearch("procedureCode"))
        procedureReference = ObjectIdReferenceAttribute({'Procedure'}, ("procedureReference", str), "procedureReference", pk_setter="procedureReference")
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        referrer = ObjectIdReferenceAttribute({'Practitioner'}, ("referrer", str), "referrer", pk_setter="referrer")
        series = EmbeddedAttribute(type="ImagingStudySeries", getter="series", setter="series", searcher=StringSearch("series"))
        started = DateAttribute("started")
        uid = Attribute(getter="uid", setter="uid", searcher=StringSearch("uid"))

class ImagingStudySeries(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    availability = fields.CharField(blank=True, required=False)
    bodySite = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    endpoint = fields.ObjectIdField(blank=True, required=False)
    instance = fields.EmbeddedDocumentListField("ImagingStudySeriesInstance", blank=True, required=False)
    laterality = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    modality = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    number = fields.IntegerField(blank=True, required=False)
    numberOfInstances = fields.IntegerField(blank=True, required=False)
    performer = fields.ObjectIdField(blank=True, required=False)
    started = fields.DateTimeField(blank=True, required=False)
    uid = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        availability = Attribute(getter="availability", setter="availability", searcher=StringSearch("availability"))
        bodySite = EmbeddedAttribute(type="Coding", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        endpoint = ObjectIdReferenceAttribute({'Endpoint'}, ("endpoint", str), "endpoint", pk_setter="endpoint")
        instance = EmbeddedAttribute(type="ImagingStudySeriesInstance", getter="instance", setter="instance", searcher=StringSearch("instance"))
        laterality = EmbeddedAttribute(type="Coding", getter="laterality", setter="laterality", searcher=StringSearch("laterality"))
        modality = EmbeddedAttribute(type="Coding", getter="modality", setter="modality", searcher=StringSearch("modality"))
        number = Attribute(getter="number", setter="number", searcher=NumericSearch("number"))
        numberOfInstances = Attribute(getter="numberOfInstances", setter="numberOfInstances", searcher=NumericSearch("numberOfInstances"))
        performer = ObjectIdReferenceAttribute({'Practitioner'}, ("performer", str), "performer", pk_setter="performer")
        started = DateAttribute("started")
        uid = Attribute(getter="uid", setter="uid", searcher=StringSearch("uid"))

class ImagingStudySeriesInstance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    number = fields.IntegerField(blank=True, required=False)
    sopClass = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    uid = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        number = Attribute(getter="number", setter="number", searcher=NumericSearch("number"))
        sopClass = Attribute(getter="sopClass", setter="sopClass", searcher=StringSearch("sopClass"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        uid = Attribute(getter="uid", setter="uid", searcher=StringSearch("uid"))

class Immunization(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    doseQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    encounter = fields.ObjectIdField(blank=True, required=False)
    expirationDate = fields.DateTimeField(blank=True, required=False)
    explanation = fields.EmbeddedDocumentField("ImmunizationExplanation", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    location = fields.ObjectIdField(blank=True, required=False)
    lotNumber = fields.CharField(blank=True, required=False)
    manufacturer = fields.ObjectIdField(blank=True, required=False)
    notGiven = fields.BooleanField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    patient = fields.ObjectIdField(blank=False, required=True)
    practitioner = fields.EmbeddedDocumentListField("ImmunizationPractitioner", blank=True, required=False)
    primarySource = fields.BooleanField(blank=False, required=True)
    reaction = fields.EmbeddedDocumentListField("ImmunizationReaction", blank=True, required=False)
    reportOrigin = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    route = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    site = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    vaccinationProtocol = fields.EmbeddedDocumentListField("ImmunizationVaccinationProtocol", blank=True, required=False)
    vaccineCode = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        date = DateAttribute("date")
        doseQuantity = EmbeddedAttribute(type="Quantity", getter="doseQuantity", setter="doseQuantity", searcher=StringSearch("doseQuantity"))
        encounter = ObjectIdReferenceAttribute({'Encounter'}, ("encounter", str), "encounter", pk_setter="encounter")
        expirationDate = DateAttribute("expirationDate")
        explanation = EmbeddedAttribute(type="ImmunizationExplanation", getter="explanation", setter="explanation", searcher=StringSearch("explanation"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        location = ObjectIdReferenceAttribute({'Location'}, ("location", str), "location", pk_setter="location")
        lotNumber = Attribute(getter="lotNumber", setter="lotNumber", searcher=StringSearch("lotNumber"))
        manufacturer = ObjectIdReferenceAttribute({'Organization'}, ("manufacturer", str), "manufacturer", pk_setter="manufacturer")
        notGiven = Attribute(getter="notGiven", setter="notGiven", searcher=StringSearch("notGiven"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        practitioner = EmbeddedAttribute(type="ImmunizationPractitioner", getter="practitioner", setter="practitioner", searcher=StringSearch("practitioner"))
        primarySource = Attribute(getter="primarySource", setter="primarySource", searcher=StringSearch("primarySource"))
        reaction = EmbeddedAttribute(type="ImmunizationReaction", getter="reaction", setter="reaction", searcher=StringSearch("reaction"))
        reportOrigin = EmbeddedAttribute(type="CodeableConcept", getter="reportOrigin", setter="reportOrigin", searcher=StringSearch("reportOrigin"))
        route = EmbeddedAttribute(type="CodeableConcept", getter="route", setter="route", searcher=StringSearch("route"))
        site = EmbeddedAttribute(type="CodeableConcept", getter="site", setter="site", searcher=StringSearch("site"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        vaccinationProtocol = EmbeddedAttribute(type="ImmunizationVaccinationProtocol", getter="vaccinationProtocol", setter="vaccinationProtocol", searcher=StringSearch("vaccinationProtocol"))
        vaccineCode = EmbeddedAttribute(type="CodeableConcept", getter="vaccineCode", setter="vaccineCode", searcher=StringSearch("vaccineCode"))

class ImmunizationExplanation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    reason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonNotGiven = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        reasonNotGiven = EmbeddedAttribute(type="CodeableConcept", getter="reasonNotGiven", setter="reasonNotGiven", searcher=StringSearch("reasonNotGiven"))

class ImmunizationPractitioner(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.ObjectIdField(blank=False, required=True)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = ObjectIdReferenceAttribute({'Practitioner'}, ("actor", str), "actor", pk_setter="actor")
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class ImmunizationReaction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    detail = fields.ObjectIdField(blank=True, required=False)
    reported = fields.BooleanField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        date = DateAttribute("date")
        detail = ObjectIdReferenceAttribute({'Observation'}, ("detail", str), "detail", pk_setter="detail")
        reported = Attribute(getter="reported", setter="reported", searcher=StringSearch("reported"))

class ImmunizationRecommendation(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    patient = fields.ObjectIdField(blank=False, required=True)
    recommendation = fields.EmbeddedDocumentListField("ImmunizationRecommendationRecommendation", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        recommendation = EmbeddedAttribute(type="ImmunizationRecommendationRecommendation", getter="recommendation", setter="recommendation", searcher=StringSearch("recommendation"))

class ImmunizationRecommendationRecommendation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    date = fields.DateTimeField(blank=False, required=True)
    dateCriterion = fields.EmbeddedDocumentListField("ImmunizationRecommendationRecommendationDateCriterion", blank=True, required=False)
    doseNumber = fields.IntegerField(blank=True, required=False)
    forecastStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    protocol = fields.EmbeddedDocumentField("ImmunizationRecommendationRecommendationProtocol", blank=True, required=False)
    supportingImmunization = fields.ObjectIdField(blank=True, required=False)
    supportingPatientInformation = fields.ObjectIdField(blank=True, required=False)
    targetDisease = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    vaccineCode = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        date = DateAttribute("date")
        dateCriterion = EmbeddedAttribute(type="ImmunizationRecommendationRecommendationDateCriterion", getter="dateCriterion", setter="dateCriterion", searcher=StringSearch("dateCriterion"))
        doseNumber = Attribute(getter="doseNumber", setter="doseNumber", searcher=NumericSearch("doseNumber"))
        forecastStatus = EmbeddedAttribute(type="CodeableConcept", getter="forecastStatus", setter="forecastStatus", searcher=StringSearch("forecastStatus"))
        protocol = EmbeddedAttribute(type="ImmunizationRecommendationRecommendationProtocol", getter="protocol", setter="protocol", searcher=StringSearch("protocol"))
        supportingImmunization = ObjectIdReferenceAttribute({'Immunization'}, ("supportingImmunization", str), "supportingImmunization", pk_setter="supportingImmunization")
        supportingPatientInformation = ObjectIdReferenceAttribute({'AllergyIntolerance', 'Observation'}, ("supportingPatientInformation", str), "supportingPatientInformation", pk_setter="supportingPatientInformation")
        targetDisease = EmbeddedAttribute(type="CodeableConcept", getter="targetDisease", setter="targetDisease", searcher=StringSearch("targetDisease"))
        vaccineCode = EmbeddedAttribute(type="CodeableConcept", getter="vaccineCode", setter="vaccineCode", searcher=StringSearch("vaccineCode"))

class ImmunizationRecommendationRecommendationDateCriterion(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    value = fields.DateTimeField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        value = DateAttribute("value")

class ImmunizationRecommendationRecommendationProtocol(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    authority = fields.ObjectIdField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    doseSequence = fields.IntegerField(blank=True, required=False)
    series = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        authority = ObjectIdReferenceAttribute({'Organization'}, ("authority", str), "authority", pk_setter="authority")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        doseSequence = Attribute(getter="doseSequence", setter="doseSequence", searcher=NumericSearch("doseSequence"))
        series = Attribute(getter="series", setter="series", searcher=StringSearch("series"))

class ImmunizationVaccinationProtocol(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    authority = fields.ObjectIdField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    doseSequence = fields.IntegerField(blank=True, required=False)
    doseStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    doseStatusReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    series = fields.CharField(blank=True, required=False)
    seriesDoses = fields.IntegerField(blank=True, required=False)
    targetDisease = fields.EmbeddedDocumentListField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        authority = ObjectIdReferenceAttribute({'Organization'}, ("authority", str), "authority", pk_setter="authority")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        doseSequence = Attribute(getter="doseSequence", setter="doseSequence", searcher=NumericSearch("doseSequence"))
        doseStatus = EmbeddedAttribute(type="CodeableConcept", getter="doseStatus", setter="doseStatus", searcher=StringSearch("doseStatus"))
        doseStatusReason = EmbeddedAttribute(type="CodeableConcept", getter="doseStatusReason", setter="doseStatusReason", searcher=StringSearch("doseStatusReason"))
        series = Attribute(getter="series", setter="series", searcher=StringSearch("series"))
        seriesDoses = Attribute(getter="seriesDoses", setter="seriesDoses", searcher=NumericSearch("seriesDoses"))
        targetDisease = EmbeddedAttribute(type="CodeableConcept", getter="targetDisease", setter="targetDisease", searcher=StringSearch("targetDisease"))

class ImplementationGuide(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    binary = fields.ListField(fields.CharField(), blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    dependency = fields.EmbeddedDocumentListField("ImplementationGuideDependency", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    fhirVersion = fields.CharField(blank=True, required=False)
    global_ = fields.EmbeddedDocumentListField("ImplementationGuideGlobal", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    package = fields.EmbeddedDocumentListField("ImplementationGuidePackage", blank=True, required=False)
    page = fields.EmbeddedDocumentField("ImplementationGuidePage", blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=False, required=True)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        binary = Attribute(getter="binary", setter="binary", searcher=StringSearch("binary"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        dependency = EmbeddedAttribute(type="ImplementationGuideDependency", getter="dependency", setter="dependency", searcher=StringSearch("dependency"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        fhirVersion = Attribute(getter="fhirVersion", setter="fhirVersion", searcher=StringSearch("fhirVersion"))
        global_ = EmbeddedAttribute(type="ImplementationGuideGlobal", getter="global_", setter="global_", searcher=StringSearch("global_"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        package = EmbeddedAttribute(type="ImplementationGuidePackage", getter="package", setter="package", searcher=StringSearch("package"))
        page = EmbeddedAttribute(type="ImplementationGuidePage", getter="page", setter="page", searcher=StringSearch("page"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ImplementationGuideDependency(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    uri = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        uri = Attribute(getter="uri", setter="uri", searcher=StringSearch("uri"))

class ImplementationGuideGlobal(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    profile = fields.ObjectIdField(blank=False, required=True)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        profile = ObjectIdReferenceAttribute({'StructureDefinition'}, ("profile", str), "profile", pk_setter="profile")
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class ImplementationGuidePackage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    resource = fields.EmbeddedDocumentListField("ImplementationGuidePackageResource", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        resource = EmbeddedAttribute(type="ImplementationGuidePackageResource", getter="resource", setter="resource", searcher=StringSearch("resource"))

class ImplementationGuidePackageResource(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    acronym = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    example = fields.BooleanField(blank=False, required=True)
    exampleFor = fields.ObjectIdField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    sourceReference = fields.ObjectIdField(blank=False, required=True)
    sourceUri = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        acronym = Attribute(getter="acronym", setter="acronym", searcher=StringSearch("acronym"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        example = Attribute(getter="example", setter="example", searcher=StringSearch("example"))
        exampleFor = ObjectIdReferenceAttribute({'StructureDefinition'}, ("exampleFor", str), "exampleFor", pk_setter="exampleFor")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        sourceReference = ObjectIdReferenceAttribute({'Resource'}, ("sourceReference", str), "sourceReference", pk_setter="sourceReference")
        sourceUri = Attribute(getter="sourceUri", setter="sourceUri", searcher=StringSearch("sourceUri"))

class ImplementationGuidePage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    format = fields.CharField(blank=True, required=False)
    kind = fields.CharField(blank=False, required=True)
    package = fields.ListField(fields.CharField(), blank=True, required=False)
    page = fields.EmbeddedDocumentListField("ImplementationGuidePage", blank=True, required=False)
    source = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=False, required=True)
    type = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        format = Attribute(getter="format", setter="format", searcher=StringSearch("format"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))
        package = Attribute(getter="package", setter="package", searcher=StringSearch("package"))
        page = EmbeddedAttribute(type="ImplementationGuidePage", getter="page", setter="page", searcher=StringSearch("page"))
        source = Attribute(getter="source", setter="source", searcher=StringSearch("source"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class Library(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    content = fields.EmbeddedDocumentListField("Attachment", blank=True, required=False)
    contributor = fields.EmbeddedDocumentListField("Contributor", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    dataRequirement = fields.EmbeddedDocumentListField("DataRequirement", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    parameter = fields.EmbeddedDocumentListField("ParameterDefinition", blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    usage = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        content = EmbeddedAttribute(type="Attachment", getter="content", setter="content", searcher=StringSearch("content"))
        contributor = EmbeddedAttribute(type="Contributor", getter="contributor", setter="contributor", searcher=StringSearch("contributor"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        dataRequirement = EmbeddedAttribute(type="DataRequirement", getter="dataRequirement", setter="dataRequirement", searcher=StringSearch("dataRequirement"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        parameter = EmbeddedAttribute(type="ParameterDefinition", getter="parameter", setter="parameter", searcher=StringSearch("parameter"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        usage = Attribute(getter="usage", setter="usage", searcher=StringSearch("usage"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class Linkage(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    author = fields.ObjectIdField(blank=True, required=False)
    item = fields.EmbeddedDocumentListField("LinkageItem", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        author = ObjectIdReferenceAttribute({'Practitioner', 'Organization'}, ("author", str), "author", pk_setter="author")
        item = EmbeddedAttribute(type="LinkageItem", getter="item", setter="item", searcher=StringSearch("item"))

class LinkageItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    # resource = fields.ReferenceField(, blank=False, required=True)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        # resource = ObjectIdReferenceAttribute(getter="resource", setter="resource", searcher=StringSearch("resource"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class List(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    emptyReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    encounter = fields.ObjectIdField(blank=True, required=False)
    entry = fields.EmbeddedDocumentListField("ListEntry", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    mode = fields.CharField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    orderedBy = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    source = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        date = DateAttribute("date")
        emptyReason = EmbeddedAttribute(type="CodeableConcept", getter="emptyReason", setter="emptyReason", searcher=StringSearch("emptyReason"))
        encounter = ObjectIdReferenceAttribute({'Encounter'}, ("encounter", str), "encounter", pk_setter="encounter")
        entry = EmbeddedAttribute(type="ListEntry", getter="entry", setter="entry", searcher=StringSearch("entry"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        orderedBy = EmbeddedAttribute(type="CodeableConcept", getter="orderedBy", setter="orderedBy", searcher=StringSearch("orderedBy"))
        source = ObjectIdReferenceAttribute({'Patient', 'Device', 'Practitioner'}, ("source", str), "source", pk_setter="source")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group', 'Device', 'Location'}, ("subject", str), "subject", pk_setter="subject")
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))

class ListEntry(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    deleted = fields.BooleanField(blank=True, required=False)
    flag = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    item = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        date = DateAttribute("date")
        deleted = Attribute(getter="deleted", setter="deleted", searcher=StringSearch("deleted"))
        flag = EmbeddedAttribute(type="CodeableConcept", getter="flag", setter="flag", searcher=StringSearch("flag"))
        item = ObjectIdReferenceAttribute({'Resource'}, ("item", str), "item", pk_setter="item")

class Location(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    address = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    alias = fields.ListField(fields.CharField(), blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    endpoint = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    managingOrganization = fields.ObjectIdField(blank=True, required=False)
    mode = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    operationalStatus = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    partOf = fields.ObjectIdField(blank=True, required=False)
    physicalType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    position = fields.EmbeddedDocumentField("LocationPosition", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        alias = Attribute(getter="alias", setter="alias", searcher=StringSearch("alias"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        endpoint = ObjectIdReferenceAttribute({'Endpoint'}, ("endpoint", str), "endpoint", pk_setter="endpoint")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        managingOrganization = ObjectIdReferenceAttribute({'Organization'}, ("managingOrganization", str), "managingOrganization", pk_setter="managingOrganization")
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        operationalStatus = EmbeddedAttribute(type="Coding", getter="operationalStatus", setter="operationalStatus", searcher=StringSearch("operationalStatus"))
        partOf = ObjectIdReferenceAttribute({'Location'}, ("partOf", str), "partOf", pk_setter="partOf")
        physicalType = EmbeddedAttribute(type="CodeableConcept", getter="physicalType", setter="physicalType", searcher=StringSearch("physicalType"))
        position = EmbeddedAttribute(type="LocationPosition", getter="position", setter="position", searcher=StringSearch("position"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class LocationPosition(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    altitude = fields.FloatField(blank=True, required=False)
    latitude = fields.FloatField(blank=False, required=True)
    longitude = fields.FloatField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        altitude = Attribute(getter="altitude", setter="altitude", searcher=NumericSearch("altitude"))
        latitude = Attribute(getter="latitude", setter="latitude", searcher=NumericSearch("latitude"))
        longitude = Attribute(getter="longitude", setter="longitude", searcher=NumericSearch("longitude"))

class Measure(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    clinicalRecommendationStatement = fields.CharField(blank=True, required=False)
    compositeScoring = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    contributor = fields.EmbeddedDocumentListField("Contributor", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    definition = fields.ListField(fields.CharField(), blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    disclaimer = fields.CharField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    group = fields.EmbeddedDocumentListField("MeasureGroup", blank=True, required=False)
    guidance = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    improvementNotation = fields.CharField(blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    library = fields.ObjectIdField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    rateAggregation = fields.CharField(blank=True, required=False)
    rationale = fields.CharField(blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    riskAdjustment = fields.CharField(blank=True, required=False)
    scoring = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    set = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    supplementalData = fields.EmbeddedDocumentListField("MeasureSupplementalData", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    usage = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        clinicalRecommendationStatement = Attribute(getter="clinicalRecommendationStatement", setter="clinicalRecommendationStatement", searcher=StringSearch("clinicalRecommendationStatement"))
        compositeScoring = EmbeddedAttribute(type="CodeableConcept", getter="compositeScoring", setter="compositeScoring", searcher=StringSearch("compositeScoring"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        contributor = EmbeddedAttribute(type="Contributor", getter="contributor", setter="contributor", searcher=StringSearch("contributor"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        disclaimer = Attribute(getter="disclaimer", setter="disclaimer", searcher=StringSearch("disclaimer"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        group = EmbeddedAttribute(type="MeasureGroup", getter="group", setter="group", searcher=StringSearch("group"))
        guidance = Attribute(getter="guidance", setter="guidance", searcher=StringSearch("guidance"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        improvementNotation = Attribute(getter="improvementNotation", setter="improvementNotation", searcher=StringSearch("improvementNotation"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        library = ObjectIdReferenceAttribute({'Library'}, ("library", str), "library", pk_setter="library")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        rateAggregation = Attribute(getter="rateAggregation", setter="rateAggregation", searcher=StringSearch("rateAggregation"))
        rationale = Attribute(getter="rationale", setter="rationale", searcher=StringSearch("rationale"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        riskAdjustment = Attribute(getter="riskAdjustment", setter="riskAdjustment", searcher=StringSearch("riskAdjustment"))
        scoring = EmbeddedAttribute(type="CodeableConcept", getter="scoring", setter="scoring", searcher=StringSearch("scoring"))
        set = Attribute(getter="set", setter="set", searcher=StringSearch("set"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        supplementalData = EmbeddedAttribute(type="MeasureSupplementalData", getter="supplementalData", setter="supplementalData", searcher=StringSearch("supplementalData"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        usage = Attribute(getter="usage", setter="usage", searcher=StringSearch("usage"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class MeasureGroup(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=False, required=True)
    name = fields.CharField(blank=True, required=False)
    population = fields.EmbeddedDocumentListField("MeasureGroupPopulation", blank=True, required=False)
    stratifier = fields.EmbeddedDocumentListField("MeasureGroupStratifier", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        population = EmbeddedAttribute(type="MeasureGroupPopulation", getter="population", setter="population", searcher=StringSearch("population"))
        stratifier = EmbeddedAttribute(type="MeasureGroupStratifier", getter="stratifier", setter="stratifier", searcher=StringSearch("stratifier"))

class MeasureGroupPopulation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    criteria = fields.CharField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        criteria = Attribute(getter="criteria", setter="criteria", searcher=StringSearch("criteria"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))

class MeasureGroupStratifier(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    criteria = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    path = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        criteria = Attribute(getter="criteria", setter="criteria", searcher=StringSearch("criteria"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))

class MeasureReport(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    evaluatedResources = fields.ObjectIdField(blank=True, required=False)
    group = fields.EmbeddedDocumentListField("MeasureReportGroup", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    measure = fields.ObjectIdField(blank=False, required=True)
    patient = fields.ObjectIdField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=False, required=True)
    reportingOrganization = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        date = DateAttribute("date")
        evaluatedResources = ObjectIdReferenceAttribute({'Bundle'}, ("evaluatedResources", str), "evaluatedResources", pk_setter="evaluatedResources")
        group = EmbeddedAttribute(type="MeasureReportGroup", getter="group", setter="group", searcher=StringSearch("group"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        measure = ObjectIdReferenceAttribute({'Measure'}, ("measure", str), "measure", pk_setter="measure")
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        reportingOrganization = ObjectIdReferenceAttribute({'Organization'}, ("reportingOrganization", str), "reportingOrganization", pk_setter="reportingOrganization")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class MeasureReportGroup(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=False, required=True)
    measureScore = fields.FloatField(blank=True, required=False)
    population = fields.EmbeddedDocumentListField("MeasureReportGroupPopulation", blank=True, required=False)
    stratifier = fields.EmbeddedDocumentListField("MeasureReportGroupStratifier", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        measureScore = Attribute(getter="measureScore", setter="measureScore", searcher=NumericSearch("measureScore"))
        population = EmbeddedAttribute(type="MeasureReportGroupPopulation", getter="population", setter="population", searcher=StringSearch("population"))
        stratifier = EmbeddedAttribute(type="MeasureReportGroupStratifier", getter="stratifier", setter="stratifier", searcher=StringSearch("stratifier"))

class MeasureReportGroupPopulation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    count = fields.IntegerField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    patients = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        count = Attribute(getter="count", setter="count", searcher=NumericSearch("count"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        patients = ObjectIdReferenceAttribute({'List'}, ("patients", str), "patients", pk_setter="patients")

class MeasureReportGroupStratifier(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    stratum = fields.EmbeddedDocumentListField("MeasureReportGroupStratifierStratum", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        stratum = EmbeddedAttribute(type="MeasureReportGroupStratifierStratum", getter="stratum", setter="stratum", searcher=StringSearch("stratum"))

class MeasureReportGroupStratifierStratum(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    measureScore = fields.FloatField(blank=True, required=False)
    population = fields.EmbeddedDocumentListField("MeasureReportGroupStratifierStratumPopulation", blank=True, required=False)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        measureScore = Attribute(getter="measureScore", setter="measureScore", searcher=NumericSearch("measureScore"))
        population = EmbeddedAttribute(type="MeasureReportGroupStratifierStratumPopulation", getter="population", setter="population", searcher=StringSearch("population"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class MeasureReportGroupStratifierStratumPopulation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    count = fields.IntegerField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    patients = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        count = Attribute(getter="count", setter="count", searcher=NumericSearch("count"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        patients = ObjectIdReferenceAttribute({'List'}, ("patients", str), "patients", pk_setter="patients")

class MeasureSupplementalData(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    criteria = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    path = fields.CharField(blank=True, required=False)
    usage = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        criteria = Attribute(getter="criteria", setter="criteria", searcher=StringSearch("criteria"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))
        usage = EmbeddedAttribute(type="CodeableConcept", getter="usage", setter="usage", searcher=StringSearch("usage"))

class Media(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    bodySite = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    content = fields.EmbeddedDocumentField("Attachment", blank=False, required=True)
    context = fields.ObjectIdField(blank=True, required=False)
    device = fields.ObjectIdField(blank=True, required=False)
    duration = fields.IntegerField(blank=True, required=False)
    frames = fields.IntegerField(blank=True, required=False)
    height = fields.IntegerField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    operator = fields.ObjectIdField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    subject = fields.ObjectIdField(blank=True, required=False)
    subtype = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    view = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    width = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        basedOn = ObjectIdReferenceAttribute({'ProcedureRequest'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        content = EmbeddedAttribute(type="Attachment", getter="content", setter="content", searcher=StringSearch("content"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        device = ObjectIdReferenceAttribute({'DeviceMetric', 'Device'}, ("device", str), "device", pk_setter="device")
        duration = Attribute(getter="duration", setter="duration", searcher=NumericSearch("duration"))
        frames = Attribute(getter="frames", setter="frames", searcher=NumericSearch("frames"))
        height = Attribute(getter="height", setter="height", searcher=NumericSearch("height"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        operator = ObjectIdReferenceAttribute({'Practitioner'}, ("operator", str), "operator", pk_setter="operator")
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        subject = ObjectIdReferenceAttribute({'Practitioner', 'Patient', 'Specimen', 'Group', 'Device'}, ("subject", str), "subject", pk_setter="subject")
        subtype = EmbeddedAttribute(type="CodeableConcept", getter="subtype", setter="subtype", searcher=StringSearch("subtype"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        view = EmbeddedAttribute(type="CodeableConcept", getter="view", setter="view", searcher=StringSearch("view"))
        width = Attribute(getter="width", setter="width", searcher=NumericSearch("width"))

class Medication(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    form = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    image = fields.EmbeddedDocumentListField("Attachment", blank=True, required=False)
    ingredient = fields.EmbeddedDocumentListField("MedicationIngredient", blank=True, required=False)
    isBrand = fields.BooleanField(blank=True, required=False)
    isOverTheCounter = fields.BooleanField(blank=True, required=False)
    manufacturer = fields.ObjectIdField(blank=True, required=False)
    package = fields.EmbeddedDocumentField("MedicationPackage", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        form = EmbeddedAttribute(type="CodeableConcept", getter="form", setter="form", searcher=StringSearch("form"))
        image = EmbeddedAttribute(type="Attachment", getter="image", setter="image", searcher=StringSearch("image"))
        ingredient = EmbeddedAttribute(type="MedicationIngredient", getter="ingredient", setter="ingredient", searcher=StringSearch("ingredient"))
        isBrand = Attribute(getter="isBrand", setter="isBrand", searcher=StringSearch("isBrand"))
        isOverTheCounter = Attribute(getter="isOverTheCounter", setter="isOverTheCounter", searcher=StringSearch("isOverTheCounter"))
        manufacturer = ObjectIdReferenceAttribute({'Organization'}, ("manufacturer", str), "manufacturer", pk_setter="manufacturer")
        package = EmbeddedAttribute(type="MedicationPackage", getter="package", setter="package", searcher=StringSearch("package"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class MedicationAdministration(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    definition = fields.ObjectIdField(blank=True, required=False)
    device = fields.ObjectIdField(blank=True, required=False)
    dosage = fields.EmbeddedDocumentField("MedicationAdministrationDosage", blank=True, required=False)
    effectiveDateTime = fields.DateTimeField(blank=False, required=True)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=False, required=True)
    eventHistory = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    medicationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    medicationReference = fields.ObjectIdField(blank=False, required=True)
    notGiven = fields.BooleanField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    partOf = fields.ObjectIdField(blank=True, required=False)
    performer = fields.EmbeddedDocumentListField("MedicationAdministrationPerformer", blank=True, required=False)
    prescription = fields.ObjectIdField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonNotGiven = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=False, required=True)
    supportingInformation = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        definition = ObjectIdReferenceAttribute({'PlanDefinition', 'ActivityDefinition'}, ("definition", str), "definition", pk_setter="definition")
        device = ObjectIdReferenceAttribute({'Device'}, ("device", str), "device", pk_setter="device")
        dosage = EmbeddedAttribute(type="MedicationAdministrationDosage", getter="dosage", setter="dosage", searcher=StringSearch("dosage"))
        effectiveDateTime = DateAttribute("effectiveDateTime")
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        eventHistory = ObjectIdReferenceAttribute({'Provenance'}, ("eventHistory", str), "eventHistory", pk_setter="eventHistory")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        medicationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="medicationCodeableConcept", setter="medicationCodeableConcept", searcher=StringSearch("medicationCodeableConcept"))
        medicationReference = ObjectIdReferenceAttribute({'Medication'}, ("medicationReference", str), "medicationReference", pk_setter="medicationReference")
        notGiven = Attribute(getter="notGiven", setter="notGiven", searcher=StringSearch("notGiven"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        partOf = ObjectIdReferenceAttribute({'Procedure', 'MedicationAdministration'}, ("partOf", str), "partOf", pk_setter="partOf")
        performer = EmbeddedAttribute(type="MedicationAdministrationPerformer", getter="performer", setter="performer", searcher=StringSearch("performer"))
        prescription = ObjectIdReferenceAttribute({'MedicationRequest'}, ("prescription", str), "prescription", pk_setter="prescription")
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonNotGiven = EmbeddedAttribute(type="CodeableConcept", getter="reasonNotGiven", setter="reasonNotGiven", searcher=StringSearch("reasonNotGiven"))
        reasonReference = ObjectIdReferenceAttribute({'Condition', 'Observation'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")
        supportingInformation = ObjectIdReferenceAttribute({'Resource'}, ("supportingInformation", str), "supportingInformation", pk_setter="supportingInformation")

class MedicationAdministrationDosage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    dose = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    method = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    rateQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    rateRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    route = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    site = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        dose = EmbeddedAttribute(type="Quantity", getter="dose", setter="dose", searcher=StringSearch("dose"))
        method = EmbeddedAttribute(type="CodeableConcept", getter="method", setter="method", searcher=StringSearch("method"))
        rateQuantity = EmbeddedAttribute(type="Quantity", getter="rateQuantity", setter="rateQuantity", searcher=StringSearch("rateQuantity"))
        rateRatio = EmbeddedAttribute(type="Ratio", getter="rateRatio", setter="rateRatio", searcher=StringSearch("rateRatio"))
        route = EmbeddedAttribute(type="CodeableConcept", getter="route", setter="route", searcher=StringSearch("route"))
        site = EmbeddedAttribute(type="CodeableConcept", getter="site", setter="site", searcher=StringSearch("site"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))

class MedicationAdministrationPerformer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.ObjectIdField(blank=False, required=True)
    onBehalfOf = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Device', 'Practitioner'}, ("actor", str), "actor", pk_setter="actor")
        onBehalfOf = ObjectIdReferenceAttribute({'Organization'}, ("onBehalfOf", str), "onBehalfOf", pk_setter="onBehalfOf")

class MedicationDispense(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authorizingPrescription = fields.ObjectIdField(blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    daysSupply = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    destination = fields.ObjectIdField(blank=True, required=False)
    detectedIssue = fields.ObjectIdField(blank=True, required=False)
    dosageInstruction = fields.EmbeddedDocumentListField("Dosage", blank=True, required=False)
    eventHistory = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    medicationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    medicationReference = fields.ObjectIdField(blank=False, required=True)
    notDone = fields.BooleanField(blank=True, required=False)
    notDoneReasonCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    notDoneReasonReference = fields.ObjectIdField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    partOf = fields.ObjectIdField(blank=True, required=False)
    performer = fields.EmbeddedDocumentListField("MedicationDispensePerformer", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    receiver = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    subject = fields.ObjectIdField(blank=True, required=False)
    substitution = fields.EmbeddedDocumentField("MedicationDispenseSubstitution", blank=True, required=False)
    supportingInformation = fields.ObjectIdField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    whenHandedOver = fields.DateTimeField(blank=True, required=False)
    whenPrepared = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authorizingPrescription = ObjectIdReferenceAttribute({'MedicationRequest'}, ("authorizingPrescription", str), "authorizingPrescription", pk_setter="authorizingPrescription")
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        daysSupply = EmbeddedAttribute(type="Quantity", getter="daysSupply", setter="daysSupply", searcher=StringSearch("daysSupply"))
        destination = ObjectIdReferenceAttribute({'Location'}, ("destination", str), "destination", pk_setter="destination")
        detectedIssue = ObjectIdReferenceAttribute({'DetectedIssue'}, ("detectedIssue", str), "detectedIssue", pk_setter="detectedIssue")
        dosageInstruction = EmbeddedAttribute(type="Dosage", getter="dosageInstruction", setter="dosageInstruction", searcher=StringSearch("dosageInstruction"))
        eventHistory = ObjectIdReferenceAttribute({'Provenance'}, ("eventHistory", str), "eventHistory", pk_setter="eventHistory")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        medicationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="medicationCodeableConcept", setter="medicationCodeableConcept", searcher=StringSearch("medicationCodeableConcept"))
        medicationReference = ObjectIdReferenceAttribute({'Medication'}, ("medicationReference", str), "medicationReference", pk_setter="medicationReference")
        notDone = Attribute(getter="notDone", setter="notDone", searcher=StringSearch("notDone"))
        notDoneReasonCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="notDoneReasonCodeableConcept", setter="notDoneReasonCodeableConcept", searcher=StringSearch("notDoneReasonCodeableConcept"))
        notDoneReasonReference = ObjectIdReferenceAttribute({'DetectedIssue'}, ("notDoneReasonReference", str), "notDoneReasonReference", pk_setter="notDoneReasonReference")
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        partOf = ObjectIdReferenceAttribute({'Procedure'}, ("partOf", str), "partOf", pk_setter="partOf")
        performer = EmbeddedAttribute(type="MedicationDispensePerformer", getter="performer", setter="performer", searcher=StringSearch("performer"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        receiver = ObjectIdReferenceAttribute({'Patient', 'Practitioner'}, ("receiver", str), "receiver", pk_setter="receiver")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")
        substitution = EmbeddedAttribute(type="MedicationDispenseSubstitution", getter="substitution", setter="substitution", searcher=StringSearch("substitution"))
        supportingInformation = ObjectIdReferenceAttribute({'Resource'}, ("supportingInformation", str), "supportingInformation", pk_setter="supportingInformation")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        whenHandedOver = DateAttribute("whenHandedOver")
        whenPrepared = DateAttribute("whenPrepared")

class MedicationDispensePerformer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.ObjectIdField(blank=False, required=True)
    onBehalfOf = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("actor", str), "actor", pk_setter="actor")
        onBehalfOf = ObjectIdReferenceAttribute({'Organization'}, ("onBehalfOf", str), "onBehalfOf", pk_setter="onBehalfOf")

class MedicationDispenseSubstitution(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    reason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    responsibleParty = fields.ObjectIdField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    wasSubstituted = fields.BooleanField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        responsibleParty = ObjectIdReferenceAttribute({'Practitioner'}, ("responsibleParty", str), "responsibleParty", pk_setter="responsibleParty")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        wasSubstituted = Attribute(getter="wasSubstituted", setter="wasSubstituted", searcher=StringSearch("wasSubstituted"))

class MedicationIngredient(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    isActive = fields.BooleanField(blank=True, required=False)
    itemCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    itemReference = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="Ratio", getter="amount", setter="amount", searcher=StringSearch("amount"))
        isActive = Attribute(getter="isActive", setter="isActive", searcher=StringSearch("isActive"))
        itemCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="itemCodeableConcept", setter="itemCodeableConcept", searcher=StringSearch("itemCodeableConcept"))
        itemReference = ObjectIdReferenceAttribute({'Substance', 'Medication'}, ("itemReference", str), "itemReference", pk_setter="itemReference")

class MedicationPackage(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    batch = fields.EmbeddedDocumentListField("MedicationPackageBatch", blank=True, required=False)
    container = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    content = fields.EmbeddedDocumentListField("MedicationPackageContent", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        batch = EmbeddedAttribute(type="MedicationPackageBatch", getter="batch", setter="batch", searcher=StringSearch("batch"))
        container = EmbeddedAttribute(type="CodeableConcept", getter="container", setter="container", searcher=StringSearch("container"))
        content = EmbeddedAttribute(type="MedicationPackageContent", getter="content", setter="content", searcher=StringSearch("content"))

class MedicationPackageBatch(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    expirationDate = fields.DateTimeField(blank=True, required=False)
    lotNumber = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        expirationDate = DateAttribute("expirationDate")
        lotNumber = Attribute(getter="lotNumber", setter="lotNumber", searcher=StringSearch("lotNumber"))

class MedicationPackageContent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    itemCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    itemReference = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="Quantity", getter="amount", setter="amount", searcher=StringSearch("amount"))
        itemCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="itemCodeableConcept", setter="itemCodeableConcept", searcher=StringSearch("itemCodeableConcept"))
        itemReference = ObjectIdReferenceAttribute({'Medication'}, ("itemReference", str), "itemReference", pk_setter="itemReference")

class MedicationRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    definition = fields.ObjectIdField(blank=True, required=False)
    detectedIssue = fields.ObjectIdField(blank=True, required=False)
    dispenseRequest = fields.EmbeddedDocumentField("MedicationRequestDispenseRequest", blank=True, required=False)
    dosageInstruction = fields.EmbeddedDocumentListField("Dosage", blank=True, required=False)
    eventHistory = fields.ObjectIdField(blank=True, required=False)
    groupIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    intent = fields.CharField(blank=False, required=True)
    medicationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    medicationReference = fields.ObjectIdField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    priorPrescription = fields.ObjectIdField(blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    recorder = fields.ObjectIdField(blank=True, required=False)
    requester = fields.EmbeddedDocumentField("MedicationRequestRequester", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    subject = fields.ObjectIdField(blank=False, required=True)
    substitution = fields.EmbeddedDocumentField("MedicationRequestSubstitution", blank=True, required=False)
    supportingInformation = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authoredOn = DateAttribute("authoredOn")
        basedOn = ObjectIdReferenceAttribute({'CarePlan', 'MedicationRequest', 'ProcedureRequest', 'ReferralRequest'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        definition = ObjectIdReferenceAttribute({'PlanDefinition', 'ActivityDefinition'}, ("definition", str), "definition", pk_setter="definition")
        detectedIssue = ObjectIdReferenceAttribute({'DetectedIssue'}, ("detectedIssue", str), "detectedIssue", pk_setter="detectedIssue")
        dispenseRequest = EmbeddedAttribute(type="MedicationRequestDispenseRequest", getter="dispenseRequest", setter="dispenseRequest", searcher=StringSearch("dispenseRequest"))
        dosageInstruction = EmbeddedAttribute(type="Dosage", getter="dosageInstruction", setter="dosageInstruction", searcher=StringSearch("dosageInstruction"))
        eventHistory = ObjectIdReferenceAttribute({'Provenance'}, ("eventHistory", str), "eventHistory", pk_setter="eventHistory")
        groupIdentifier = EmbeddedAttribute(type="Identifier", getter="groupIdentifier", setter="groupIdentifier", searcher=StringSearch("groupIdentifier"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        intent = Attribute(getter="intent", setter="intent", searcher=StringSearch("intent"))
        medicationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="medicationCodeableConcept", setter="medicationCodeableConcept", searcher=StringSearch("medicationCodeableConcept"))
        medicationReference = ObjectIdReferenceAttribute({'Medication'}, ("medicationReference", str), "medicationReference", pk_setter="medicationReference")
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        priorPrescription = ObjectIdReferenceAttribute({'MedicationRequest'}, ("priorPrescription", str), "priorPrescription", pk_setter="priorPrescription")
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = ObjectIdReferenceAttribute({'Condition', 'Observation'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        recorder = ObjectIdReferenceAttribute({'Practitioner'}, ("recorder", str), "recorder", pk_setter="recorder")
        requester = EmbeddedAttribute(type="MedicationRequestRequester", getter="requester", setter="requester", searcher=StringSearch("requester"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")
        substitution = EmbeddedAttribute(type="MedicationRequestSubstitution", getter="substitution", setter="substitution", searcher=StringSearch("substitution"))
        supportingInformation = ObjectIdReferenceAttribute({'Resource'}, ("supportingInformation", str), "supportingInformation", pk_setter="supportingInformation")

class MedicationRequestDispenseRequest(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    expectedSupplyDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    numberOfRepeatsAllowed = fields.IntegerField(blank=True, required=False)
    performer = fields.ObjectIdField(blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    validityPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        expectedSupplyDuration = EmbeddedAttribute(type="Duration", getter="expectedSupplyDuration", setter="expectedSupplyDuration", searcher=StringSearch("expectedSupplyDuration"))
        numberOfRepeatsAllowed = Attribute(getter="numberOfRepeatsAllowed", setter="numberOfRepeatsAllowed", searcher=NumericSearch("numberOfRepeatsAllowed"))
        performer = ObjectIdReferenceAttribute({'Organization'}, ("performer", str), "performer", pk_setter="performer")
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        validityPeriod = EmbeddedAttribute(type="Period", getter="validityPeriod", setter="validityPeriod", searcher=StringSearch("validityPeriod"))

class MedicationRequestRequester(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    agent = fields.ObjectIdField(blank=False, required=True)
    onBehalfOf = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        agent = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("agent", str), "agent", pk_setter="agent")
        onBehalfOf = ObjectIdReferenceAttribute({'Organization'}, ("onBehalfOf", str), "onBehalfOf", pk_setter="onBehalfOf")

class MedicationRequestSubstitution(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    allowed = fields.BooleanField(blank=False, required=True)
    reason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        allowed = Attribute(getter="allowed", setter="allowed", searcher=StringSearch("allowed"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))

class MedicationStatement(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    dateAsserted = fields.DateTimeField(blank=True, required=False)
    derivedFrom = fields.ObjectIdField(blank=True, required=False)
    dosage = fields.EmbeddedDocumentListField("Dosage", blank=True, required=False)
    effectiveDateTime = fields.DateTimeField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    informationSource = fields.ObjectIdField(blank=True, required=False)
    medicationCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    medicationReference = fields.ObjectIdField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    partOf = fields.ObjectIdField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonNotTaken = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=False, required=True)
    taken = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        basedOn = ObjectIdReferenceAttribute({'CarePlan', 'MedicationRequest', 'ProcedureRequest', 'ReferralRequest'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        dateAsserted = DateAttribute("dateAsserted")
        derivedFrom = ObjectIdReferenceAttribute({'Resource'}, ("derivedFrom", str), "derivedFrom", pk_setter="derivedFrom")
        dosage = EmbeddedAttribute(type="Dosage", getter="dosage", setter="dosage", searcher=StringSearch("dosage"))
        effectiveDateTime = DateAttribute("effectiveDateTime")
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        informationSource = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Practitioner', 'Organization'}, ("informationSource", str), "informationSource", pk_setter="informationSource")
        medicationCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="medicationCodeableConcept", setter="medicationCodeableConcept", searcher=StringSearch("medicationCodeableConcept"))
        medicationReference = ObjectIdReferenceAttribute({'Medication'}, ("medicationReference", str), "medicationReference", pk_setter="medicationReference")
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        partOf = ObjectIdReferenceAttribute({'MedicationStatement', 'Observation', 'MedicationAdministration', 'MedicationDispense', 'Procedure'}, ("partOf", str), "partOf", pk_setter="partOf")
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonNotTaken = EmbeddedAttribute(type="CodeableConcept", getter="reasonNotTaken", setter="reasonNotTaken", searcher=StringSearch("reasonNotTaken"))
        reasonReference = ObjectIdReferenceAttribute({'Condition', 'Observation'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")
        taken = Attribute(getter="taken", setter="taken", searcher=StringSearch("taken"))

class MessageDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    allowedResponse = fields.EmbeddedDocumentListField("MessageDefinitionAllowedResponse", blank=True, required=False)
    base = fields.ObjectIdField(blank=True, required=False)
    category = fields.CharField(blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    event = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    experimental = fields.BooleanField(blank=True, required=False)
    focus = fields.EmbeddedDocumentListField("MessageDefinitionFocus", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    parent = fields.ObjectIdField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    replaces = fields.ObjectIdField(blank=True, required=False)
    responseRequired = fields.BooleanField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        allowedResponse = EmbeddedAttribute(type="MessageDefinitionAllowedResponse", getter="allowedResponse", setter="allowedResponse", searcher=StringSearch("allowedResponse"))
        base = ObjectIdReferenceAttribute({'MessageDefinition'}, ("base", str), "base", pk_setter="base")
        category = Attribute(getter="category", setter="category", searcher=StringSearch("category"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        event = EmbeddedAttribute(type="Coding", getter="event", setter="event", searcher=StringSearch("event"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        focus = EmbeddedAttribute(type="MessageDefinitionFocus", getter="focus", setter="focus", searcher=StringSearch("focus"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        parent = ObjectIdReferenceAttribute({'PlanDefinition', 'ActivityDefinition'}, ("parent", str), "parent", pk_setter="parent")
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        replaces = ObjectIdReferenceAttribute({'MessageDefinition'}, ("replaces", str), "replaces", pk_setter="replaces")
        responseRequired = Attribute(getter="responseRequired", setter="responseRequired", searcher=StringSearch("responseRequired"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class MessageDefinitionAllowedResponse(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    message = fields.ObjectIdField(blank=False, required=True)
    situation = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        message = ObjectIdReferenceAttribute({'MessageDefinition'}, ("message", str), "message", pk_setter="message")
        situation = Attribute(getter="situation", setter="situation", searcher=StringSearch("situation"))

class MessageDefinitionFocus(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    max = fields.CharField(blank=True, required=False)
    min = fields.IntegerField(blank=True, required=False)
    profile = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        max = Attribute(getter="max", setter="max", searcher=StringSearch("max"))
        min = Attribute(getter="min", setter="min", searcher=NumericSearch("min"))
        profile = ObjectIdReferenceAttribute({'StructureDefinition'}, ("profile", str), "profile", pk_setter="profile")

class MessageHeader(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    author = fields.ObjectIdField(blank=True, required=False)
    destination = fields.EmbeddedDocumentListField("MessageHeaderDestination", blank=True, required=False)
    enterer = fields.ObjectIdField(blank=True, required=False)
    event = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    focus = fields.ObjectIdField(blank=True, required=False)
    reason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    receiver = fields.ObjectIdField(blank=True, required=False)
    response = fields.EmbeddedDocumentField("MessageHeaderResponse", blank=True, required=False)
    responsible = fields.ObjectIdField(blank=True, required=False)
    sender = fields.ObjectIdField(blank=True, required=False)
    source = fields.EmbeddedDocumentField("MessageHeaderSource", blank=False, required=True)
    timestamp = fields.DateTimeField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        author = ObjectIdReferenceAttribute({'Practitioner'}, ("author", str), "author", pk_setter="author")
        destination = EmbeddedAttribute(type="MessageHeaderDestination", getter="destination", setter="destination", searcher=StringSearch("destination"))
        enterer = ObjectIdReferenceAttribute({'Practitioner'}, ("enterer", str), "enterer", pk_setter="enterer")
        event = EmbeddedAttribute(type="Coding", getter="event", setter="event", searcher=StringSearch("event"))
        focus = ObjectIdReferenceAttribute({'Resource'}, ("focus", str), "focus", pk_setter="focus")
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        receiver = ObjectIdReferenceAttribute({'Practitioner', 'Organization'}, ("receiver", str), "receiver", pk_setter="receiver")
        response = EmbeddedAttribute(type="MessageHeaderResponse", getter="response", setter="response", searcher=StringSearch("response"))
        responsible = ObjectIdReferenceAttribute({'Practitioner', 'Organization'}, ("responsible", str), "responsible", pk_setter="responsible")
        sender = ObjectIdReferenceAttribute({'Practitioner', 'Organization'}, ("sender", str), "sender", pk_setter="sender")
        source = EmbeddedAttribute(type="MessageHeaderSource", getter="source", setter="source", searcher=StringSearch("source"))
        timestamp = DateAttribute("timestamp")

class MessageHeaderDestination(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    endpoint = fields.CharField(blank=False, required=True)
    name = fields.CharField(blank=True, required=False)
    target = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        endpoint = Attribute(getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        target = ObjectIdReferenceAttribute({'Device'}, ("target", str), "target", pk_setter="target")

class MessageHeaderResponse(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    details = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        details = ObjectIdReferenceAttribute({'OperationOutcome'}, ("details", str), "details", pk_setter="details")
        identifier = Attribute(getter="identifier", setter="identifier", searcher=StringSearch("identifier"))

class MessageHeaderSource(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    contact = fields.EmbeddedDocumentField("ContactPoint", blank=True, required=False)
    endpoint = fields.CharField(blank=False, required=True)
    name = fields.CharField(blank=True, required=False)
    software = fields.CharField(blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        contact = EmbeddedAttribute(type="ContactPoint", getter="contact", setter="contact", searcher=StringSearch("contact"))
        endpoint = Attribute(getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        software = Attribute(getter="software", setter="software", searcher=StringSearch("software"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class Meta(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    lastUpdated = fields.DateTimeField(blank=True, required=False)
    profile = fields.ListField(fields.CharField(), blank=True, required=False)
    security = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    tag = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    versionId = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        lastUpdated = DateAttribute("lastUpdated")
        profile = Attribute(getter="profile", setter="profile", searcher=StringSearch("profile"))
        security = EmbeddedAttribute(type="Coding", getter="security", setter="security", searcher=StringSearch("security"))
        tag = EmbeddedAttribute(type="Coding", getter="tag", setter="tag", searcher=StringSearch("tag"))
        versionId = Attribute(getter="versionId", setter="versionId", searcher=StringSearch("versionId"))

class MetadataResource(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class Money(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    comparator = fields.CharField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    unit = fields.CharField(blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comparator = Attribute(getter="comparator", setter="comparator", searcher=StringSearch("comparator"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        unit = Attribute(getter="unit", setter="unit", searcher=StringSearch("unit"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class NamingSystem(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    date = fields.DateTimeField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    kind = fields.CharField(blank=False, required=True)
    name = fields.CharField(blank=False, required=True)
    publisher = fields.CharField(blank=True, required=False)
    replacedBy = fields.ObjectIdField(blank=True, required=False)
    responsible = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    uniqueId = fields.EmbeddedDocumentListField("NamingSystemUniqueId", blank=False, required=True)
    usage = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        replacedBy = ObjectIdReferenceAttribute({'NamingSystem'}, ("replacedBy", str), "replacedBy", pk_setter="replacedBy")
        responsible = Attribute(getter="responsible", setter="responsible", searcher=StringSearch("responsible"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        uniqueId = EmbeddedAttribute(type="NamingSystemUniqueId", getter="uniqueId", setter="uniqueId", searcher=StringSearch("uniqueId"))
        usage = Attribute(getter="usage", setter="usage", searcher=StringSearch("usage"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))

class NamingSystemUniqueId(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    preferred = fields.BooleanField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        preferred = Attribute(getter="preferred", setter="preferred", searcher=StringSearch("preferred"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class Narrative(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    div = fields.CharField(blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        div = Attribute(getter="div", setter="div", searcher=StringSearch("div"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class NutritionOrder(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    allergyIntolerance = fields.ObjectIdField(blank=True, required=False)
    dateTime = fields.DateTimeField(blank=False, required=True)
    encounter = fields.ObjectIdField(blank=True, required=False)
    enteralFormula = fields.EmbeddedDocumentField("NutritionOrderEnteralFormula", blank=True, required=False)
    excludeFoodModifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    foodPreferenceModifier = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    oralDiet = fields.EmbeddedDocumentField("NutritionOrderOralDiet", blank=True, required=False)
    orderer = fields.ObjectIdField(blank=True, required=False)
    patient = fields.ObjectIdField(blank=False, required=True)
    status = fields.CharField(blank=True, required=False)
    supplement = fields.EmbeddedDocumentListField("NutritionOrderSupplement", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        allergyIntolerance = ObjectIdReferenceAttribute({'AllergyIntolerance'}, ("allergyIntolerance", str), "allergyIntolerance", pk_setter="allergyIntolerance")
        dateTime = DateAttribute("dateTime")
        encounter = ObjectIdReferenceAttribute({'Encounter'}, ("encounter", str), "encounter", pk_setter="encounter")
        enteralFormula = EmbeddedAttribute(type="NutritionOrderEnteralFormula", getter="enteralFormula", setter="enteralFormula", searcher=StringSearch("enteralFormula"))
        excludeFoodModifier = EmbeddedAttribute(type="CodeableConcept", getter="excludeFoodModifier", setter="excludeFoodModifier", searcher=StringSearch("excludeFoodModifier"))
        foodPreferenceModifier = EmbeddedAttribute(type="CodeableConcept", getter="foodPreferenceModifier", setter="foodPreferenceModifier", searcher=StringSearch("foodPreferenceModifier"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        oralDiet = EmbeddedAttribute(type="NutritionOrderOralDiet", getter="oralDiet", setter="oralDiet", searcher=StringSearch("oralDiet"))
        orderer = ObjectIdReferenceAttribute({'Practitioner'}, ("orderer", str), "orderer", pk_setter="orderer")
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        supplement = EmbeddedAttribute(type="NutritionOrderSupplement", getter="supplement", setter="supplement", searcher=StringSearch("supplement"))

class NutritionOrderEnteralFormula(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    additiveProductName = fields.CharField(blank=True, required=False)
    additiveType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    administration = fields.EmbeddedDocumentListField("NutritionOrderEnteralFormulaAdministration", blank=True, required=False)
    administrationInstruction = fields.CharField(blank=True, required=False)
    baseFormulaProductName = fields.CharField(blank=True, required=False)
    baseFormulaType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    caloricDensity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    maxVolumeToDeliver = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    routeofAdministration = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        additiveProductName = Attribute(getter="additiveProductName", setter="additiveProductName", searcher=StringSearch("additiveProductName"))
        additiveType = EmbeddedAttribute(type="CodeableConcept", getter="additiveType", setter="additiveType", searcher=StringSearch("additiveType"))
        administration = EmbeddedAttribute(type="NutritionOrderEnteralFormulaAdministration", getter="administration", setter="administration", searcher=StringSearch("administration"))
        administrationInstruction = Attribute(getter="administrationInstruction", setter="administrationInstruction", searcher=StringSearch("administrationInstruction"))
        baseFormulaProductName = Attribute(getter="baseFormulaProductName", setter="baseFormulaProductName", searcher=StringSearch("baseFormulaProductName"))
        baseFormulaType = EmbeddedAttribute(type="CodeableConcept", getter="baseFormulaType", setter="baseFormulaType", searcher=StringSearch("baseFormulaType"))
        caloricDensity = EmbeddedAttribute(type="Quantity", getter="caloricDensity", setter="caloricDensity", searcher=StringSearch("caloricDensity"))
        maxVolumeToDeliver = EmbeddedAttribute(type="Quantity", getter="maxVolumeToDeliver", setter="maxVolumeToDeliver", searcher=StringSearch("maxVolumeToDeliver"))
        routeofAdministration = EmbeddedAttribute(type="CodeableConcept", getter="routeofAdministration", setter="routeofAdministration", searcher=StringSearch("routeofAdministration"))

class NutritionOrderEnteralFormulaAdministration(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    rateQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    rateRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    schedule = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        rateQuantity = EmbeddedAttribute(type="Quantity", getter="rateQuantity", setter="rateQuantity", searcher=StringSearch("rateQuantity"))
        rateRatio = EmbeddedAttribute(type="Ratio", getter="rateRatio", setter="rateRatio", searcher=StringSearch("rateRatio"))
        schedule = EmbeddedAttribute(type="Timing", getter="schedule", setter="schedule", searcher=StringSearch("schedule"))

class NutritionOrderOralDiet(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    fluidConsistencyType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    instruction = fields.CharField(blank=True, required=False)
    nutrient = fields.EmbeddedDocumentListField("NutritionOrderOralDietNutrient", blank=True, required=False)
    schedule = fields.EmbeddedDocumentListField("Timing", blank=True, required=False)
    texture = fields.EmbeddedDocumentListField("NutritionOrderOralDietTexture", blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        fluidConsistencyType = EmbeddedAttribute(type="CodeableConcept", getter="fluidConsistencyType", setter="fluidConsistencyType", searcher=StringSearch("fluidConsistencyType"))
        instruction = Attribute(getter="instruction", setter="instruction", searcher=StringSearch("instruction"))
        nutrient = EmbeddedAttribute(type="NutritionOrderOralDietNutrient", getter="nutrient", setter="nutrient", searcher=StringSearch("nutrient"))
        schedule = EmbeddedAttribute(type="Timing", getter="schedule", setter="schedule", searcher=StringSearch("schedule"))
        texture = EmbeddedAttribute(type="NutritionOrderOralDietTexture", getter="texture", setter="texture", searcher=StringSearch("texture"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class NutritionOrderOralDietNutrient(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    modifier = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="Quantity", getter="amount", setter="amount", searcher=StringSearch("amount"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))

class NutritionOrderOralDietTexture(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    foodType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    modifier = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        foodType = EmbeddedAttribute(type="CodeableConcept", getter="foodType", setter="foodType", searcher=StringSearch("foodType"))
        modifier = EmbeddedAttribute(type="CodeableConcept", getter="modifier", setter="modifier", searcher=StringSearch("modifier"))

class NutritionOrderSupplement(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    instruction = fields.CharField(blank=True, required=False)
    productName = fields.CharField(blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    schedule = fields.EmbeddedDocumentListField("Timing", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        instruction = Attribute(getter="instruction", setter="instruction", searcher=StringSearch("instruction"))
        productName = Attribute(getter="productName", setter="productName", searcher=StringSearch("productName"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        schedule = EmbeddedAttribute(type="Timing", getter="schedule", setter="schedule", searcher=StringSearch("schedule"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class Observation(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    bodySite = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    comment = fields.CharField(blank=True, required=False)
    component = fields.EmbeddedDocumentListField("ObservationComponent", blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    dataAbsentReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    device = fields.ObjectIdField(blank=True, required=False)
    effectiveDateTime = fields.DateTimeField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    interpretation = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    issued = fields.DateTimeField(blank=True, required=False)
    method = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    performer = fields.ObjectIdField(blank=True, required=False)
    referenceRange = fields.EmbeddedDocumentListField("ObservationReferenceRange", blank=True, required=False)
    related = fields.EmbeddedDocumentListField("ObservationRelated", blank=True, required=False)
    specimen = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=True, required=False)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valuePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    valueRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    valueSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueTime = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        basedOn = ObjectIdReferenceAttribute({'MedicationRequest', 'ProcedureRequest', 'ReferralRequest', 'NutritionOrder', 'DeviceRequest', 'ImmunizationRecommendation', 'CarePlan'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        component = EmbeddedAttribute(type="ObservationComponent", getter="component", setter="component", searcher=StringSearch("component"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        dataAbsentReason = EmbeddedAttribute(type="CodeableConcept", getter="dataAbsentReason", setter="dataAbsentReason", searcher=StringSearch("dataAbsentReason"))
        device = ObjectIdReferenceAttribute({'DeviceMetric', 'Device'}, ("device", str), "device", pk_setter="device")
        effectiveDateTime = DateAttribute("effectiveDateTime")
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        interpretation = EmbeddedAttribute(type="CodeableConcept", getter="interpretation", setter="interpretation", searcher=StringSearch("interpretation"))
        issued = DateAttribute("issued")
        method = EmbeddedAttribute(type="CodeableConcept", getter="method", setter="method", searcher=StringSearch("method"))
        performer = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Practitioner', 'Organization'}, ("performer", str), "performer", pk_setter="performer")
        referenceRange = EmbeddedAttribute(type="ObservationReferenceRange", getter="referenceRange", setter="referenceRange", searcher=StringSearch("referenceRange"))
        related = EmbeddedAttribute(type="ObservationRelated", getter="related", setter="related", searcher=StringSearch("related"))
        specimen = ObjectIdReferenceAttribute({'Specimen'}, ("specimen", str), "specimen", pk_setter="specimen")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group', 'Device', 'Location'}, ("subject", str), "subject", pk_setter="subject")
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueDateTime = DateAttribute("valueDateTime")
        valuePeriod = EmbeddedAttribute(type="Period", getter="valuePeriod", setter="valuePeriod", searcher=StringSearch("valuePeriod"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))
        valueRatio = EmbeddedAttribute(type="Ratio", getter="valueRatio", setter="valueRatio", searcher=StringSearch("valueRatio"))
        valueSampledData = EmbeddedAttribute(type="SampledData", getter="valueSampledData", setter="valueSampledData", searcher=StringSearch("valueSampledData"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")

class ObservationComponent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    dataAbsentReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    interpretation = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    referenceRange = fields.EmbeddedDocumentListField("ObservationReferenceRange", blank=True, required=False)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valuePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    valueRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    valueSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueTime = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        dataAbsentReason = EmbeddedAttribute(type="CodeableConcept", getter="dataAbsentReason", setter="dataAbsentReason", searcher=StringSearch("dataAbsentReason"))
        interpretation = EmbeddedAttribute(type="CodeableConcept", getter="interpretation", setter="interpretation", searcher=StringSearch("interpretation"))
        referenceRange = EmbeddedAttribute(type="ObservationReferenceRange", getter="referenceRange", setter="referenceRange", searcher=StringSearch("referenceRange"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueDateTime = DateAttribute("valueDateTime")
        valuePeriod = EmbeddedAttribute(type="Period", getter="valuePeriod", setter="valuePeriod", searcher=StringSearch("valuePeriod"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))
        valueRatio = EmbeddedAttribute(type="Ratio", getter="valueRatio", setter="valueRatio", searcher=StringSearch("valueRatio"))
        valueSampledData = EmbeddedAttribute(type="SampledData", getter="valueSampledData", setter="valueSampledData", searcher=StringSearch("valueSampledData"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")

class ObservationReferenceRange(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    age = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    appliesTo = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    high = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    low = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        age = EmbeddedAttribute(type="Range", getter="age", setter="age", searcher=StringSearch("age"))
        appliesTo = EmbeddedAttribute(type="CodeableConcept", getter="appliesTo", setter="appliesTo", searcher=StringSearch("appliesTo"))
        high = EmbeddedAttribute(type="Quantity", getter="high", setter="high", searcher=StringSearch("high"))
        low = EmbeddedAttribute(type="Quantity", getter="low", setter="low", searcher=StringSearch("low"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ObservationRelated(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    target = fields.ObjectIdField(blank=False, required=True)
    type = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        target = ObjectIdReferenceAttribute({'vitalsigns', 'Sequence', 'QuestionnaireResponse', 'Observation'}, ("target", str), "target", pk_setter="target")
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class OperationDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    base = fields.ObjectIdField(blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    comment = fields.CharField(blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    idempotent = fields.BooleanField(blank=True, required=False)
    instance = fields.BooleanField(blank=False, required=True)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    kind = fields.CharField(blank=False, required=True)
    name = fields.CharField(blank=False, required=True)
    overload = fields.EmbeddedDocumentListField("OperationDefinitionOverload", blank=True, required=False)
    parameter = fields.EmbeddedDocumentListField("OperationDefinitionParameter", blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    resource = fields.ListField(fields.CharField(), blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    system = fields.BooleanField(blank=False, required=True)
    type = fields.BooleanField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        base = ObjectIdReferenceAttribute({'OperationDefinition'}, ("base", str), "base", pk_setter="base")
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        idempotent = Attribute(getter="idempotent", setter="idempotent", searcher=StringSearch("idempotent"))
        instance = Attribute(getter="instance", setter="instance", searcher=StringSearch("instance"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        overload = EmbeddedAttribute(type="OperationDefinitionOverload", getter="overload", setter="overload", searcher=StringSearch("overload"))
        parameter = EmbeddedAttribute(type="OperationDefinitionParameter", getter="parameter", setter="parameter", searcher=StringSearch("parameter"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        resource = Attribute(getter="resource", setter="resource", searcher=StringSearch("resource"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class OperationDefinitionOverload(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    parameterName = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        parameterName = Attribute(getter="parameterName", setter="parameterName", searcher=StringSearch("parameterName"))

class OperationDefinitionParameter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    binding = fields.EmbeddedDocumentField("OperationDefinitionParameterBinding", blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    max = fields.CharField(blank=False, required=True)
    min = fields.IntegerField(blank=False, required=True)
    name = fields.CharField(blank=False, required=True)
    part = fields.EmbeddedDocumentListField("OperationDefinitionParameter", blank=True, required=False)
    profile = fields.ObjectIdField(blank=True, required=False)
    searchType = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    use = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        binding = EmbeddedAttribute(type="OperationDefinitionParameterBinding", getter="binding", setter="binding", searcher=StringSearch("binding"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        max = Attribute(getter="max", setter="max", searcher=StringSearch("max"))
        min = Attribute(getter="min", setter="min", searcher=NumericSearch("min"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        part = EmbeddedAttribute(type="OperationDefinitionParameter", getter="part", setter="part", searcher=StringSearch("part"))
        profile = ObjectIdReferenceAttribute({'StructureDefinition'}, ("profile", str), "profile", pk_setter="profile")
        searchType = Attribute(getter="searchType", setter="searchType", searcher=StringSearch("searchType"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))

class OperationDefinitionParameterBinding(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    strength = fields.CharField(blank=False, required=True)
    valueSetReference = fields.ObjectIdField(blank=False, required=True)
    valueSetUri = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        strength = Attribute(getter="strength", setter="strength", searcher=StringSearch("strength"))
        valueSetReference = ObjectIdReferenceAttribute({'ValueSet'}, ("valueSetReference", str), "valueSetReference", pk_setter="valueSetReference")
        valueSetUri = Attribute(getter="valueSetUri", setter="valueSetUri", searcher=StringSearch("valueSetUri"))

class OperationOutcome(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    issue = fields.EmbeddedDocumentListField("OperationOutcomeIssue", blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        issue = EmbeddedAttribute(type="OperationOutcomeIssue", getter="issue", setter="issue", searcher=StringSearch("issue"))

class OperationOutcomeIssue(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    details = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    diagnostics = fields.CharField(blank=True, required=False)
    expression = fields.ListField(fields.CharField(), blank=True, required=False)
    location = fields.ListField(fields.CharField(), blank=True, required=False)
    severity = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        details = EmbeddedAttribute(type="CodeableConcept", getter="details", setter="details", searcher=StringSearch("details"))
        diagnostics = Attribute(getter="diagnostics", setter="diagnostics", searcher=StringSearch("diagnostics"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        location = Attribute(getter="location", setter="location", searcher=StringSearch("location"))
        severity = Attribute(getter="severity", setter="severity", searcher=StringSearch("severity"))

class Organization(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    address = fields.EmbeddedDocumentListField("Address", blank=True, required=False)
    alias = fields.ListField(fields.CharField(), blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("OrganizationContact", blank=True, required=False)
    endpoint = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    partOf = fields.ObjectIdField(blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    type = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        alias = Attribute(getter="alias", setter="alias", searcher=StringSearch("alias"))
        contact = EmbeddedAttribute(type="OrganizationContact", getter="contact", setter="contact", searcher=StringSearch("contact"))
        endpoint = ObjectIdReferenceAttribute({'Endpoint'}, ("endpoint", str), "endpoint", pk_setter="endpoint")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        partOf = ObjectIdReferenceAttribute({'Organization'}, ("partOf", str), "partOf", pk_setter="partOf")
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class OrganizationContact(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    address = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    name = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    purpose = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        name = EmbeddedAttribute(type="HumanName", getter="name", setter="name", searcher=StringSearch("name"))
        purpose = EmbeddedAttribute(type="CodeableConcept", getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class PaginatedBundle(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    entry = fields.EmbeddedDocumentListField("BundleEntry", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    link = fields.EmbeddedDocumentListField("BundleLink", blank=True, required=False)
    signature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    total = fields.IntegerField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        entry = EmbeddedAttribute(type="BundleEntry", getter="entry", setter="entry", searcher=StringSearch("entry"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        link = EmbeddedAttribute(type="BundleLink", getter="link", setter="link", searcher=StringSearch("link"))
        signature = EmbeddedAttribute(type="Signature", getter="signature", setter="signature", searcher=StringSearch("signature"))
        total = Attribute(getter="total", setter="total", searcher=NumericSearch("total"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class ParameterDefinition(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    max = fields.CharField(blank=True, required=False)
    min = fields.IntegerField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    profile = fields.ObjectIdField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    use = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        max = Attribute(getter="max", setter="max", searcher=StringSearch("max"))
        min = Attribute(getter="min", setter="min", searcher=NumericSearch("min"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        profile = ObjectIdReferenceAttribute({'StructureDefinition'}, ("profile", str), "profile", pk_setter="profile")
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        use = Attribute(getter="use", setter="use", searcher=StringSearch("use"))

class Parameters(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    parameter = fields.EmbeddedDocumentListField("ParametersParameter", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        parameter = EmbeddedAttribute(type="ParametersParameter", getter="parameter", setter="parameter", searcher=StringSearch("parameter"))

class ParametersParameter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    part = fields.EmbeddedDocumentListField("ParametersParameter", blank=True, required=False)
    resource = fields.EmbeddedDocumentField("Resource", blank=True, required=False)
    valueAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    valueAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    valueAnnotation = fields.EmbeddedDocumentField("Annotation", blank=True, required=False)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    valueBase64Binary = fields.CharField(blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCode = fields.CharField(blank=True, required=False)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    valueCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    valueContactPoint = fields.EmbeddedDocumentField("ContactPoint", blank=True, required=False)
    valueCount = fields.EmbeddedDocumentField("Count", blank=True, required=False)
    valueDate = fields.DateTimeField(blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valueDecimal = fields.FloatField(blank=True, required=False)
    valueDistance = fields.EmbeddedDocumentField("Distance", blank=True, required=False)
    valueDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    valueHumanName = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    valueId = fields.CharField(blank=True, required=False)
    valueIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    valueInstant = fields.DateTimeField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valueMarkdown = fields.CharField(blank=True, required=False)
    valueMeta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    valueMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    valueOid = fields.CharField(blank=True, required=False)
    valuePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    valuePositiveInt = fields.IntegerField(blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    valueRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    # valueReference = fields.ReferenceField(, blank=True, required=False)
    valueSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    valueSignature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueTime = fields.DateTimeField(blank=True, required=False)
    valueTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    valueUnsignedInt = fields.IntegerField(blank=True, required=False)
    valueUri = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        part = EmbeddedAttribute(type="ParametersParameter", getter="part", setter="part", searcher=StringSearch("part"))
        resource = EmbeddedAttribute(type="Resource", getter="resource", setter="resource", searcher=StringSearch("resource"))
        valueAddress = EmbeddedAttribute(type="Address", getter="valueAddress", setter="valueAddress", searcher=StringSearch("valueAddress"))
        valueAge = EmbeddedAttribute(type="Age", getter="valueAge", setter="valueAge", searcher=StringSearch("valueAge"))
        valueAnnotation = EmbeddedAttribute(type="Annotation", getter="valueAnnotation", setter="valueAnnotation", searcher=StringSearch("valueAnnotation"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueBase64Binary = Attribute(getter="valueBase64Binary", setter="valueBase64Binary", searcher=StringSearch("valueBase64Binary"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCode = Attribute(getter="valueCode", setter="valueCode", searcher=StringSearch("valueCode"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueContactPoint = EmbeddedAttribute(type="ContactPoint", getter="valueContactPoint", setter="valueContactPoint", searcher=StringSearch("valueContactPoint"))
        valueCount = EmbeddedAttribute(type="Count", getter="valueCount", setter="valueCount", searcher=StringSearch("valueCount"))
        valueDate = DateAttribute("valueDate")
        valueDateTime = DateAttribute("valueDateTime")
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueDistance = EmbeddedAttribute(type="Distance", getter="valueDistance", setter="valueDistance", searcher=StringSearch("valueDistance"))
        valueDuration = EmbeddedAttribute(type="Duration", getter="valueDuration", setter="valueDuration", searcher=StringSearch("valueDuration"))
        valueHumanName = EmbeddedAttribute(type="HumanName", getter="valueHumanName", setter="valueHumanName", searcher=StringSearch("valueHumanName"))
        valueId = Attribute(getter="valueId", setter="valueId", searcher=StringSearch("valueId"))
        valueIdentifier = EmbeddedAttribute(type="Identifier", getter="valueIdentifier", setter="valueIdentifier", searcher=StringSearch("valueIdentifier"))
        valueInstant = DateAttribute("valueInstant")
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueMarkdown = Attribute(getter="valueMarkdown", setter="valueMarkdown", searcher=StringSearch("valueMarkdown"))
        valueMeta = EmbeddedAttribute(type="Meta", getter="valueMeta", setter="valueMeta", searcher=StringSearch("valueMeta"))
        valueMoney = EmbeddedAttribute(type="Money", getter="valueMoney", setter="valueMoney", searcher=StringSearch("valueMoney"))
        valueOid = Attribute(getter="valueOid", setter="valueOid", searcher=StringSearch("valueOid"))
        valuePeriod = EmbeddedAttribute(type="Period", getter="valuePeriod", setter="valuePeriod", searcher=StringSearch("valuePeriod"))
        valuePositiveInt = Attribute(getter="valuePositiveInt", setter="valuePositiveInt", searcher=NumericSearch("valuePositiveInt"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))
        valueRatio = EmbeddedAttribute(type="Ratio", getter="valueRatio", setter="valueRatio", searcher=StringSearch("valueRatio"))
        # valueReference = ObjectIdReferenceAttribute(getter="valueReference", setter="valueReference", searcher=StringSearch("valueReference"))
        valueSampledData = EmbeddedAttribute(type="SampledData", getter="valueSampledData", setter="valueSampledData", searcher=StringSearch("valueSampledData"))
        valueSignature = EmbeddedAttribute(type="Signature", getter="valueSignature", setter="valueSignature", searcher=StringSearch("valueSignature"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")
        valueTiming = EmbeddedAttribute(type="Timing", getter="valueTiming", setter="valueTiming", searcher=StringSearch("valueTiming"))
        valueUnsignedInt = Attribute(getter="valueUnsignedInt", setter="valueUnsignedInt", searcher=NumericSearch("valueUnsignedInt"))
        valueUri = Attribute(getter="valueUri", setter="valueUri", searcher=StringSearch("valueUri"))

class Patient(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    address = fields.EmbeddedDocumentListField("Address", blank=True, required=False)
    animal = fields.EmbeddedDocumentField("PatientAnimal", blank=True, required=False)
    birthDate = fields.DateTimeField(blank=True, required=False)
    communication = fields.EmbeddedDocumentListField("PatientCommunication", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("PatientContact", blank=True, required=False)
    deceasedBoolean = fields.BooleanField(blank=True, required=False)
    deceasedDateTime = fields.DateTimeField(blank=True, required=False)
    gender = fields.CharField(blank=True, required=False)
    generalPractitioner = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    link = fields.EmbeddedDocumentListField("PatientLink", blank=True, required=False)
    managingOrganization = fields.ObjectIdField(blank=True, required=False)
    maritalStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    multipleBirthBoolean = fields.BooleanField(blank=True, required=False)
    multipleBirthInteger = fields.IntegerField(blank=True, required=False)
    name = fields.EmbeddedDocumentListField("HumanName", blank=True, required=False)
    photo = fields.EmbeddedDocumentListField("Attachment", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        animal = EmbeddedAttribute(type="PatientAnimal", getter="animal", setter="animal", searcher=StringSearch("animal"))
        birthDate = DateAttribute("birthDate")
        communication = EmbeddedAttribute(type="PatientCommunication", getter="communication", setter="communication", searcher=StringSearch("communication"))
        contact = EmbeddedAttribute(type="PatientContact", getter="contact", setter="contact", searcher=StringSearch("contact"))
        deceasedBoolean = Attribute(getter="deceasedBoolean", setter="deceasedBoolean", searcher=StringSearch("deceasedBoolean"))
        deceasedDateTime = DateAttribute("deceasedDateTime")
        gender = Attribute(getter="gender", setter="gender", searcher=StringSearch("gender"))
        generalPractitioner = ObjectIdReferenceAttribute({'Practitioner', 'Organization'}, ("generalPractitioner", str), "generalPractitioner", pk_setter="generalPractitioner")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        link = EmbeddedAttribute(type="PatientLink", getter="link", setter="link", searcher=StringSearch("link"))
        managingOrganization = ObjectIdReferenceAttribute({'Organization'}, ("managingOrganization", str), "managingOrganization", pk_setter="managingOrganization")
        maritalStatus = EmbeddedAttribute(type="CodeableConcept", getter="maritalStatus", setter="maritalStatus", searcher=StringSearch("maritalStatus"))
        multipleBirthBoolean = Attribute(getter="multipleBirthBoolean", setter="multipleBirthBoolean", searcher=StringSearch("multipleBirthBoolean"))
        multipleBirthInteger = Attribute(getter="multipleBirthInteger", setter="multipleBirthInteger", searcher=NumericSearch("multipleBirthInteger"))
        name = EmbeddedAttribute(type="HumanName", getter="name", setter="name", searcher=StringSearch("name"))
        photo = EmbeddedAttribute(type="Attachment", getter="photo", setter="photo", searcher=StringSearch("photo"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class PatientAnimal(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    breed = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    genderStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    species = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        breed = EmbeddedAttribute(type="CodeableConcept", getter="breed", setter="breed", searcher=StringSearch("breed"))
        genderStatus = EmbeddedAttribute(type="CodeableConcept", getter="genderStatus", setter="genderStatus", searcher=StringSearch("genderStatus"))
        species = EmbeddedAttribute(type="CodeableConcept", getter="species", setter="species", searcher=StringSearch("species"))

class PatientCommunication(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    language = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    preferred = fields.BooleanField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        language = EmbeddedAttribute(type="CodeableConcept", getter="language", setter="language", searcher=StringSearch("language"))
        preferred = Attribute(getter="preferred", setter="preferred", searcher=StringSearch("preferred"))

class PatientContact(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    address = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    gender = fields.CharField(blank=True, required=False)
    name = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    organization = fields.ObjectIdField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    relationship = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        gender = Attribute(getter="gender", setter="gender", searcher=StringSearch("gender"))
        name = EmbeddedAttribute(type="HumanName", getter="name", setter="name", searcher=StringSearch("name"))
        organization = ObjectIdReferenceAttribute({'Organization'}, ("organization", str), "organization", pk_setter="organization")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        relationship = EmbeddedAttribute(type="CodeableConcept", getter="relationship", setter="relationship", searcher=StringSearch("relationship"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class PatientLink(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    other = fields.ObjectIdField(blank=False, required=True)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        other = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson'}, ("other", str), "other", pk_setter="other")
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class PaymentNotice(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    organization = fields.ObjectIdField(blank=True, required=False)
    paymentStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    provider = fields.ObjectIdField(blank=True, required=False)
    request = fields.ObjectIdField(blank=True, required=False)
    response = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    statusDate = fields.DateTimeField(blank=True, required=False)
    target = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        created = DateAttribute("created")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        organization = ObjectIdReferenceAttribute({'Organization'}, ("organization", str), "organization", pk_setter="organization")
        paymentStatus = EmbeddedAttribute(type="CodeableConcept", getter="paymentStatus", setter="paymentStatus", searcher=StringSearch("paymentStatus"))
        provider = ObjectIdReferenceAttribute({'Practitioner'}, ("provider", str), "provider", pk_setter="provider")
        request = ObjectIdReferenceAttribute({'Resource'}, ("request", str), "request", pk_setter="request")
        response = ObjectIdReferenceAttribute({'Resource'}, ("response", str), "response", pk_setter="response")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusDate = DateAttribute("statusDate")
        target = ObjectIdReferenceAttribute({'Organization'}, ("target", str), "target", pk_setter="target")

class PaymentReconciliation(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    detail = fields.EmbeddedDocumentListField("PaymentReconciliationDetail", blank=True, required=False)
    disposition = fields.CharField(blank=True, required=False)
    form = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    organization = fields.ObjectIdField(blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    processNote = fields.EmbeddedDocumentListField("PaymentReconciliationProcessNote", blank=True, required=False)
    request = fields.ObjectIdField(blank=True, required=False)
    requestOrganization = fields.ObjectIdField(blank=True, required=False)
    requestProvider = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    total = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        created = DateAttribute("created")
        detail = EmbeddedAttribute(type="PaymentReconciliationDetail", getter="detail", setter="detail", searcher=StringSearch("detail"))
        disposition = Attribute(getter="disposition", setter="disposition", searcher=StringSearch("disposition"))
        form = EmbeddedAttribute(type="CodeableConcept", getter="form", setter="form", searcher=StringSearch("form"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        organization = ObjectIdReferenceAttribute({'Organization'}, ("organization", str), "organization", pk_setter="organization")
        outcome = EmbeddedAttribute(type="CodeableConcept", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        processNote = EmbeddedAttribute(type="PaymentReconciliationProcessNote", getter="processNote", setter="processNote", searcher=StringSearch("processNote"))
        request = ObjectIdReferenceAttribute({'ProcessRequest'}, ("request", str), "request", pk_setter="request")
        requestOrganization = ObjectIdReferenceAttribute({'Organization'}, ("requestOrganization", str), "requestOrganization", pk_setter="requestOrganization")
        requestProvider = ObjectIdReferenceAttribute({'Practitioner'}, ("requestProvider", str), "requestProvider", pk_setter="requestProvider")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        total = EmbeddedAttribute(type="Money", getter="total", setter="total", searcher=StringSearch("total"))

class PaymentReconciliationDetail(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    amount = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    payee = fields.ObjectIdField(blank=True, required=False)
    request = fields.ObjectIdField(blank=True, required=False)
    response = fields.ObjectIdField(blank=True, required=False)
    submitter = fields.ObjectIdField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        amount = EmbeddedAttribute(type="Money", getter="amount", setter="amount", searcher=StringSearch("amount"))
        date = DateAttribute("date")
        payee = ObjectIdReferenceAttribute({'Organization'}, ("payee", str), "payee", pk_setter="payee")
        request = ObjectIdReferenceAttribute({'Resource'}, ("request", str), "request", pk_setter="request")
        response = ObjectIdReferenceAttribute({'Resource'}, ("response", str), "response", pk_setter="response")
        submitter = ObjectIdReferenceAttribute({'Organization'}, ("submitter", str), "submitter", pk_setter="submitter")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class PaymentReconciliationProcessNote(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class Period(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    end = fields.DateTimeField(blank=True, required=False)
    start = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        end = DateAttribute("end")
        start = DateAttribute("start")

class Person(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    address = fields.EmbeddedDocumentListField("Address", blank=True, required=False)
    birthDate = fields.DateTimeField(blank=True, required=False)
    gender = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    link = fields.EmbeddedDocumentListField("PersonLink", blank=True, required=False)
    managingOrganization = fields.ObjectIdField(blank=True, required=False)
    name = fields.EmbeddedDocumentListField("HumanName", blank=True, required=False)
    photo = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        birthDate = DateAttribute("birthDate")
        gender = Attribute(getter="gender", setter="gender", searcher=StringSearch("gender"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        link = EmbeddedAttribute(type="PersonLink", getter="link", setter="link", searcher=StringSearch("link"))
        managingOrganization = ObjectIdReferenceAttribute({'Organization'}, ("managingOrganization", str), "managingOrganization", pk_setter="managingOrganization")
        name = EmbeddedAttribute(type="HumanName", getter="name", setter="name", searcher=StringSearch("name"))
        photo = EmbeddedAttribute(type="Attachment", getter="photo", setter="photo", searcher=StringSearch("photo"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class PersonLink(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    assurance = fields.CharField(blank=True, required=False)
    target = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        assurance = Attribute(getter="assurance", setter="assurance", searcher=StringSearch("assurance"))
        target = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Person', 'Practitioner'}, ("target", str), "target", pk_setter="target")

class PlanDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("PlanDefinitionAction", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    contributor = fields.EmbeddedDocumentListField("Contributor", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    goal = fields.EmbeddedDocumentListField("PlanDefinitionGoal", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    library = fields.ObjectIdField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    usage = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        action = EmbeddedAttribute(type="PlanDefinitionAction", getter="action", setter="action", searcher=StringSearch("action"))
        approvalDate = DateAttribute("approvalDate")
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        contributor = EmbeddedAttribute(type="Contributor", getter="contributor", setter="contributor", searcher=StringSearch("contributor"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        goal = EmbeddedAttribute(type="PlanDefinitionGoal", getter="goal", setter="goal", searcher=StringSearch("goal"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        library = ObjectIdReferenceAttribute({'Library'}, ("library", str), "library", pk_setter="library")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        usage = Attribute(getter="usage", setter="usage", searcher=StringSearch("usage"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class PlanDefinitionAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("PlanDefinitionAction", blank=True, required=False)
    cardinalityBehavior = fields.CharField(blank=True, required=False)
    code = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    condition = fields.EmbeddedDocumentListField("PlanDefinitionActionCondition", blank=True, required=False)
    definition = fields.ObjectIdField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    documentation = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    dynamicValue = fields.EmbeddedDocumentListField("PlanDefinitionActionDynamicValue", blank=True, required=False)
    goalId = fields.ListField(fields.CharField(), blank=True, required=False)
    groupingBehavior = fields.CharField(blank=True, required=False)
    input = fields.EmbeddedDocumentListField("DataRequirement", blank=True, required=False)
    label = fields.CharField(blank=True, required=False)
    output = fields.EmbeddedDocumentListField("DataRequirement", blank=True, required=False)
    participant = fields.EmbeddedDocumentListField("PlanDefinitionActionParticipant", blank=True, required=False)
    precheckBehavior = fields.CharField(blank=True, required=False)
    reason = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    relatedAction = fields.EmbeddedDocumentListField("PlanDefinitionActionRelatedAction", blank=True, required=False)
    requiredBehavior = fields.CharField(blank=True, required=False)
    selectionBehavior = fields.CharField(blank=True, required=False)
    textEquivalent = fields.CharField(blank=True, required=False)
    timingDateTime = fields.DateTimeField(blank=True, required=False)
    timingDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    timingPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    timingRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    timingTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    transform = fields.ObjectIdField(blank=True, required=False)
    triggerDefinition = fields.EmbeddedDocumentListField("TriggerDefinition", blank=True, required=False)
    type = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="PlanDefinitionAction", getter="action", setter="action", searcher=StringSearch("action"))
        cardinalityBehavior = Attribute(getter="cardinalityBehavior", setter="cardinalityBehavior", searcher=StringSearch("cardinalityBehavior"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        condition = EmbeddedAttribute(type="PlanDefinitionActionCondition", getter="condition", setter="condition", searcher=StringSearch("condition"))
        definition = ObjectIdReferenceAttribute({'PlanDefinition', 'ActivityDefinition'}, ("definition", str), "definition", pk_setter="definition")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        documentation = EmbeddedAttribute(type="RelatedArtifact", getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        dynamicValue = EmbeddedAttribute(type="PlanDefinitionActionDynamicValue", getter="dynamicValue", setter="dynamicValue", searcher=StringSearch("dynamicValue"))
        goalId = Attribute(getter="goalId", setter="goalId", searcher=StringSearch("goalId"))
        groupingBehavior = Attribute(getter="groupingBehavior", setter="groupingBehavior", searcher=StringSearch("groupingBehavior"))
        input = EmbeddedAttribute(type="DataRequirement", getter="input", setter="input", searcher=StringSearch("input"))
        label = Attribute(getter="label", setter="label", searcher=StringSearch("label"))
        output = EmbeddedAttribute(type="DataRequirement", getter="output", setter="output", searcher=StringSearch("output"))
        participant = EmbeddedAttribute(type="PlanDefinitionActionParticipant", getter="participant", setter="participant", searcher=StringSearch("participant"))
        precheckBehavior = Attribute(getter="precheckBehavior", setter="precheckBehavior", searcher=StringSearch("precheckBehavior"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        relatedAction = EmbeddedAttribute(type="PlanDefinitionActionRelatedAction", getter="relatedAction", setter="relatedAction", searcher=StringSearch("relatedAction"))
        requiredBehavior = Attribute(getter="requiredBehavior", setter="requiredBehavior", searcher=StringSearch("requiredBehavior"))
        selectionBehavior = Attribute(getter="selectionBehavior", setter="selectionBehavior", searcher=StringSearch("selectionBehavior"))
        textEquivalent = Attribute(getter="textEquivalent", setter="textEquivalent", searcher=StringSearch("textEquivalent"))
        timingDateTime = DateAttribute("timingDateTime")
        timingDuration = EmbeddedAttribute(type="Duration", getter="timingDuration", setter="timingDuration", searcher=StringSearch("timingDuration"))
        timingPeriod = EmbeddedAttribute(type="Period", getter="timingPeriod", setter="timingPeriod", searcher=StringSearch("timingPeriod"))
        timingRange = EmbeddedAttribute(type="Range", getter="timingRange", setter="timingRange", searcher=StringSearch("timingRange"))
        timingTiming = EmbeddedAttribute(type="Timing", getter="timingTiming", setter="timingTiming", searcher=StringSearch("timingTiming"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        transform = ObjectIdReferenceAttribute({'StructureMap'}, ("transform", str), "transform", pk_setter="transform")
        triggerDefinition = EmbeddedAttribute(type="TriggerDefinition", getter="triggerDefinition", setter="triggerDefinition", searcher=StringSearch("triggerDefinition"))
        type = EmbeddedAttribute(type="Coding", getter="type", setter="type", searcher=StringSearch("type"))

class PlanDefinitionActionCondition(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    expression = fields.CharField(blank=True, required=False)
    kind = fields.CharField(blank=False, required=True)
    language = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))

class PlanDefinitionActionDynamicValue(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    expression = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    path = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))

class PlanDefinitionActionParticipant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class PlanDefinitionActionRelatedAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actionId = fields.CharField(blank=False, required=True)
    offsetDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    offsetRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    relationship = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actionId = Attribute(getter="actionId", setter="actionId", searcher=StringSearch("actionId"))
        offsetDuration = EmbeddedAttribute(type="Duration", getter="offsetDuration", setter="offsetDuration", searcher=StringSearch("offsetDuration"))
        offsetRange = EmbeddedAttribute(type="Range", getter="offsetRange", setter="offsetRange", searcher=StringSearch("offsetRange"))
        relationship = Attribute(getter="relationship", setter="relationship", searcher=StringSearch("relationship"))

class PlanDefinitionGoal(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    addresses = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    description = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    documentation = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    priority = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    start = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    target = fields.EmbeddedDocumentListField("PlanDefinitionGoalTarget", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        addresses = EmbeddedAttribute(type="CodeableConcept", getter="addresses", setter="addresses", searcher=StringSearch("addresses"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        description = EmbeddedAttribute(type="CodeableConcept", getter="description", setter="description", searcher=StringSearch("description"))
        documentation = EmbeddedAttribute(type="RelatedArtifact", getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        priority = EmbeddedAttribute(type="CodeableConcept", getter="priority", setter="priority", searcher=StringSearch("priority"))
        start = EmbeddedAttribute(type="CodeableConcept", getter="start", setter="start", searcher=StringSearch("start"))
        target = EmbeddedAttribute(type="PlanDefinitionGoalTarget", getter="target", setter="target", searcher=StringSearch("target"))

class PlanDefinitionGoalTarget(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    detailCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    detailQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    detailRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    due = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    measure = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        detailCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="detailCodeableConcept", setter="detailCodeableConcept", searcher=StringSearch("detailCodeableConcept"))
        detailQuantity = EmbeddedAttribute(type="Quantity", getter="detailQuantity", setter="detailQuantity", searcher=StringSearch("detailQuantity"))
        detailRange = EmbeddedAttribute(type="Range", getter="detailRange", setter="detailRange", searcher=StringSearch("detailRange"))
        due = EmbeddedAttribute(type="Duration", getter="due", setter="due", searcher=StringSearch("due"))
        measure = EmbeddedAttribute(type="CodeableConcept", getter="measure", setter="measure", searcher=StringSearch("measure"))

class Practitioner(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    address = fields.EmbeddedDocumentListField("Address", blank=True, required=False)
    birthDate = fields.DateTimeField(blank=True, required=False)
    communication = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    gender = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    name = fields.EmbeddedDocumentListField("HumanName", blank=True, required=False)
    photo = fields.EmbeddedDocumentListField("Attachment", blank=True, required=False)
    qualification = fields.EmbeddedDocumentListField("PractitionerQualification", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        birthDate = DateAttribute("birthDate")
        communication = EmbeddedAttribute(type="CodeableConcept", getter="communication", setter="communication", searcher=StringSearch("communication"))
        gender = Attribute(getter="gender", setter="gender", searcher=StringSearch("gender"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        name = EmbeddedAttribute(type="HumanName", getter="name", setter="name", searcher=StringSearch("name"))
        photo = EmbeddedAttribute(type="Attachment", getter="photo", setter="photo", searcher=StringSearch("photo"))
        qualification = EmbeddedAttribute(type="PractitionerQualification", getter="qualification", setter="qualification", searcher=StringSearch("qualification"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class PractitionerQualification(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    issuer = fields.ObjectIdField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        issuer = ObjectIdReferenceAttribute({'Organization'}, ("issuer", str), "issuer", pk_setter="issuer")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))

class PractitionerRole(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    availabilityExceptions = fields.CharField(blank=True, required=False)
    availableTime = fields.EmbeddedDocumentListField("PractitionerRoleAvailableTime", blank=True, required=False)
    code = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    endpoint = fields.ObjectIdField(blank=True, required=False)
    healthcareService = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    location = fields.ObjectIdField(blank=True, required=False)
    notAvailable = fields.EmbeddedDocumentListField("PractitionerRoleNotAvailable", blank=True, required=False)
    organization = fields.ObjectIdField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    practitioner = fields.ObjectIdField(blank=True, required=False)
    specialty = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        availabilityExceptions = Attribute(getter="availabilityExceptions", setter="availabilityExceptions", searcher=StringSearch("availabilityExceptions"))
        availableTime = EmbeddedAttribute(type="PractitionerRoleAvailableTime", getter="availableTime", setter="availableTime", searcher=StringSearch("availableTime"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        endpoint = ObjectIdReferenceAttribute({'Endpoint'}, ("endpoint", str), "endpoint", pk_setter="endpoint")
        healthcareService = ObjectIdReferenceAttribute({'HealthcareService'}, ("healthcareService", str), "healthcareService", pk_setter="healthcareService")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        location = ObjectIdReferenceAttribute({'Location'}, ("location", str), "location", pk_setter="location")
        notAvailable = EmbeddedAttribute(type="PractitionerRoleNotAvailable", getter="notAvailable", setter="notAvailable", searcher=StringSearch("notAvailable"))
        organization = ObjectIdReferenceAttribute({'Organization'}, ("organization", str), "organization", pk_setter="organization")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        practitioner = ObjectIdReferenceAttribute({'Practitioner'}, ("practitioner", str), "practitioner", pk_setter="practitioner")
        specialty = EmbeddedAttribute(type="CodeableConcept", getter="specialty", setter="specialty", searcher=StringSearch("specialty"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class PractitionerRoleAvailableTime(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    allDay = fields.BooleanField(blank=True, required=False)
    availableEndTime = fields.DateTimeField(blank=True, required=False)
    availableStartTime = fields.DateTimeField(blank=True, required=False)
    daysOfWeek = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        allDay = Attribute(getter="allDay", setter="allDay", searcher=StringSearch("allDay"))
        availableEndTime = DateAttribute("availableEndTime")
        availableStartTime = DateAttribute("availableStartTime")
        daysOfWeek = Attribute(getter="daysOfWeek", setter="daysOfWeek", searcher=StringSearch("daysOfWeek"))

class PractitionerRoleNotAvailable(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=False, required=True)
    during = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        during = EmbeddedAttribute(type="Period", getter="during", setter="during", searcher=StringSearch("during"))

class Procedure(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    bodySite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    complication = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    complicationDetail = fields.ObjectIdField(blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    definition = fields.ObjectIdField(blank=True, required=False)
    focalDevice = fields.EmbeddedDocumentListField("ProcedureFocalDevice", blank=True, required=False)
    followUp = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    location = fields.ObjectIdField(blank=True, required=False)
    notDone = fields.BooleanField(blank=True, required=False)
    notDoneReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    partOf = fields.ObjectIdField(blank=True, required=False)
    performedDateTime = fields.DateTimeField(blank=True, required=False)
    performedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    performer = fields.EmbeddedDocumentListField("ProcedurePerformer", blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    report = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=False, required=True)
    usedCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    usedReference = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        basedOn = ObjectIdReferenceAttribute({'CarePlan', 'ProcedureRequest', 'ReferralRequest'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        complication = EmbeddedAttribute(type="CodeableConcept", getter="complication", setter="complication", searcher=StringSearch("complication"))
        complicationDetail = ObjectIdReferenceAttribute({'Condition'}, ("complicationDetail", str), "complicationDetail", pk_setter="complicationDetail")
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        definition = ObjectIdReferenceAttribute({'PlanDefinition', 'ActivityDefinition', 'HealthcareService'}, ("definition", str), "definition", pk_setter="definition")
        focalDevice = EmbeddedAttribute(type="ProcedureFocalDevice", getter="focalDevice", setter="focalDevice", searcher=StringSearch("focalDevice"))
        followUp = EmbeddedAttribute(type="CodeableConcept", getter="followUp", setter="followUp", searcher=StringSearch("followUp"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        location = ObjectIdReferenceAttribute({'Location'}, ("location", str), "location", pk_setter="location")
        notDone = Attribute(getter="notDone", setter="notDone", searcher=StringSearch("notDone"))
        notDoneReason = EmbeddedAttribute(type="CodeableConcept", getter="notDoneReason", setter="notDoneReason", searcher=StringSearch("notDoneReason"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        outcome = EmbeddedAttribute(type="CodeableConcept", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        partOf = ObjectIdReferenceAttribute({'MedicationAdministration', 'Procedure', 'Observation'}, ("partOf", str), "partOf", pk_setter="partOf")
        performedDateTime = DateAttribute("performedDateTime")
        performedPeriod = EmbeddedAttribute(type="Period", getter="performedPeriod", setter="performedPeriod", searcher=StringSearch("performedPeriod"))
        performer = EmbeddedAttribute(type="ProcedurePerformer", getter="performer", setter="performer", searcher=StringSearch("performer"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = ObjectIdReferenceAttribute({'Condition', 'Observation'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        report = ObjectIdReferenceAttribute({'DiagnosticReport'}, ("report", str), "report", pk_setter="report")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")
        usedCode = EmbeddedAttribute(type="CodeableConcept", getter="usedCode", setter="usedCode", searcher=StringSearch("usedCode"))
        usedReference = ObjectIdReferenceAttribute({'Substance', 'Device', 'Medication'}, ("usedReference", str), "usedReference", pk_setter="usedReference")

class ProcedureFocalDevice(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    manipulated = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="CodeableConcept", getter="action", setter="action", searcher=StringSearch("action"))
        manipulated = ObjectIdReferenceAttribute({'Device'}, ("manipulated", str), "manipulated", pk_setter="manipulated")

class ProcedurePerformer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actor = fields.ObjectIdField(blank=False, required=True)
    onBehalfOf = fields.ObjectIdField(blank=True, required=False)
    role = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actor = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("actor", str), "actor", pk_setter="actor")
        onBehalfOf = ObjectIdReferenceAttribute({'Organization'}, ("onBehalfOf", str), "onBehalfOf", pk_setter="onBehalfOf")
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))

class ProcedureRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    asNeededBoolean = fields.BooleanField(blank=True, required=False)
    asNeededCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    bodySite = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    definition = fields.ObjectIdField(blank=True, required=False)
    doNotPerform = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    intent = fields.CharField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    occurrenceTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    performer = fields.ObjectIdField(blank=True, required=False)
    performerType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    relevantHistory = fields.ObjectIdField(blank=True, required=False)
    replaces = fields.ObjectIdField(blank=True, required=False)
    requester = fields.EmbeddedDocumentField("ProcedureRequestRequester", blank=True, required=False)
    requisition = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    specimen = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=False, required=True)
    supportingInfo = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        asNeededBoolean = Attribute(getter="asNeededBoolean", setter="asNeededBoolean", searcher=StringSearch("asNeededBoolean"))
        asNeededCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="asNeededCodeableConcept", setter="asNeededCodeableConcept", searcher=StringSearch("asNeededCodeableConcept"))
        authoredOn = DateAttribute("authoredOn")
        basedOn = ObjectIdReferenceAttribute({'Resource'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        definition = ObjectIdReferenceAttribute({'PlanDefinition', 'ActivityDefinition'}, ("definition", str), "definition", pk_setter="definition")
        doNotPerform = Attribute(getter="doNotPerform", setter="doNotPerform", searcher=StringSearch("doNotPerform"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        intent = Attribute(getter="intent", setter="intent", searcher=StringSearch("intent"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        occurrenceTiming = EmbeddedAttribute(type="Timing", getter="occurrenceTiming", setter="occurrenceTiming", searcher=StringSearch("occurrenceTiming"))
        performer = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'HealthcareService', 'Device'}, ("performer", str), "performer", pk_setter="performer")
        performerType = EmbeddedAttribute(type="CodeableConcept", getter="performerType", setter="performerType", searcher=StringSearch("performerType"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = ObjectIdReferenceAttribute({'Condition', 'Observation'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        relevantHistory = ObjectIdReferenceAttribute({'Provenance'}, ("relevantHistory", str), "relevantHistory", pk_setter="relevantHistory")
        replaces = ObjectIdReferenceAttribute({'Resource'}, ("replaces", str), "replaces", pk_setter="replaces")
        requester = EmbeddedAttribute(type="ProcedureRequestRequester", getter="requester", setter="requester", searcher=StringSearch("requester"))
        requisition = EmbeddedAttribute(type="Identifier", getter="requisition", setter="requisition", searcher=StringSearch("requisition"))
        specimen = ObjectIdReferenceAttribute({'Specimen'}, ("specimen", str), "specimen", pk_setter="specimen")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Device', 'Patient', 'Group', 'Location'}, ("subject", str), "subject", pk_setter="subject")
        supportingInfo = ObjectIdReferenceAttribute({'Resource'}, ("supportingInfo", str), "supportingInfo", pk_setter="supportingInfo")

class ProcedureRequestRequester(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    agent = fields.ObjectIdField(blank=False, required=True)
    onBehalfOf = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        agent = ObjectIdReferenceAttribute({'Device', 'Practitioner', 'Organization'}, ("agent", str), "agent", pk_setter="agent")
        onBehalfOf = ObjectIdReferenceAttribute({'Organization'}, ("onBehalfOf", str), "onBehalfOf", pk_setter="onBehalfOf")

class ProcessRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    action = fields.CharField(blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    exclude = fields.ListField(fields.CharField(), blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    include = fields.ListField(fields.CharField(), blank=True, required=False)
    item = fields.EmbeddedDocumentListField("ProcessRequestItem", blank=True, required=False)
    nullify = fields.BooleanField(blank=True, required=False)
    organization = fields.ObjectIdField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    provider = fields.ObjectIdField(blank=True, required=False)
    reference = fields.CharField(blank=True, required=False)
    request = fields.ObjectIdField(blank=True, required=False)
    response = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    target = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        action = Attribute(getter="action", setter="action", searcher=StringSearch("action"))
        created = DateAttribute("created")
        exclude = Attribute(getter="exclude", setter="exclude", searcher=StringSearch("exclude"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        include = Attribute(getter="include", setter="include", searcher=StringSearch("include"))
        item = EmbeddedAttribute(type="ProcessRequestItem", getter="item", setter="item", searcher=StringSearch("item"))
        nullify = Attribute(getter="nullify", setter="nullify", searcher=StringSearch("nullify"))
        organization = ObjectIdReferenceAttribute({'Organization'}, ("organization", str), "organization", pk_setter="organization")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        provider = ObjectIdReferenceAttribute({'Practitioner'}, ("provider", str), "provider", pk_setter="provider")
        reference = Attribute(getter="reference", setter="reference", searcher=StringSearch("reference"))
        request = ObjectIdReferenceAttribute({'Resource'}, ("request", str), "request", pk_setter="request")
        response = ObjectIdReferenceAttribute({'Resource'}, ("response", str), "response", pk_setter="response")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        target = ObjectIdReferenceAttribute({'Organization'}, ("target", str), "target", pk_setter="target")

class ProcessRequestItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    sequenceLinkId = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        sequenceLinkId = Attribute(getter="sequenceLinkId", setter="sequenceLinkId", searcher=NumericSearch("sequenceLinkId"))

class ProcessResponse(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    communicationRequest = fields.ObjectIdField(blank=True, required=False)
    created = fields.DateTimeField(blank=True, required=False)
    disposition = fields.CharField(blank=True, required=False)
    error = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    form = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    organization = fields.ObjectIdField(blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    processNote = fields.EmbeddedDocumentListField("ProcessResponseProcessNote", blank=True, required=False)
    request = fields.ObjectIdField(blank=True, required=False)
    requestOrganization = fields.ObjectIdField(blank=True, required=False)
    requestProvider = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        communicationRequest = ObjectIdReferenceAttribute({'CommunicationRequest'}, ("communicationRequest", str), "communicationRequest", pk_setter="communicationRequest")
        created = DateAttribute("created")
        disposition = Attribute(getter="disposition", setter="disposition", searcher=StringSearch("disposition"))
        error = EmbeddedAttribute(type="CodeableConcept", getter="error", setter="error", searcher=StringSearch("error"))
        form = EmbeddedAttribute(type="CodeableConcept", getter="form", setter="form", searcher=StringSearch("form"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        organization = ObjectIdReferenceAttribute({'Organization'}, ("organization", str), "organization", pk_setter="organization")
        outcome = EmbeddedAttribute(type="CodeableConcept", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        processNote = EmbeddedAttribute(type="ProcessResponseProcessNote", getter="processNote", setter="processNote", searcher=StringSearch("processNote"))
        request = ObjectIdReferenceAttribute({'Resource'}, ("request", str), "request", pk_setter="request")
        requestOrganization = ObjectIdReferenceAttribute({'Organization'}, ("requestOrganization", str), "requestOrganization", pk_setter="requestOrganization")
        requestProvider = ObjectIdReferenceAttribute({'Practitioner'}, ("requestProvider", str), "requestProvider", pk_setter="requestProvider")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class ProcessResponseProcessNote(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class Provenance(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    activity = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    agent = fields.EmbeddedDocumentListField("ProvenanceAgent", blank=False, required=True)
    entity = fields.EmbeddedDocumentListField("ProvenanceEntity", blank=True, required=False)
    location = fields.ObjectIdField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    policy = fields.ListField(fields.CharField(), blank=True, required=False)
    reason = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    recorded = fields.DateTimeField(blank=False, required=True)
    signature = fields.EmbeddedDocumentListField("Signature", blank=True, required=False)
    target = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        activity = EmbeddedAttribute(type="Coding", getter="activity", setter="activity", searcher=StringSearch("activity"))
        agent = EmbeddedAttribute(type="ProvenanceAgent", getter="agent", setter="agent", searcher=StringSearch("agent"))
        entity = EmbeddedAttribute(type="ProvenanceEntity", getter="entity", setter="entity", searcher=StringSearch("entity"))
        location = ObjectIdReferenceAttribute({'Location'}, ("location", str), "location", pk_setter="location")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        policy = Attribute(getter="policy", setter="policy", searcher=StringSearch("policy"))
        reason = EmbeddedAttribute(type="Coding", getter="reason", setter="reason", searcher=StringSearch("reason"))
        recorded = DateAttribute("recorded")
        signature = EmbeddedAttribute(type="Signature", getter="signature", setter="signature", searcher=StringSearch("signature"))
        target = ObjectIdReferenceAttribute({'Resource'}, ("target", str), "target", pk_setter="target")

class ProvenanceAgent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    onBehalfOfReference = fields.ObjectIdField(blank=True, required=False)
    onBehalfOfUri = fields.CharField(blank=True, required=False)
    relatedAgentType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    role = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    whoReference = fields.ObjectIdField(blank=False, required=True)
    whoUri = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        onBehalfOfReference = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("onBehalfOfReference", str), "onBehalfOfReference", pk_setter="onBehalfOfReference")
        onBehalfOfUri = Attribute(getter="onBehalfOfUri", setter="onBehalfOfUri", searcher=StringSearch("onBehalfOfUri"))
        relatedAgentType = EmbeddedAttribute(type="CodeableConcept", getter="relatedAgentType", setter="relatedAgentType", searcher=StringSearch("relatedAgentType"))
        role = EmbeddedAttribute(type="CodeableConcept", getter="role", setter="role", searcher=StringSearch("role"))
        whoReference = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("whoReference", str), "whoReference", pk_setter="whoReference")
        whoUri = Attribute(getter="whoUri", setter="whoUri", searcher=StringSearch("whoUri"))

class ProvenanceEntity(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    agent = fields.EmbeddedDocumentListField("ProvenanceAgent", blank=True, required=False)
    role = fields.CharField(blank=False, required=True)
    whatIdentifier = fields.EmbeddedDocumentField("Identifier", blank=False, required=True)
    whatReference = fields.ObjectIdField(blank=False, required=True)
    whatUri = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        agent = EmbeddedAttribute(type="ProvenanceAgent", getter="agent", setter="agent", searcher=StringSearch("agent"))
        role = Attribute(getter="role", setter="role", searcher=StringSearch("role"))
        whatIdentifier = EmbeddedAttribute(type="Identifier", getter="whatIdentifier", setter="whatIdentifier", searcher=StringSearch("whatIdentifier"))
        whatReference = ObjectIdReferenceAttribute({'Resource'}, ("whatReference", str), "whatReference", pk_setter="whatReference")
        whatUri = Attribute(getter="whatUri", setter="whatUri", searcher=StringSearch("whatUri"))

class Quantity(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    comparator = fields.CharField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    unit = fields.CharField(blank=True, required=False)
    value = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comparator = Attribute(getter="comparator", setter="comparator", searcher=StringSearch("comparator"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        unit = Attribute(getter="unit", setter="unit", searcher=StringSearch("unit"))
        value = Attribute(getter="value", setter="value", searcher=NumericSearch("value"))

class Questionnaire(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    code = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    item = fields.EmbeddedDocumentListField("QuestionnaireItem", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subjectType = fields.ListField(fields.CharField(), blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        code = EmbeddedAttribute(type="Coding", getter="code", setter="code", searcher=StringSearch("code"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        item = EmbeddedAttribute(type="QuestionnaireItem", getter="item", setter="item", searcher=StringSearch("item"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subjectType = Attribute(getter="subjectType", setter="subjectType", searcher=StringSearch("subjectType"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class QuestionnaireItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    definition = fields.CharField(blank=True, required=False)
    enableWhen = fields.EmbeddedDocumentListField("QuestionnaireItemEnableWhen", blank=True, required=False)
    initialAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    initialBoolean = fields.BooleanField(blank=True, required=False)
    initialCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    initialDate = fields.DateTimeField(blank=True, required=False)
    initialDateTime = fields.DateTimeField(blank=True, required=False)
    initialDecimal = fields.FloatField(blank=True, required=False)
    initialInteger = fields.IntegerField(blank=True, required=False)
    initialQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    initialReference = fields.ObjectIdField(blank=True, required=False)
    initialString = fields.CharField(blank=True, required=False)
    initialTime = fields.DateTimeField(blank=True, required=False)
    initialUri = fields.CharField(blank=True, required=False)
    item = fields.EmbeddedDocumentListField("QuestionnaireItem", blank=True, required=False)
    linkId = fields.CharField(blank=False, required=True)
    maxLength = fields.IntegerField(blank=True, required=False)
    option = fields.EmbeddedDocumentListField("QuestionnaireItemOption", blank=True, required=False)
    options = fields.ObjectIdField(blank=True, required=False)
    prefix = fields.CharField(blank=True, required=False)
    readOnly = fields.BooleanField(blank=True, required=False)
    repeats = fields.BooleanField(blank=True, required=False)
    required = fields.BooleanField(blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="Coding", getter="code", setter="code", searcher=StringSearch("code"))
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        enableWhen = EmbeddedAttribute(type="QuestionnaireItemEnableWhen", getter="enableWhen", setter="enableWhen", searcher=StringSearch("enableWhen"))
        initialAttachment = EmbeddedAttribute(type="Attachment", getter="initialAttachment", setter="initialAttachment", searcher=StringSearch("initialAttachment"))
        initialBoolean = Attribute(getter="initialBoolean", setter="initialBoolean", searcher=StringSearch("initialBoolean"))
        initialCoding = EmbeddedAttribute(type="Coding", getter="initialCoding", setter="initialCoding", searcher=StringSearch("initialCoding"))
        initialDate = DateAttribute("initialDate")
        initialDateTime = DateAttribute("initialDateTime")
        initialDecimal = Attribute(getter="initialDecimal", setter="initialDecimal", searcher=NumericSearch("initialDecimal"))
        initialInteger = Attribute(getter="initialInteger", setter="initialInteger", searcher=NumericSearch("initialInteger"))
        initialQuantity = EmbeddedAttribute(type="Quantity", getter="initialQuantity", setter="initialQuantity", searcher=StringSearch("initialQuantity"))
        initialReference = ObjectIdReferenceAttribute({'Resource'}, ("initialReference", str), "initialReference", pk_setter="initialReference")
        initialString = Attribute(getter="initialString", setter="initialString", searcher=StringSearch("initialString"))
        initialTime = DateAttribute("initialTime")
        initialUri = Attribute(getter="initialUri", setter="initialUri", searcher=StringSearch("initialUri"))
        item = EmbeddedAttribute(type="QuestionnaireItem", getter="item", setter="item", searcher=StringSearch("item"))
        linkId = Attribute(getter="linkId", setter="linkId", searcher=StringSearch("linkId"))
        maxLength = Attribute(getter="maxLength", setter="maxLength", searcher=NumericSearch("maxLength"))
        option = EmbeddedAttribute(type="QuestionnaireItemOption", getter="option", setter="option", searcher=StringSearch("option"))
        options = ObjectIdReferenceAttribute({'ValueSet'}, ("options", str), "options", pk_setter="options")
        prefix = Attribute(getter="prefix", setter="prefix", searcher=StringSearch("prefix"))
        readOnly = Attribute(getter="readOnly", setter="readOnly", searcher=StringSearch("readOnly"))
        repeats = Attribute(getter="repeats", setter="repeats", searcher=StringSearch("repeats"))
        required = Attribute(getter="required", setter="required", searcher=StringSearch("required"))
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class QuestionnaireItemEnableWhen(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    answerAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    answerBoolean = fields.BooleanField(blank=True, required=False)
    answerCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    answerDate = fields.DateTimeField(blank=True, required=False)
    answerDateTime = fields.DateTimeField(blank=True, required=False)
    answerDecimal = fields.FloatField(blank=True, required=False)
    answerInteger = fields.IntegerField(blank=True, required=False)
    answerQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    answerReference = fields.ObjectIdField(blank=True, required=False)
    answerString = fields.CharField(blank=True, required=False)
    answerTime = fields.DateTimeField(blank=True, required=False)
    answerUri = fields.CharField(blank=True, required=False)
    hasAnswer = fields.BooleanField(blank=True, required=False)
    question = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        answerAttachment = EmbeddedAttribute(type="Attachment", getter="answerAttachment", setter="answerAttachment", searcher=StringSearch("answerAttachment"))
        answerBoolean = Attribute(getter="answerBoolean", setter="answerBoolean", searcher=StringSearch("answerBoolean"))
        answerCoding = EmbeddedAttribute(type="Coding", getter="answerCoding", setter="answerCoding", searcher=StringSearch("answerCoding"))
        answerDate = DateAttribute("answerDate")
        answerDateTime = DateAttribute("answerDateTime")
        answerDecimal = Attribute(getter="answerDecimal", setter="answerDecimal", searcher=NumericSearch("answerDecimal"))
        answerInteger = Attribute(getter="answerInteger", setter="answerInteger", searcher=NumericSearch("answerInteger"))
        answerQuantity = EmbeddedAttribute(type="Quantity", getter="answerQuantity", setter="answerQuantity", searcher=StringSearch("answerQuantity"))
        answerReference = ObjectIdReferenceAttribute({'Resource'}, ("answerReference", str), "answerReference", pk_setter="answerReference")
        answerString = Attribute(getter="answerString", setter="answerString", searcher=StringSearch("answerString"))
        answerTime = DateAttribute("answerTime")
        answerUri = Attribute(getter="answerUri", setter="answerUri", searcher=StringSearch("answerUri"))
        hasAnswer = Attribute(getter="hasAnswer", setter="hasAnswer", searcher=StringSearch("hasAnswer"))
        question = Attribute(getter="question", setter="question", searcher=StringSearch("question"))

class QuestionnaireItemOption(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    valueCoding = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    valueDate = fields.DateTimeField(blank=False, required=True)
    valueInteger = fields.IntegerField(blank=False, required=True)
    valueString = fields.CharField(blank=False, required=True)
    valueTime = fields.DateTimeField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueDate = DateAttribute("valueDate")
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")

class QuestionnaireResponse(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    author = fields.ObjectIdField(blank=True, required=False)
    authored = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    item = fields.EmbeddedDocumentListField("QuestionnaireResponseItem", blank=True, required=False)
    parent = fields.ObjectIdField(blank=True, required=False)
    questionnaire = fields.ObjectIdField(blank=True, required=False)
    source = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        author = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Device', 'Practitioner'}, ("author", str), "author", pk_setter="author")
        authored = DateAttribute("authored")
        basedOn = ObjectIdReferenceAttribute({'CarePlan', 'ProcedureRequest', 'ReferralRequest'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        item = EmbeddedAttribute(type="QuestionnaireResponseItem", getter="item", setter="item", searcher=StringSearch("item"))
        parent = ObjectIdReferenceAttribute({'Procedure', 'Observation'}, ("parent", str), "parent", pk_setter="parent")
        questionnaire = ObjectIdReferenceAttribute({'Questionnaire'}, ("questionnaire", str), "questionnaire", pk_setter="questionnaire")
        source = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Practitioner'}, ("source", str), "source", pk_setter="source")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Resource'}, ("subject", str), "subject", pk_setter="subject")

class QuestionnaireResponseItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    answer = fields.EmbeddedDocumentListField("QuestionnaireResponseItemAnswer", blank=True, required=False)
    definition = fields.CharField(blank=True, required=False)
    item = fields.EmbeddedDocumentListField("QuestionnaireResponseItem", blank=True, required=False)
    linkId = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=True, required=False)
    text = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        answer = EmbeddedAttribute(type="QuestionnaireResponseItemAnswer", getter="answer", setter="answer", searcher=StringSearch("answer"))
        definition = Attribute(getter="definition", setter="definition", searcher=StringSearch("definition"))
        item = EmbeddedAttribute(type="QuestionnaireResponseItem", getter="item", setter="item", searcher=StringSearch("item"))
        linkId = Attribute(getter="linkId", setter="linkId", searcher=StringSearch("linkId"))
        subject = ObjectIdReferenceAttribute({'Resource'}, ("subject", str), "subject", pk_setter="subject")
        text = Attribute(getter="text", setter="text", searcher=StringSearch("text"))

class QuestionnaireResponseItemAnswer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    item = fields.EmbeddedDocumentListField("QuestionnaireResponseItem", blank=True, required=False)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    valueDate = fields.DateTimeField(blank=True, required=False)
    valueDateTime = fields.DateTimeField(blank=True, required=False)
    valueDecimal = fields.FloatField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    valueReference = fields.ObjectIdField(blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueTime = fields.DateTimeField(blank=True, required=False)
    valueUri = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        item = EmbeddedAttribute(type="QuestionnaireResponseItem", getter="item", setter="item", searcher=StringSearch("item"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueDate = DateAttribute("valueDate")
        valueDateTime = DateAttribute("valueDateTime")
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueReference = ObjectIdReferenceAttribute({'Resource'}, ("valueReference", str), "valueReference", pk_setter="valueReference")
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")
        valueUri = Attribute(getter="valueUri", setter="valueUri", searcher=StringSearch("valueUri"))

class Range(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    high = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    low = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        high = EmbeddedAttribute(type="Quantity", getter="high", setter="high", searcher=StringSearch("high"))
        low = EmbeddedAttribute(type="Quantity", getter="low", setter="low", searcher=StringSearch("low"))

class Ratio(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    denominator = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    numerator = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        denominator = EmbeddedAttribute(type="Quantity", getter="denominator", setter="denominator", searcher=StringSearch("denominator"))
        numerator = EmbeddedAttribute(type="Quantity", getter="numerator", setter="numerator", searcher=StringSearch("numerator"))

class Reference(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    reference = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        reference = Attribute(getter="reference", setter="reference", searcher=StringSearch("reference"))

class ReferralRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    definition = fields.ObjectIdField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    groupIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    intent = fields.CharField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reasonCode = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    recipient = fields.ObjectIdField(blank=True, required=False)
    relevantHistory = fields.ObjectIdField(blank=True, required=False)
    replaces = fields.ObjectIdField(blank=True, required=False)
    requester = fields.EmbeddedDocumentField("ReferralRequestRequester", blank=True, required=False)
    serviceRequested = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    specialty = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=False, required=True)
    supportingInfo = fields.ObjectIdField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authoredOn = DateAttribute("authoredOn")
        basedOn = ObjectIdReferenceAttribute({'CarePlan', 'ProcedureRequest', 'ReferralRequest'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        definition = ObjectIdReferenceAttribute({'PlanDefinition', 'ActivityDefinition'}, ("definition", str), "definition", pk_setter="definition")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        groupIdentifier = EmbeddedAttribute(type="Identifier", getter="groupIdentifier", setter="groupIdentifier", searcher=StringSearch("groupIdentifier"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        intent = Attribute(getter="intent", setter="intent", searcher=StringSearch("intent"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reasonCode = EmbeddedAttribute(type="CodeableConcept", getter="reasonCode", setter="reasonCode", searcher=StringSearch("reasonCode"))
        reasonReference = ObjectIdReferenceAttribute({'Condition', 'Observation'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        recipient = ObjectIdReferenceAttribute({'HealthcareService', 'Practitioner', 'Organization'}, ("recipient", str), "recipient", pk_setter="recipient")
        relevantHistory = ObjectIdReferenceAttribute({'Provenance'}, ("relevantHistory", str), "relevantHistory", pk_setter="relevantHistory")
        replaces = ObjectIdReferenceAttribute({'ReferralRequest'}, ("replaces", str), "replaces", pk_setter="replaces")
        requester = EmbeddedAttribute(type="ReferralRequestRequester", getter="requester", setter="requester", searcher=StringSearch("requester"))
        serviceRequested = EmbeddedAttribute(type="CodeableConcept", getter="serviceRequested", setter="serviceRequested", searcher=StringSearch("serviceRequested"))
        specialty = EmbeddedAttribute(type="CodeableConcept", getter="specialty", setter="specialty", searcher=StringSearch("specialty"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")
        supportingInfo = ObjectIdReferenceAttribute({'Resource'}, ("supportingInfo", str), "supportingInfo", pk_setter="supportingInfo")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class ReferralRequestRequester(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    agent = fields.ObjectIdField(blank=False, required=True)
    onBehalfOf = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        agent = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("agent", str), "agent", pk_setter="agent")
        onBehalfOf = ObjectIdReferenceAttribute({'Organization'}, ("onBehalfOf", str), "onBehalfOf", pk_setter="onBehalfOf")

class RelatedArtifact(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    citation = fields.CharField(blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    document = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    resource = fields.ObjectIdField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        citation = Attribute(getter="citation", setter="citation", searcher=StringSearch("citation"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        document = EmbeddedAttribute(type="Attachment", getter="document", setter="document", searcher=StringSearch("document"))
        resource = ObjectIdReferenceAttribute({'Resource'}, ("resource", str), "resource", pk_setter="resource")
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class RelatedPerson(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    address = fields.EmbeddedDocumentListField("Address", blank=True, required=False)
    birthDate = fields.DateTimeField(blank=True, required=False)
    gender = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    name = fields.EmbeddedDocumentListField("HumanName", blank=True, required=False)
    patient = fields.ObjectIdField(blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    photo = fields.EmbeddedDocumentListField("Attachment", blank=True, required=False)
    relationship = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    telecom = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        address = EmbeddedAttribute(type="Address", getter="address", setter="address", searcher=StringSearch("address"))
        birthDate = DateAttribute("birthDate")
        gender = Attribute(getter="gender", setter="gender", searcher=StringSearch("gender"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        name = EmbeddedAttribute(type="HumanName", getter="name", setter="name", searcher=StringSearch("name"))
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        photo = EmbeddedAttribute(type="Attachment", getter="photo", setter="photo", searcher=StringSearch("photo"))
        relationship = EmbeddedAttribute(type="CodeableConcept", getter="relationship", setter="relationship", searcher=StringSearch("relationship"))
        telecom = EmbeddedAttribute(type="ContactPoint", getter="telecom", setter="telecom", searcher=StringSearch("telecom"))

class RequestGroup(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("RequestGroupAction", blank=True, required=False)
    author = fields.ObjectIdField(blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    definition = fields.ObjectIdField(blank=True, required=False)
    groupIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    intent = fields.CharField(blank=False, required=True)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reasonCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    replaces = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        action = EmbeddedAttribute(type="RequestGroupAction", getter="action", setter="action", searcher=StringSearch("action"))
        author = ObjectIdReferenceAttribute({'Device', 'Practitioner'}, ("author", str), "author", pk_setter="author")
        authoredOn = DateAttribute("authoredOn")
        basedOn = ObjectIdReferenceAttribute({'Resource'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        definition = ObjectIdReferenceAttribute({'Resource'}, ("definition", str), "definition", pk_setter="definition")
        groupIdentifier = EmbeddedAttribute(type="Identifier", getter="groupIdentifier", setter="groupIdentifier", searcher=StringSearch("groupIdentifier"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        intent = Attribute(getter="intent", setter="intent", searcher=StringSearch("intent"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reasonCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="reasonCodeableConcept", setter="reasonCodeableConcept", searcher=StringSearch("reasonCodeableConcept"))
        reasonReference = ObjectIdReferenceAttribute({'Resource'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        replaces = ObjectIdReferenceAttribute({'Resource'}, ("replaces", str), "replaces", pk_setter="replaces")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")

class RequestGroupAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("RequestGroupAction", blank=True, required=False)
    cardinalityBehavior = fields.CharField(blank=True, required=False)
    code = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    condition = fields.EmbeddedDocumentListField("RequestGroupActionCondition", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    documentation = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    groupingBehavior = fields.CharField(blank=True, required=False)
    label = fields.CharField(blank=True, required=False)
    participant = fields.ObjectIdField(blank=True, required=False)
    precheckBehavior = fields.CharField(blank=True, required=False)
    relatedAction = fields.EmbeddedDocumentListField("RequestGroupActionRelatedAction", blank=True, required=False)
    requiredBehavior = fields.CharField(blank=True, required=False)
    resource = fields.ObjectIdField(blank=True, required=False)
    selectionBehavior = fields.CharField(blank=True, required=False)
    textEquivalent = fields.CharField(blank=True, required=False)
    timingDateTime = fields.DateTimeField(blank=True, required=False)
    timingDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    timingPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    timingRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    timingTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="RequestGroupAction", getter="action", setter="action", searcher=StringSearch("action"))
        cardinalityBehavior = Attribute(getter="cardinalityBehavior", setter="cardinalityBehavior", searcher=StringSearch("cardinalityBehavior"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        condition = EmbeddedAttribute(type="RequestGroupActionCondition", getter="condition", setter="condition", searcher=StringSearch("condition"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        documentation = EmbeddedAttribute(type="RelatedArtifact", getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        groupingBehavior = Attribute(getter="groupingBehavior", setter="groupingBehavior", searcher=StringSearch("groupingBehavior"))
        label = Attribute(getter="label", setter="label", searcher=StringSearch("label"))
        participant = ObjectIdReferenceAttribute({'Patient', 'RelatedPerson', 'Person', 'Practitioner'}, ("participant", str), "participant", pk_setter="participant")
        precheckBehavior = Attribute(getter="precheckBehavior", setter="precheckBehavior", searcher=StringSearch("precheckBehavior"))
        relatedAction = EmbeddedAttribute(type="RequestGroupActionRelatedAction", getter="relatedAction", setter="relatedAction", searcher=StringSearch("relatedAction"))
        requiredBehavior = Attribute(getter="requiredBehavior", setter="requiredBehavior", searcher=StringSearch("requiredBehavior"))
        resource = ObjectIdReferenceAttribute({'Resource'}, ("resource", str), "resource", pk_setter="resource")
        selectionBehavior = Attribute(getter="selectionBehavior", setter="selectionBehavior", searcher=StringSearch("selectionBehavior"))
        textEquivalent = Attribute(getter="textEquivalent", setter="textEquivalent", searcher=StringSearch("textEquivalent"))
        timingDateTime = DateAttribute("timingDateTime")
        timingDuration = EmbeddedAttribute(type="Duration", getter="timingDuration", setter="timingDuration", searcher=StringSearch("timingDuration"))
        timingPeriod = EmbeddedAttribute(type="Period", getter="timingPeriod", setter="timingPeriod", searcher=StringSearch("timingPeriod"))
        timingRange = EmbeddedAttribute(type="Range", getter="timingRange", setter="timingRange", searcher=StringSearch("timingRange"))
        timingTiming = EmbeddedAttribute(type="Timing", getter="timingTiming", setter="timingTiming", searcher=StringSearch("timingTiming"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        type = EmbeddedAttribute(type="Coding", getter="type", setter="type", searcher=StringSearch("type"))

class RequestGroupActionCondition(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    expression = fields.CharField(blank=True, required=False)
    kind = fields.CharField(blank=False, required=True)
    language = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))

class RequestGroupActionRelatedAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    actionId = fields.CharField(blank=False, required=True)
    offsetDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    offsetRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    relationship = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        actionId = Attribute(getter="actionId", setter="actionId", searcher=StringSearch("actionId"))
        offsetDuration = EmbeddedAttribute(type="Duration", getter="offsetDuration", setter="offsetDuration", searcher=StringSearch("offsetDuration"))
        offsetRange = EmbeddedAttribute(type="Range", getter="offsetRange", setter="offsetRange", searcher=StringSearch("offsetRange"))
        relationship = Attribute(getter="relationship", setter="relationship", searcher=StringSearch("relationship"))

class ResearchStudy(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    arm = fields.EmbeddedDocumentListField("ResearchStudyArm", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    enrollment = fields.ObjectIdField(blank=True, required=False)
    focus = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    keyword = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    partOf = fields.ObjectIdField(blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    principalInvestigator = fields.ObjectIdField(blank=True, required=False)
    protocol = fields.ObjectIdField(blank=True, required=False)
    reasonStopped = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    site = fields.ObjectIdField(blank=True, required=False)
    sponsor = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        arm = EmbeddedAttribute(type="ResearchStudyArm", getter="arm", setter="arm", searcher=StringSearch("arm"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        enrollment = ObjectIdReferenceAttribute({'Group'}, ("enrollment", str), "enrollment", pk_setter="enrollment")
        focus = EmbeddedAttribute(type="CodeableConcept", getter="focus", setter="focus", searcher=StringSearch("focus"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        keyword = EmbeddedAttribute(type="CodeableConcept", getter="keyword", setter="keyword", searcher=StringSearch("keyword"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        partOf = ObjectIdReferenceAttribute({'ResearchStudy'}, ("partOf", str), "partOf", pk_setter="partOf")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        principalInvestigator = ObjectIdReferenceAttribute({'Practitioner'}, ("principalInvestigator", str), "principalInvestigator", pk_setter="principalInvestigator")
        protocol = ObjectIdReferenceAttribute({'PlanDefinition'}, ("protocol", str), "protocol", pk_setter="protocol")
        reasonStopped = EmbeddedAttribute(type="CodeableConcept", getter="reasonStopped", setter="reasonStopped", searcher=StringSearch("reasonStopped"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        site = ObjectIdReferenceAttribute({'Location'}, ("site", str), "site", pk_setter="site")
        sponsor = ObjectIdReferenceAttribute({'Organization'}, ("sponsor", str), "sponsor", pk_setter="sponsor")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))

class ResearchStudyArm(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))

class ResearchSubject(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    actualArm = fields.CharField(blank=True, required=False)
    assignedArm = fields.CharField(blank=True, required=False)
    consent = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    individual = fields.ObjectIdField(blank=False, required=True)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    study = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        actualArm = Attribute(getter="actualArm", setter="actualArm", searcher=StringSearch("actualArm"))
        assignedArm = Attribute(getter="assignedArm", setter="assignedArm", searcher=StringSearch("assignedArm"))
        consent = ObjectIdReferenceAttribute({'Consent'}, ("consent", str), "consent", pk_setter="consent")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        individual = ObjectIdReferenceAttribute({'Patient'}, ("individual", str), "individual", pk_setter="individual")
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        study = ObjectIdReferenceAttribute({'ResearchStudy'}, ("study", str), "study", pk_setter="study")

class Resource(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))

class RiskAssessment(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    basis = fields.ObjectIdField(blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    condition = fields.ObjectIdField(blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    method = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    mitigation = fields.CharField(blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    parent = fields.ObjectIdField(blank=True, required=False)
    performer = fields.ObjectIdField(blank=True, required=False)
    prediction = fields.EmbeddedDocumentListField("RiskAssessmentPrediction", blank=True, required=False)
    reasonCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    subject = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        basedOn = ObjectIdReferenceAttribute({'Resource'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        basis = ObjectIdReferenceAttribute({'Resource'}, ("basis", str), "basis", pk_setter="basis")
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        condition = ObjectIdReferenceAttribute({'Condition'}, ("condition", str), "condition", pk_setter="condition")
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        method = EmbeddedAttribute(type="CodeableConcept", getter="method", setter="method", searcher=StringSearch("method"))
        mitigation = Attribute(getter="mitigation", setter="mitigation", searcher=StringSearch("mitigation"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        parent = ObjectIdReferenceAttribute({'Resource'}, ("parent", str), "parent", pk_setter="parent")
        performer = ObjectIdReferenceAttribute({'Device', 'Practitioner'}, ("performer", str), "performer", pk_setter="performer")
        prediction = EmbeddedAttribute(type="RiskAssessmentPrediction", getter="prediction", setter="prediction", searcher=StringSearch("prediction"))
        reasonCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="reasonCodeableConcept", setter="reasonCodeableConcept", searcher=StringSearch("reasonCodeableConcept"))
        reasonReference = ObjectIdReferenceAttribute({'Resource'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group'}, ("subject", str), "subject", pk_setter="subject")

class RiskAssessmentPrediction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    outcome = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    probabilityDecimal = fields.FloatField(blank=True, required=False)
    probabilityRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    qualitativeRisk = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    rationale = fields.CharField(blank=True, required=False)
    relativeRisk = fields.FloatField(blank=True, required=False)
    whenPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    whenRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        outcome = EmbeddedAttribute(type="CodeableConcept", getter="outcome", setter="outcome", searcher=StringSearch("outcome"))
        probabilityDecimal = Attribute(getter="probabilityDecimal", setter="probabilityDecimal", searcher=NumericSearch("probabilityDecimal"))
        probabilityRange = EmbeddedAttribute(type="Range", getter="probabilityRange", setter="probabilityRange", searcher=StringSearch("probabilityRange"))
        qualitativeRisk = EmbeddedAttribute(type="CodeableConcept", getter="qualitativeRisk", setter="qualitativeRisk", searcher=StringSearch("qualitativeRisk"))
        rationale = Attribute(getter="rationale", setter="rationale", searcher=StringSearch("rationale"))
        relativeRisk = Attribute(getter="relativeRisk", setter="relativeRisk", searcher=NumericSearch("relativeRisk"))
        whenPeriod = EmbeddedAttribute(type="Period", getter="whenPeriod", setter="whenPeriod", searcher=StringSearch("whenPeriod"))
        whenRange = EmbeddedAttribute(type="Range", getter="whenRange", setter="whenRange", searcher=StringSearch("whenRange"))

class SampledData(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    data = fields.CharField(blank=False, required=True)
    dimensions = fields.IntegerField(blank=False, required=True)
    factor = fields.FloatField(blank=True, required=False)
    lowerLimit = fields.FloatField(blank=True, required=False)
    origin = fields.EmbeddedDocumentField("Quantity", blank=False, required=True)
    period = fields.FloatField(blank=False, required=True)
    upperLimit = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        data = Attribute(getter="data", setter="data", searcher=StringSearch("data"))
        dimensions = Attribute(getter="dimensions", setter="dimensions", searcher=NumericSearch("dimensions"))
        factor = Attribute(getter="factor", setter="factor", searcher=NumericSearch("factor"))
        lowerLimit = Attribute(getter="lowerLimit", setter="lowerLimit", searcher=NumericSearch("lowerLimit"))
        origin = EmbeddedAttribute(type="Quantity", getter="origin", setter="origin", searcher=StringSearch("origin"))
        period = Attribute(getter="period", setter="period", searcher=NumericSearch("period"))
        upperLimit = Attribute(getter="upperLimit", setter="upperLimit", searcher=NumericSearch("upperLimit"))

class Schedule(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    active = fields.BooleanField(blank=True, required=False)
    actor = fields.ObjectIdField(blank=False, required=True)
    comment = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    planningHorizon = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    serviceCategory = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    serviceType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    specialty = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        active = Attribute(getter="active", setter="active", searcher=StringSearch("active"))
        actor = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'PractitionerRole', 'Location', 'HealthcareService', 'Device'}, ("actor", str), "actor", pk_setter="actor")
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        planningHorizon = EmbeddedAttribute(type="Period", getter="planningHorizon", setter="planningHorizon", searcher=StringSearch("planningHorizon"))
        serviceCategory = EmbeddedAttribute(type="CodeableConcept", getter="serviceCategory", setter="serviceCategory", searcher=StringSearch("serviceCategory"))
        serviceType = EmbeddedAttribute(type="CodeableConcept", getter="serviceType", setter="serviceType", searcher=StringSearch("serviceType"))
        specialty = EmbeddedAttribute(type="CodeableConcept", getter="specialty", setter="specialty", searcher=StringSearch("specialty"))

class SearchParameter(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    base = fields.ListField(fields.CharField(), blank=False, required=True)
    chain = fields.ListField(fields.CharField(), blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    comparator = fields.ListField(fields.CharField(), blank=True, required=False)
    component = fields.EmbeddedDocumentListField("SearchParameterComponent", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    derivedFrom = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=False, required=True)
    experimental = fields.BooleanField(blank=True, required=False)
    expression = fields.CharField(blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    modifier = fields.ListField(fields.CharField(), blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    target = fields.ListField(fields.CharField(), blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=False, required=True)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    xpath = fields.CharField(blank=True, required=False)
    xpathUsage = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        base = Attribute(getter="base", setter="base", searcher=StringSearch("base"))
        chain = Attribute(getter="chain", setter="chain", searcher=StringSearch("chain"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        comparator = Attribute(getter="comparator", setter="comparator", searcher=StringSearch("comparator"))
        component = EmbeddedAttribute(type="SearchParameterComponent", getter="component", setter="component", searcher=StringSearch("component"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        date = DateAttribute("date")
        derivedFrom = Attribute(getter="derivedFrom", setter="derivedFrom", searcher=StringSearch("derivedFrom"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        modifier = Attribute(getter="modifier", setter="modifier", searcher=StringSearch("modifier"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        target = Attribute(getter="target", setter="target", searcher=StringSearch("target"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))
        xpath = Attribute(getter="xpath", setter="xpath", searcher=StringSearch("xpath"))
        xpathUsage = Attribute(getter="xpathUsage", setter="xpathUsage", searcher=StringSearch("xpathUsage"))

class SearchParameterComponent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    definition = fields.ObjectIdField(blank=False, required=True)
    expression = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        definition = ObjectIdReferenceAttribute({'SearchParameter'}, ("definition", str), "definition", pk_setter="definition")
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))

class Sequence(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    coordinateSystem = fields.IntegerField(blank=False, required=True)
    device = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    observedSeq = fields.CharField(blank=True, required=False)
    patient = fields.ObjectIdField(blank=True, required=False)
    performer = fields.ObjectIdField(blank=True, required=False)
    pointer = fields.ObjectIdField(blank=True, required=False)
    quality = fields.EmbeddedDocumentListField("SequenceQuality", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    readCoverage = fields.IntegerField(blank=True, required=False)
    referenceSeq = fields.EmbeddedDocumentField("SequenceReferenceSeq", blank=True, required=False)
    repository = fields.EmbeddedDocumentListField("SequenceRepository", blank=True, required=False)
    specimen = fields.ObjectIdField(blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    variant = fields.EmbeddedDocumentListField("SequenceVariant", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        coordinateSystem = Attribute(getter="coordinateSystem", setter="coordinateSystem", searcher=NumericSearch("coordinateSystem"))
        device = ObjectIdReferenceAttribute({'Device'}, ("device", str), "device", pk_setter="device")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        observedSeq = Attribute(getter="observedSeq", setter="observedSeq", searcher=StringSearch("observedSeq"))
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        performer = ObjectIdReferenceAttribute({'Organization'}, ("performer", str), "performer", pk_setter="performer")
        pointer = ObjectIdReferenceAttribute({'Sequence'}, ("pointer", str), "pointer", pk_setter="pointer")
        quality = EmbeddedAttribute(type="SequenceQuality", getter="quality", setter="quality", searcher=StringSearch("quality"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        readCoverage = Attribute(getter="readCoverage", setter="readCoverage", searcher=NumericSearch("readCoverage"))
        referenceSeq = EmbeddedAttribute(type="SequenceReferenceSeq", getter="referenceSeq", setter="referenceSeq", searcher=StringSearch("referenceSeq"))
        repository = EmbeddedAttribute(type="SequenceRepository", getter="repository", setter="repository", searcher=StringSearch("repository"))
        specimen = ObjectIdReferenceAttribute({'Specimen'}, ("specimen", str), "specimen", pk_setter="specimen")
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        variant = EmbeddedAttribute(type="SequenceVariant", getter="variant", setter="variant", searcher=StringSearch("variant"))

class SequenceQuality(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    end = fields.IntegerField(blank=True, required=False)
    fScore = fields.FloatField(blank=True, required=False)
    gtFP = fields.FloatField(blank=True, required=False)
    method = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    precision = fields.FloatField(blank=True, required=False)
    queryFP = fields.FloatField(blank=True, required=False)
    queryTP = fields.FloatField(blank=True, required=False)
    recall = fields.FloatField(blank=True, required=False)
    score = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    standardSequence = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    start = fields.IntegerField(blank=True, required=False)
    truthFN = fields.FloatField(blank=True, required=False)
    truthTP = fields.FloatField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        end = Attribute(getter="end", setter="end", searcher=NumericSearch("end"))
        fScore = Attribute(getter="fScore", setter="fScore", searcher=NumericSearch("fScore"))
        gtFP = Attribute(getter="gtFP", setter="gtFP", searcher=NumericSearch("gtFP"))
        method = EmbeddedAttribute(type="CodeableConcept", getter="method", setter="method", searcher=StringSearch("method"))
        precision = Attribute(getter="precision", setter="precision", searcher=NumericSearch("precision"))
        queryFP = Attribute(getter="queryFP", setter="queryFP", searcher=NumericSearch("queryFP"))
        queryTP = Attribute(getter="queryTP", setter="queryTP", searcher=NumericSearch("queryTP"))
        recall = Attribute(getter="recall", setter="recall", searcher=NumericSearch("recall"))
        score = EmbeddedAttribute(type="Quantity", getter="score", setter="score", searcher=StringSearch("score"))
        standardSequence = EmbeddedAttribute(type="CodeableConcept", getter="standardSequence", setter="standardSequence", searcher=StringSearch("standardSequence"))
        start = Attribute(getter="start", setter="start", searcher=NumericSearch("start"))
        truthFN = Attribute(getter="truthFN", setter="truthFN", searcher=NumericSearch("truthFN"))
        truthTP = Attribute(getter="truthTP", setter="truthTP", searcher=NumericSearch("truthTP"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class SequenceReferenceSeq(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    chromosome = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    genomeBuild = fields.CharField(blank=True, required=False)
    referenceSeqId = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    referenceSeqPointer = fields.ObjectIdField(blank=True, required=False)
    referenceSeqString = fields.CharField(blank=True, required=False)
    strand = fields.IntegerField(blank=True, required=False)
    windowEnd = fields.IntegerField(blank=False, required=True)
    windowStart = fields.IntegerField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        chromosome = EmbeddedAttribute(type="CodeableConcept", getter="chromosome", setter="chromosome", searcher=StringSearch("chromosome"))
        genomeBuild = Attribute(getter="genomeBuild", setter="genomeBuild", searcher=StringSearch("genomeBuild"))
        referenceSeqId = EmbeddedAttribute(type="CodeableConcept", getter="referenceSeqId", setter="referenceSeqId", searcher=StringSearch("referenceSeqId"))
        referenceSeqPointer = ObjectIdReferenceAttribute({'Sequence'}, ("referenceSeqPointer", str), "referenceSeqPointer", pk_setter="referenceSeqPointer")
        referenceSeqString = Attribute(getter="referenceSeqString", setter="referenceSeqString", searcher=StringSearch("referenceSeqString"))
        strand = Attribute(getter="strand", setter="strand", searcher=NumericSearch("strand"))
        windowEnd = Attribute(getter="windowEnd", setter="windowEnd", searcher=NumericSearch("windowEnd"))
        windowStart = Attribute(getter="windowStart", setter="windowStart", searcher=NumericSearch("windowStart"))

class SequenceRepository(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    datasetId = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    readsetId = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=True, required=False)
    variantsetId = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        datasetId = Attribute(getter="datasetId", setter="datasetId", searcher=StringSearch("datasetId"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        readsetId = Attribute(getter="readsetId", setter="readsetId", searcher=StringSearch("readsetId"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        variantsetId = Attribute(getter="variantsetId", setter="variantsetId", searcher=StringSearch("variantsetId"))

class SequenceVariant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    cigar = fields.CharField(blank=True, required=False)
    end = fields.IntegerField(blank=True, required=False)
    observedAllele = fields.CharField(blank=True, required=False)
    referenceAllele = fields.CharField(blank=True, required=False)
    start = fields.IntegerField(blank=True, required=False)
    variantPointer = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        cigar = Attribute(getter="cigar", setter="cigar", searcher=StringSearch("cigar"))
        end = Attribute(getter="end", setter="end", searcher=NumericSearch("end"))
        observedAllele = Attribute(getter="observedAllele", setter="observedAllele", searcher=StringSearch("observedAllele"))
        referenceAllele = Attribute(getter="referenceAllele", setter="referenceAllele", searcher=StringSearch("referenceAllele"))
        start = Attribute(getter="start", setter="start", searcher=NumericSearch("start"))
        variantPointer = ObjectIdReferenceAttribute({'Observation'}, ("variantPointer", str), "variantPointer", pk_setter="variantPointer")

class ServiceDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    approvalDate = fields.DateTimeField(blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    contributor = fields.EmbeddedDocumentListField("Contributor", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    dataRequirement = fields.EmbeddedDocumentListField("DataRequirement", blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    effectivePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    lastReviewDate = fields.DateTimeField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    operationDefinition = fields.ObjectIdField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    relatedArtifact = fields.EmbeddedDocumentListField("RelatedArtifact", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    topic = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    trigger = fields.EmbeddedDocumentListField("TriggerDefinition", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    usage = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        approvalDate = DateAttribute("approvalDate")
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        contributor = EmbeddedAttribute(type="Contributor", getter="contributor", setter="contributor", searcher=StringSearch("contributor"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        dataRequirement = EmbeddedAttribute(type="DataRequirement", getter="dataRequirement", setter="dataRequirement", searcher=StringSearch("dataRequirement"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        effectivePeriod = EmbeddedAttribute(type="Period", getter="effectivePeriod", setter="effectivePeriod", searcher=StringSearch("effectivePeriod"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        lastReviewDate = DateAttribute("lastReviewDate")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        operationDefinition = ObjectIdReferenceAttribute({'OperationDefinition'}, ("operationDefinition", str), "operationDefinition", pk_setter="operationDefinition")
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        relatedArtifact = EmbeddedAttribute(type="RelatedArtifact", getter="relatedArtifact", setter="relatedArtifact", searcher=StringSearch("relatedArtifact"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        topic = EmbeddedAttribute(type="CodeableConcept", getter="topic", setter="topic", searcher=StringSearch("topic"))
        trigger = EmbeddedAttribute(type="TriggerDefinition", getter="trigger", setter="trigger", searcher=StringSearch("trigger"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        usage = Attribute(getter="usage", setter="usage", searcher=StringSearch("usage"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class Signature(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    blob = fields.CharField(blank=True, required=False)
    contentType = fields.CharField(blank=True, required=False)
    onBehalfOfReference = fields.ObjectIdField(blank=True, required=False)
    onBehalfOfUri = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentListField("Coding", blank=False, required=True)
    when = fields.DateTimeField(blank=False, required=True)
    whoReference = fields.ObjectIdField(blank=False, required=True)
    whoUri = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        blob = Attribute(getter="blob", setter="blob", searcher=StringSearch("blob"))
        contentType = Attribute(getter="contentType", setter="contentType", searcher=StringSearch("contentType"))
        onBehalfOfReference = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("onBehalfOfReference", str), "onBehalfOfReference", pk_setter="onBehalfOfReference")
        onBehalfOfUri = Attribute(getter="onBehalfOfUri", setter="onBehalfOfUri", searcher=StringSearch("onBehalfOfUri"))
        type = EmbeddedAttribute(type="Coding", getter="type", setter="type", searcher=StringSearch("type"))
        when = DateAttribute("when")
        whoReference = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("whoReference", str), "whoReference", pk_setter="whoReference")
        whoUri = Attribute(getter="whoUri", setter="whoUri", searcher=StringSearch("whoUri"))

class Slot(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    appointmentType = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    end = fields.DateTimeField(blank=False, required=True)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    overbooked = fields.BooleanField(blank=True, required=False)
    schedule = fields.ObjectIdField(blank=False, required=True)
    serviceCategory = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    serviceType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    specialty = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    start = fields.DateTimeField(blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        appointmentType = EmbeddedAttribute(type="CodeableConcept", getter="appointmentType", setter="appointmentType", searcher=StringSearch("appointmentType"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        end = DateAttribute("end")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        overbooked = Attribute(getter="overbooked", setter="overbooked", searcher=StringSearch("overbooked"))
        schedule = ObjectIdReferenceAttribute({'Schedule'}, ("schedule", str), "schedule", pk_setter="schedule")
        serviceCategory = EmbeddedAttribute(type="CodeableConcept", getter="serviceCategory", setter="serviceCategory", searcher=StringSearch("serviceCategory"))
        serviceType = EmbeddedAttribute(type="CodeableConcept", getter="serviceType", setter="serviceType", searcher=StringSearch("serviceType"))
        specialty = EmbeddedAttribute(type="CodeableConcept", getter="specialty", setter="specialty", searcher=StringSearch("specialty"))
        start = DateAttribute("start")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class Specimen(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    accessionIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    collection = fields.EmbeddedDocumentField("SpecimenCollection", blank=True, required=False)
    container = fields.EmbeddedDocumentListField("SpecimenContainer", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    parent = fields.ObjectIdField(blank=True, required=False)
    processing = fields.EmbeddedDocumentListField("SpecimenProcessing", blank=True, required=False)
    receivedTime = fields.DateTimeField(blank=True, required=False)
    request = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    subject = fields.ObjectIdField(blank=False, required=True)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        accessionIdentifier = EmbeddedAttribute(type="Identifier", getter="accessionIdentifier", setter="accessionIdentifier", searcher=StringSearch("accessionIdentifier"))
        collection = EmbeddedAttribute(type="SpecimenCollection", getter="collection", setter="collection", searcher=StringSearch("collection"))
        container = EmbeddedAttribute(type="SpecimenContainer", getter="container", setter="container", searcher=StringSearch("container"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        parent = ObjectIdReferenceAttribute({'Specimen'}, ("parent", str), "parent", pk_setter="parent")
        processing = EmbeddedAttribute(type="SpecimenProcessing", getter="processing", setter="processing", searcher=StringSearch("processing"))
        receivedTime = DateAttribute("receivedTime")
        request = ObjectIdReferenceAttribute({'ProcedureRequest'}, ("request", str), "request", pk_setter="request")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        subject = ObjectIdReferenceAttribute({'Patient', 'Group', 'Substance', 'Device'}, ("subject", str), "subject", pk_setter="subject")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class SpecimenCollection(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    bodySite = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    collectedDateTime = fields.DateTimeField(blank=True, required=False)
    collectedPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    collector = fields.ObjectIdField(blank=True, required=False)
    method = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        bodySite = EmbeddedAttribute(type="CodeableConcept", getter="bodySite", setter="bodySite", searcher=StringSearch("bodySite"))
        collectedDateTime = DateAttribute("collectedDateTime")
        collectedPeriod = EmbeddedAttribute(type="Period", getter="collectedPeriod", setter="collectedPeriod", searcher=StringSearch("collectedPeriod"))
        collector = ObjectIdReferenceAttribute({'Practitioner'}, ("collector", str), "collector", pk_setter="collector")
        method = EmbeddedAttribute(type="CodeableConcept", getter="method", setter="method", searcher=StringSearch("method"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))

class SpecimenContainer(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    additiveCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    additiveReference = fields.ObjectIdField(blank=True, required=False)
    capacity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    specimenQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        additiveCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="additiveCodeableConcept", setter="additiveCodeableConcept", searcher=StringSearch("additiveCodeableConcept"))
        additiveReference = ObjectIdReferenceAttribute({'Substance'}, ("additiveReference", str), "additiveReference", pk_setter="additiveReference")
        capacity = EmbeddedAttribute(type="Quantity", getter="capacity", setter="capacity", searcher=StringSearch("capacity"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        specimenQuantity = EmbeddedAttribute(type="Quantity", getter="specimenQuantity", setter="specimenQuantity", searcher=StringSearch("specimenQuantity"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class SpecimenProcessing(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    additive = fields.ObjectIdField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    procedure = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    timeDateTime = fields.DateTimeField(blank=True, required=False)
    timePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        additive = ObjectIdReferenceAttribute({'Substance'}, ("additive", str), "additive", pk_setter="additive")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        procedure = EmbeddedAttribute(type="CodeableConcept", getter="procedure", setter="procedure", searcher=StringSearch("procedure"))
        timeDateTime = DateAttribute("timeDateTime")
        timePeriod = EmbeddedAttribute(type="Period", getter="timePeriod", setter="timePeriod", searcher=StringSearch("timePeriod"))

class StructureDefinition(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    abstract = fields.BooleanField(blank=False, required=True)
    baseDefinition = fields.CharField(blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    context = fields.ListField(fields.CharField(), blank=True, required=False)
    contextInvariant = fields.ListField(fields.CharField(), blank=True, required=False)
    contextType = fields.CharField(blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    derivation = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    differential = fields.EmbeddedDocumentField("StructureDefinitionDifferential", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    fhirVersion = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    keyword = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    kind = fields.CharField(blank=False, required=True)
    mapping = fields.EmbeddedDocumentListField("StructureDefinitionMapping", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    snapshot = fields.EmbeddedDocumentField("StructureDefinitionSnapshot", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=False, required=True)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        abstract = Attribute(getter="abstract", setter="abstract", searcher=StringSearch("abstract"))
        baseDefinition = Attribute(getter="baseDefinition", setter="baseDefinition", searcher=StringSearch("baseDefinition"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        context = Attribute(getter="context", setter="context", searcher=StringSearch("context"))
        contextInvariant = Attribute(getter="contextInvariant", setter="contextInvariant", searcher=StringSearch("contextInvariant"))
        contextType = Attribute(getter="contextType", setter="contextType", searcher=StringSearch("contextType"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        derivation = Attribute(getter="derivation", setter="derivation", searcher=StringSearch("derivation"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        differential = EmbeddedAttribute(type="StructureDefinitionDifferential", getter="differential", setter="differential", searcher=StringSearch("differential"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        fhirVersion = Attribute(getter="fhirVersion", setter="fhirVersion", searcher=StringSearch("fhirVersion"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        keyword = EmbeddedAttribute(type="Coding", getter="keyword", setter="keyword", searcher=StringSearch("keyword"))
        kind = Attribute(getter="kind", setter="kind", searcher=StringSearch("kind"))
        mapping = EmbeddedAttribute(type="StructureDefinitionMapping", getter="mapping", setter="mapping", searcher=StringSearch("mapping"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        snapshot = EmbeddedAttribute(type="StructureDefinitionSnapshot", getter="snapshot", setter="snapshot", searcher=StringSearch("snapshot"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class StructureDefinitionDifferential(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    element = fields.EmbeddedDocumentListField("ElementDefinition", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        element = EmbeddedAttribute(type="ElementDefinition", getter="element", setter="element", searcher=StringSearch("element"))

class StructureDefinitionMapping(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    comment = fields.CharField(blank=True, required=False)
    identity = fields.CharField(blank=False, required=True)
    name = fields.CharField(blank=True, required=False)
    uri = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        comment = Attribute(getter="comment", setter="comment", searcher=StringSearch("comment"))
        identity = Attribute(getter="identity", setter="identity", searcher=StringSearch("identity"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        uri = Attribute(getter="uri", setter="uri", searcher=StringSearch("uri"))

class StructureDefinitionSnapshot(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    element = fields.EmbeddedDocumentListField("ElementDefinition", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        element = EmbeddedAttribute(type="ElementDefinition", getter="element", setter="element", searcher=StringSearch("element"))

class StructureMap(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    group = fields.EmbeddedDocumentListField("StructureMapGroup", blank=False, required=True)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    import_ = fields.ListField(fields.CharField(), blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    structure = fields.EmbeddedDocumentListField("StructureMapStructure", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=False, required=True)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        group = EmbeddedAttribute(type="StructureMapGroup", getter="group", setter="group", searcher=StringSearch("group"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        import_ = Attribute(getter="import_", setter="import_", searcher=StringSearch("import_"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        structure = EmbeddedAttribute(type="StructureMapStructure", getter="structure", setter="structure", searcher=StringSearch("structure"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class StructureMapGroup(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    extends = fields.CharField(blank=True, required=False)
    input = fields.EmbeddedDocumentListField("StructureMapGroupInput", blank=False, required=True)
    name = fields.CharField(blank=False, required=True)
    rule = fields.EmbeddedDocumentListField("StructureMapGroupRule", blank=False, required=True)
    typeMode = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        extends = Attribute(getter="extends", setter="extends", searcher=StringSearch("extends"))
        input = EmbeddedAttribute(type="StructureMapGroupInput", getter="input", setter="input", searcher=StringSearch("input"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        rule = EmbeddedAttribute(type="StructureMapGroupRule", getter="rule", setter="rule", searcher=StringSearch("rule"))
        typeMode = Attribute(getter="typeMode", setter="typeMode", searcher=StringSearch("typeMode"))

class StructureMapGroupInput(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    mode = fields.CharField(blank=False, required=True)
    name = fields.CharField(blank=False, required=True)
    type = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class StructureMapGroupRule(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    dependent = fields.EmbeddedDocumentListField("StructureMapGroupRuleDependent", blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    rule = fields.EmbeddedDocumentListField("StructureMapGroupRule", blank=True, required=False)
    source = fields.EmbeddedDocumentListField("StructureMapGroupRuleSource", blank=False, required=True)
    target = fields.EmbeddedDocumentListField("StructureMapGroupRuleTarget", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        dependent = EmbeddedAttribute(type="StructureMapGroupRuleDependent", getter="dependent", setter="dependent", searcher=StringSearch("dependent"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        rule = EmbeddedAttribute(type="StructureMapGroupRule", getter="rule", setter="rule", searcher=StringSearch("rule"))
        source = EmbeddedAttribute(type="StructureMapGroupRuleSource", getter="source", setter="source", searcher=StringSearch("source"))
        target = EmbeddedAttribute(type="StructureMapGroupRuleTarget", getter="target", setter="target", searcher=StringSearch("target"))

class StructureMapGroupRuleDependent(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    variable = fields.ListField(fields.CharField(), blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        variable = Attribute(getter="variable", setter="variable", searcher=StringSearch("variable"))

class StructureMapGroupRuleSource(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    check = fields.CharField(blank=True, required=False)
    condition = fields.CharField(blank=True, required=False)
    context = fields.CharField(blank=False, required=True)
    defaultValueAddress = fields.EmbeddedDocumentField("Address", blank=True, required=False)
    defaultValueAge = fields.EmbeddedDocumentField("Age", blank=True, required=False)
    defaultValueAnnotation = fields.EmbeddedDocumentField("Annotation", blank=True, required=False)
    defaultValueAttachment = fields.EmbeddedDocumentField("Attachment", blank=True, required=False)
    defaultValueBase64Binary = fields.CharField(blank=True, required=False)
    defaultValueBoolean = fields.BooleanField(blank=True, required=False)
    defaultValueCode = fields.CharField(blank=True, required=False)
    defaultValueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    defaultValueCoding = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    defaultValueContactPoint = fields.EmbeddedDocumentField("ContactPoint", blank=True, required=False)
    defaultValueCount = fields.EmbeddedDocumentField("Count", blank=True, required=False)
    defaultValueDate = fields.DateTimeField(blank=True, required=False)
    defaultValueDateTime = fields.DateTimeField(blank=True, required=False)
    defaultValueDecimal = fields.FloatField(blank=True, required=False)
    defaultValueDistance = fields.EmbeddedDocumentField("Distance", blank=True, required=False)
    defaultValueDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    defaultValueHumanName = fields.EmbeddedDocumentField("HumanName", blank=True, required=False)
    defaultValueId = fields.CharField(blank=True, required=False)
    defaultValueIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    defaultValueInstant = fields.DateTimeField(blank=True, required=False)
    defaultValueInteger = fields.IntegerField(blank=True, required=False)
    defaultValueMarkdown = fields.CharField(blank=True, required=False)
    defaultValueMeta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    defaultValueMoney = fields.EmbeddedDocumentField("Money", blank=True, required=False)
    defaultValueOid = fields.CharField(blank=True, required=False)
    defaultValuePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    defaultValuePositiveInt = fields.IntegerField(blank=True, required=False)
    defaultValueQuantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    defaultValueRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    defaultValueRatio = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    # defaultValueReference = fields.ReferenceField(, blank=True, required=False)
    defaultValueSampledData = fields.EmbeddedDocumentField("SampledData", blank=True, required=False)
    defaultValueSignature = fields.EmbeddedDocumentField("Signature", blank=True, required=False)
    defaultValueString = fields.CharField(blank=True, required=False)
    defaultValueTime = fields.DateTimeField(blank=True, required=False)
    defaultValueTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    defaultValueUnsignedInt = fields.IntegerField(blank=True, required=False)
    defaultValueUri = fields.CharField(blank=True, required=False)
    element = fields.CharField(blank=True, required=False)
    listMode = fields.CharField(blank=True, required=False)
    max = fields.CharField(blank=True, required=False)
    min = fields.IntegerField(blank=True, required=False)
    type = fields.CharField(blank=True, required=False)
    variable = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        check = Attribute(getter="check", setter="check", searcher=StringSearch("check"))
        condition = Attribute(getter="condition", setter="condition", searcher=StringSearch("condition"))
        context = Attribute(getter="context", setter="context", searcher=StringSearch("context"))
        defaultValueAddress = EmbeddedAttribute(type="Address", getter="defaultValueAddress", setter="defaultValueAddress", searcher=StringSearch("defaultValueAddress"))
        defaultValueAge = EmbeddedAttribute(type="Age", getter="defaultValueAge", setter="defaultValueAge", searcher=StringSearch("defaultValueAge"))
        defaultValueAnnotation = EmbeddedAttribute(type="Annotation", getter="defaultValueAnnotation", setter="defaultValueAnnotation", searcher=StringSearch("defaultValueAnnotation"))
        defaultValueAttachment = EmbeddedAttribute(type="Attachment", getter="defaultValueAttachment", setter="defaultValueAttachment", searcher=StringSearch("defaultValueAttachment"))
        defaultValueBase64Binary = Attribute(getter="defaultValueBase64Binary", setter="defaultValueBase64Binary", searcher=StringSearch("defaultValueBase64Binary"))
        defaultValueBoolean = Attribute(getter="defaultValueBoolean", setter="defaultValueBoolean", searcher=StringSearch("defaultValueBoolean"))
        defaultValueCode = Attribute(getter="defaultValueCode", setter="defaultValueCode", searcher=StringSearch("defaultValueCode"))
        defaultValueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="defaultValueCodeableConcept", setter="defaultValueCodeableConcept", searcher=StringSearch("defaultValueCodeableConcept"))
        defaultValueCoding = EmbeddedAttribute(type="Coding", getter="defaultValueCoding", setter="defaultValueCoding", searcher=StringSearch("defaultValueCoding"))
        defaultValueContactPoint = EmbeddedAttribute(type="ContactPoint", getter="defaultValueContactPoint", setter="defaultValueContactPoint", searcher=StringSearch("defaultValueContactPoint"))
        defaultValueCount = EmbeddedAttribute(type="Count", getter="defaultValueCount", setter="defaultValueCount", searcher=StringSearch("defaultValueCount"))
        defaultValueDate = DateAttribute("defaultValueDate")
        defaultValueDateTime = DateAttribute("defaultValueDateTime")
        defaultValueDecimal = Attribute(getter="defaultValueDecimal", setter="defaultValueDecimal", searcher=NumericSearch("defaultValueDecimal"))
        defaultValueDistance = EmbeddedAttribute(type="Distance", getter="defaultValueDistance", setter="defaultValueDistance", searcher=StringSearch("defaultValueDistance"))
        defaultValueDuration = EmbeddedAttribute(type="Duration", getter="defaultValueDuration", setter="defaultValueDuration", searcher=StringSearch("defaultValueDuration"))
        defaultValueHumanName = EmbeddedAttribute(type="HumanName", getter="defaultValueHumanName", setter="defaultValueHumanName", searcher=StringSearch("defaultValueHumanName"))
        defaultValueId = Attribute(getter="defaultValueId", setter="defaultValueId", searcher=StringSearch("defaultValueId"))
        defaultValueIdentifier = EmbeddedAttribute(type="Identifier", getter="defaultValueIdentifier", setter="defaultValueIdentifier", searcher=StringSearch("defaultValueIdentifier"))
        defaultValueInstant = DateAttribute("defaultValueInstant")
        defaultValueInteger = Attribute(getter="defaultValueInteger", setter="defaultValueInteger", searcher=NumericSearch("defaultValueInteger"))
        defaultValueMarkdown = Attribute(getter="defaultValueMarkdown", setter="defaultValueMarkdown", searcher=StringSearch("defaultValueMarkdown"))
        defaultValueMeta = EmbeddedAttribute(type="Meta", getter="defaultValueMeta", setter="defaultValueMeta", searcher=StringSearch("defaultValueMeta"))
        defaultValueMoney = EmbeddedAttribute(type="Money", getter="defaultValueMoney", setter="defaultValueMoney", searcher=StringSearch("defaultValueMoney"))
        defaultValueOid = Attribute(getter="defaultValueOid", setter="defaultValueOid", searcher=StringSearch("defaultValueOid"))
        defaultValuePeriod = EmbeddedAttribute(type="Period", getter="defaultValuePeriod", setter="defaultValuePeriod", searcher=StringSearch("defaultValuePeriod"))
        defaultValuePositiveInt = Attribute(getter="defaultValuePositiveInt", setter="defaultValuePositiveInt", searcher=NumericSearch("defaultValuePositiveInt"))
        defaultValueQuantity = EmbeddedAttribute(type="Quantity", getter="defaultValueQuantity", setter="defaultValueQuantity", searcher=StringSearch("defaultValueQuantity"))
        defaultValueRange = EmbeddedAttribute(type="Range", getter="defaultValueRange", setter="defaultValueRange", searcher=StringSearch("defaultValueRange"))
        defaultValueRatio = EmbeddedAttribute(type="Ratio", getter="defaultValueRatio", setter="defaultValueRatio", searcher=StringSearch("defaultValueRatio"))
        # defaultValueReference = ObjectIdReferenceAttribute(getter="defaultValueReference", setter="defaultValueReference", searcher=StringSearch("defaultValueReference"))
        defaultValueSampledData = EmbeddedAttribute(type="SampledData", getter="defaultValueSampledData", setter="defaultValueSampledData", searcher=StringSearch("defaultValueSampledData"))
        defaultValueSignature = EmbeddedAttribute(type="Signature", getter="defaultValueSignature", setter="defaultValueSignature", searcher=StringSearch("defaultValueSignature"))
        defaultValueString = Attribute(getter="defaultValueString", setter="defaultValueString", searcher=StringSearch("defaultValueString"))
        defaultValueTime = DateAttribute("defaultValueTime")
        defaultValueTiming = EmbeddedAttribute(type="Timing", getter="defaultValueTiming", setter="defaultValueTiming", searcher=StringSearch("defaultValueTiming"))
        defaultValueUnsignedInt = Attribute(getter="defaultValueUnsignedInt", setter="defaultValueUnsignedInt", searcher=NumericSearch("defaultValueUnsignedInt"))
        defaultValueUri = Attribute(getter="defaultValueUri", setter="defaultValueUri", searcher=StringSearch("defaultValueUri"))
        element = Attribute(getter="element", setter="element", searcher=StringSearch("element"))
        listMode = Attribute(getter="listMode", setter="listMode", searcher=StringSearch("listMode"))
        max = Attribute(getter="max", setter="max", searcher=StringSearch("max"))
        min = Attribute(getter="min", setter="min", searcher=NumericSearch("min"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        variable = Attribute(getter="variable", setter="variable", searcher=StringSearch("variable"))

class StructureMapGroupRuleTarget(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    context = fields.CharField(blank=True, required=False)
    contextType = fields.CharField(blank=True, required=False)
    element = fields.CharField(blank=True, required=False)
    listMode = fields.ListField(fields.CharField(), blank=True, required=False)
    listRuleId = fields.CharField(blank=True, required=False)
    parameter = fields.EmbeddedDocumentListField("StructureMapGroupRuleTargetParameter", blank=True, required=False)
    transform = fields.CharField(blank=True, required=False)
    variable = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        context = Attribute(getter="context", setter="context", searcher=StringSearch("context"))
        contextType = Attribute(getter="contextType", setter="contextType", searcher=StringSearch("contextType"))
        element = Attribute(getter="element", setter="element", searcher=StringSearch("element"))
        listMode = Attribute(getter="listMode", setter="listMode", searcher=StringSearch("listMode"))
        listRuleId = Attribute(getter="listRuleId", setter="listRuleId", searcher=StringSearch("listRuleId"))
        parameter = EmbeddedAttribute(type="StructureMapGroupRuleTargetParameter", getter="parameter", setter="parameter", searcher=StringSearch("parameter"))
        transform = Attribute(getter="transform", setter="transform", searcher=StringSearch("transform"))
        variable = Attribute(getter="variable", setter="variable", searcher=StringSearch("variable"))

class StructureMapGroupRuleTargetParameter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    valueBoolean = fields.BooleanField(blank=False, required=True)
    valueDecimal = fields.FloatField(blank=False, required=True)
    valueId = fields.CharField(blank=False, required=True)
    valueInteger = fields.IntegerField(blank=False, required=True)
    valueString = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueId = Attribute(getter="valueId", setter="valueId", searcher=StringSearch("valueId"))
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))

class StructureMapStructure(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    alias = fields.CharField(blank=True, required=False)
    documentation = fields.CharField(blank=True, required=False)
    mode = fields.CharField(blank=False, required=True)
    url = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        alias = Attribute(getter="alias", setter="alias", searcher=StringSearch("alias"))
        documentation = Attribute(getter="documentation", setter="documentation", searcher=StringSearch("documentation"))
        mode = Attribute(getter="mode", setter="mode", searcher=StringSearch("mode"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class Subscription(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    channel = fields.EmbeddedDocumentField("SubscriptionChannel", blank=False, required=True)
    contact = fields.EmbeddedDocumentListField("ContactPoint", blank=True, required=False)
    criteria = fields.CharField(blank=False, required=True)
    end = fields.DateTimeField(blank=True, required=False)
    error = fields.CharField(blank=True, required=False)
    reason = fields.CharField(blank=False, required=True)
    status = fields.CharField(blank=False, required=True)
    tag = fields.EmbeddedDocumentListField("Coding", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        channel = EmbeddedAttribute(type="SubscriptionChannel", getter="channel", setter="channel", searcher=StringSearch("channel"))
        contact = EmbeddedAttribute(type="ContactPoint", getter="contact", setter="contact", searcher=StringSearch("contact"))
        criteria = Attribute(getter="criteria", setter="criteria", searcher=StringSearch("criteria"))
        end = DateAttribute("end")
        error = Attribute(getter="error", setter="error", searcher=StringSearch("error"))
        reason = Attribute(getter="reason", setter="reason", searcher=StringSearch("reason"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        tag = EmbeddedAttribute(type="Coding", getter="tag", setter="tag", searcher=StringSearch("tag"))

class SubscriptionChannel(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    endpoint = fields.CharField(blank=True, required=False)
    header = fields.ListField(fields.CharField(), blank=True, required=False)
    payload = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        endpoint = Attribute(getter="endpoint", setter="endpoint", searcher=StringSearch("endpoint"))
        header = Attribute(getter="header", setter="header", searcher=StringSearch("header"))
        payload = Attribute(getter="payload", setter="payload", searcher=StringSearch("payload"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class Substance(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    category = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    ingredient = fields.EmbeddedDocumentListField("SubstanceIngredient", blank=True, required=False)
    instance = fields.EmbeddedDocumentListField("SubstanceInstance", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        ingredient = EmbeddedAttribute(type="SubstanceIngredient", getter="ingredient", setter="ingredient", searcher=StringSearch("ingredient"))
        instance = EmbeddedAttribute(type="SubstanceInstance", getter="instance", setter="instance", searcher=StringSearch("instance"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class SubstanceIngredient(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Ratio", blank=True, required=False)
    substanceCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    substanceReference = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        quantity = EmbeddedAttribute(type="Ratio", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))
        substanceCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="substanceCodeableConcept", setter="substanceCodeableConcept", searcher=StringSearch("substanceCodeableConcept"))
        substanceReference = ObjectIdReferenceAttribute({'Substance'}, ("substanceReference", str), "substanceReference", pk_setter="substanceReference")

class SubstanceInstance(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    expiry = fields.DateTimeField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        expiry = DateAttribute("expiry")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))

class SupplyDelivery(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    destination = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    occurrenceTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    partOf = fields.ObjectIdField(blank=True, required=False)
    patient = fields.ObjectIdField(blank=True, required=False)
    receiver = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    suppliedItem = fields.EmbeddedDocumentField("SupplyDeliverySuppliedItem", blank=True, required=False)
    supplier = fields.ObjectIdField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        basedOn = ObjectIdReferenceAttribute({'SupplyRequest'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        destination = ObjectIdReferenceAttribute({'Location'}, ("destination", str), "destination", pk_setter="destination")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        occurrenceTiming = EmbeddedAttribute(type="Timing", getter="occurrenceTiming", setter="occurrenceTiming", searcher=StringSearch("occurrenceTiming"))
        partOf = ObjectIdReferenceAttribute({'SupplyDelivery', 'Contract'}, ("partOf", str), "partOf", pk_setter="partOf")
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        receiver = ObjectIdReferenceAttribute({'Practitioner'}, ("receiver", str), "receiver", pk_setter="receiver")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        suppliedItem = EmbeddedAttribute(type="SupplyDeliverySuppliedItem", getter="suppliedItem", setter="suppliedItem", searcher=StringSearch("suppliedItem"))
        supplier = ObjectIdReferenceAttribute({'Practitioner', 'Organization'}, ("supplier", str), "supplier", pk_setter="supplier")
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))

class SupplyDeliverySuppliedItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    itemCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    itemReference = fields.ObjectIdField(blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        itemCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="itemCodeableConcept", setter="itemCodeableConcept", searcher=StringSearch("itemCodeableConcept"))
        itemReference = ObjectIdReferenceAttribute({'Device', 'Substance', 'Medication'}, ("itemReference", str), "itemReference", pk_setter="itemReference")
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))

class SupplyRequest(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    category = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    deliverFrom = fields.ObjectIdField(blank=True, required=False)
    deliverTo = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    occurrenceDateTime = fields.DateTimeField(blank=True, required=False)
    occurrencePeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    occurrenceTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    orderedItem = fields.EmbeddedDocumentField("SupplyRequestOrderedItem", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reasonCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    requester = fields.EmbeddedDocumentField("SupplyRequestRequester", blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    supplier = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authoredOn = DateAttribute("authoredOn")
        category = EmbeddedAttribute(type="CodeableConcept", getter="category", setter="category", searcher=StringSearch("category"))
        deliverFrom = ObjectIdReferenceAttribute({'Location', 'Organization'}, ("deliverFrom", str), "deliverFrom", pk_setter="deliverFrom")
        deliverTo = ObjectIdReferenceAttribute({'Patient', 'Location', 'Organization'}, ("deliverTo", str), "deliverTo", pk_setter="deliverTo")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        occurrenceDateTime = DateAttribute("occurrenceDateTime")
        occurrencePeriod = EmbeddedAttribute(type="Period", getter="occurrencePeriod", setter="occurrencePeriod", searcher=StringSearch("occurrencePeriod"))
        occurrenceTiming = EmbeddedAttribute(type="Timing", getter="occurrenceTiming", setter="occurrenceTiming", searcher=StringSearch("occurrenceTiming"))
        orderedItem = EmbeddedAttribute(type="SupplyRequestOrderedItem", getter="orderedItem", setter="orderedItem", searcher=StringSearch("orderedItem"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reasonCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="reasonCodeableConcept", setter="reasonCodeableConcept", searcher=StringSearch("reasonCodeableConcept"))
        reasonReference = ObjectIdReferenceAttribute({'Resource'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        requester = EmbeddedAttribute(type="SupplyRequestRequester", getter="requester", setter="requester", searcher=StringSearch("requester"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        supplier = ObjectIdReferenceAttribute({'Organization'}, ("supplier", str), "supplier", pk_setter="supplier")

class SupplyRequestOrderedItem(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    itemCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    itemReference = fields.ObjectIdField(blank=True, required=False)
    quantity = fields.EmbeddedDocumentField("Quantity", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        itemCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="itemCodeableConcept", setter="itemCodeableConcept", searcher=StringSearch("itemCodeableConcept"))
        itemReference = ObjectIdReferenceAttribute({'Device', 'Substance', 'Medication'}, ("itemReference", str), "itemReference", pk_setter="itemReference")
        quantity = EmbeddedAttribute(type="Quantity", getter="quantity", setter="quantity", searcher=StringSearch("quantity"))

class SupplyRequestRequester(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    agent = fields.ObjectIdField(blank=False, required=True)
    onBehalfOf = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        agent = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("agent", str), "agent", pk_setter="agent")
        onBehalfOf = ObjectIdReferenceAttribute({'Organization'}, ("onBehalfOf", str), "onBehalfOf", pk_setter="onBehalfOf")

class Task(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    authoredOn = fields.DateTimeField(blank=True, required=False)
    basedOn = fields.ObjectIdField(blank=True, required=False)
    businessStatus = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    context = fields.ObjectIdField(blank=True, required=False)
    definitionReference = fields.ObjectIdField(blank=True, required=False)
    definitionUri = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    executionPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    focus = fields.ObjectIdField(blank=True, required=False)
    # for_ = fields.ReferenceField(, blank=True, required=False)
    groupIdentifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    input = fields.EmbeddedDocumentListField("TaskInput", blank=True, required=False)
    intent = fields.CharField(blank=False, required=True)
    lastModified = fields.DateTimeField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    output = fields.EmbeddedDocumentListField("TaskOutput", blank=True, required=False)
    owner = fields.ObjectIdField(blank=True, required=False)
    partOf = fields.ObjectIdField(blank=True, required=False)
    performerType = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    priority = fields.CharField(blank=True, required=False)
    reason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    relevantHistory = fields.ObjectIdField(blank=True, required=False)
    requester = fields.EmbeddedDocumentField("TaskRequester", blank=True, required=False)
    restriction = fields.EmbeddedDocumentField("TaskRestriction", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    statusReason = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        authoredOn = DateAttribute("authoredOn")
        basedOn = ObjectIdReferenceAttribute({'Resource'}, ("basedOn", str), "basedOn", pk_setter="basedOn")
        businessStatus = EmbeddedAttribute(type="CodeableConcept", getter="businessStatus", setter="businessStatus", searcher=StringSearch("businessStatus"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        context = ObjectIdReferenceAttribute({'Encounter', 'EpisodeOfCare'}, ("context", str), "context", pk_setter="context")
        definitionReference = ObjectIdReferenceAttribute({'ActivityDefinition'}, ("definitionReference", str), "definitionReference", pk_setter="definitionReference")
        definitionUri = Attribute(getter="definitionUri", setter="definitionUri", searcher=StringSearch("definitionUri"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        executionPeriod = EmbeddedAttribute(type="Period", getter="executionPeriod", setter="executionPeriod", searcher=StringSearch("executionPeriod"))
        focus = ObjectIdReferenceAttribute({'Resource'}, ("focus", str), "focus", pk_setter="focus")
        # for_ = ObjectIdReferenceAttribute(getter="for_", setter="for_", searcher=StringSearch("for_"))
        groupIdentifier = EmbeddedAttribute(type="Identifier", getter="groupIdentifier", setter="groupIdentifier", searcher=StringSearch("groupIdentifier"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        input = EmbeddedAttribute(type="TaskInput", getter="input", setter="input", searcher=StringSearch("input"))
        intent = Attribute(getter="intent", setter="intent", searcher=StringSearch("intent"))
        lastModified = DateAttribute("lastModified")
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        output = EmbeddedAttribute(type="TaskOutput", getter="output", setter="output", searcher=StringSearch("output"))
        owner = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("owner", str), "owner", pk_setter="owner")
        partOf = ObjectIdReferenceAttribute({'Task'}, ("partOf", str), "partOf", pk_setter="partOf")
        performerType = EmbeddedAttribute(type="CodeableConcept", getter="performerType", setter="performerType", searcher=StringSearch("performerType"))
        priority = Attribute(getter="priority", setter="priority", searcher=StringSearch("priority"))
        reason = EmbeddedAttribute(type="CodeableConcept", getter="reason", setter="reason", searcher=StringSearch("reason"))
        relevantHistory = ObjectIdReferenceAttribute({'Provenance'}, ("relevantHistory", str), "relevantHistory", pk_setter="relevantHistory")
        requester = EmbeddedAttribute(type="TaskRequester", getter="requester", setter="requester", searcher=StringSearch("requester"))
        restriction = EmbeddedAttribute(type="TaskRestriction", getter="restriction", setter="restriction", searcher=StringSearch("restriction"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        statusReason = EmbeddedAttribute(type="CodeableConcept", getter="statusReason", setter="statusReason", searcher=StringSearch("statusReason"))

class TaskInput(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    valueAddress = fields.EmbeddedDocumentField("Address", blank=False, required=True)
    valueAge = fields.EmbeddedDocumentField("Age", blank=False, required=True)
    valueAnnotation = fields.EmbeddedDocumentField("Annotation", blank=False, required=True)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=False, required=True)
    valueBase64Binary = fields.CharField(blank=False, required=True)
    valueBoolean = fields.BooleanField(blank=False, required=True)
    valueCode = fields.CharField(blank=False, required=True)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    valueCoding = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    valueContactPoint = fields.EmbeddedDocumentField("ContactPoint", blank=False, required=True)
    valueCount = fields.EmbeddedDocumentField("Count", blank=False, required=True)
    valueDate = fields.DateTimeField(blank=False, required=True)
    valueDateTime = fields.DateTimeField(blank=False, required=True)
    valueDecimal = fields.FloatField(blank=False, required=True)
    valueDistance = fields.EmbeddedDocumentField("Distance", blank=False, required=True)
    valueDuration = fields.EmbeddedDocumentField("Duration", blank=False, required=True)
    valueHumanName = fields.EmbeddedDocumentField("HumanName", blank=False, required=True)
    valueId = fields.CharField(blank=False, required=True)
    valueIdentifier = fields.EmbeddedDocumentField("Identifier", blank=False, required=True)
    valueInstant = fields.DateTimeField(blank=False, required=True)
    valueInteger = fields.IntegerField(blank=False, required=True)
    valueMarkdown = fields.CharField(blank=False, required=True)
    valueMeta = fields.EmbeddedDocumentField("Meta", blank=False, required=True)
    valueMoney = fields.EmbeddedDocumentField("Money", blank=False, required=True)
    valueOid = fields.CharField(blank=False, required=True)
    valuePeriod = fields.EmbeddedDocumentField("Period", blank=False, required=True)
    valuePositiveInt = fields.IntegerField(blank=False, required=True)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=False, required=True)
    valueRange = fields.EmbeddedDocumentField("Range", blank=False, required=True)
    valueRatio = fields.EmbeddedDocumentField("Ratio", blank=False, required=True)
    # valueReference = fields.ReferenceField(, blank=False, required=True)
    valueSampledData = fields.EmbeddedDocumentField("SampledData", blank=False, required=True)
    valueSignature = fields.EmbeddedDocumentField("Signature", blank=False, required=True)
    valueString = fields.CharField(blank=False, required=True)
    valueTime = fields.DateTimeField(blank=False, required=True)
    valueTiming = fields.EmbeddedDocumentField("Timing", blank=False, required=True)
    valueUnsignedInt = fields.IntegerField(blank=False, required=True)
    valueUri = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        valueAddress = EmbeddedAttribute(type="Address", getter="valueAddress", setter="valueAddress", searcher=StringSearch("valueAddress"))
        valueAge = EmbeddedAttribute(type="Age", getter="valueAge", setter="valueAge", searcher=StringSearch("valueAge"))
        valueAnnotation = EmbeddedAttribute(type="Annotation", getter="valueAnnotation", setter="valueAnnotation", searcher=StringSearch("valueAnnotation"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueBase64Binary = Attribute(getter="valueBase64Binary", setter="valueBase64Binary", searcher=StringSearch("valueBase64Binary"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCode = Attribute(getter="valueCode", setter="valueCode", searcher=StringSearch("valueCode"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueContactPoint = EmbeddedAttribute(type="ContactPoint", getter="valueContactPoint", setter="valueContactPoint", searcher=StringSearch("valueContactPoint"))
        valueCount = EmbeddedAttribute(type="Count", getter="valueCount", setter="valueCount", searcher=StringSearch("valueCount"))
        valueDate = DateAttribute("valueDate")
        valueDateTime = DateAttribute("valueDateTime")
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueDistance = EmbeddedAttribute(type="Distance", getter="valueDistance", setter="valueDistance", searcher=StringSearch("valueDistance"))
        valueDuration = EmbeddedAttribute(type="Duration", getter="valueDuration", setter="valueDuration", searcher=StringSearch("valueDuration"))
        valueHumanName = EmbeddedAttribute(type="HumanName", getter="valueHumanName", setter="valueHumanName", searcher=StringSearch("valueHumanName"))
        valueId = Attribute(getter="valueId", setter="valueId", searcher=StringSearch("valueId"))
        valueIdentifier = EmbeddedAttribute(type="Identifier", getter="valueIdentifier", setter="valueIdentifier", searcher=StringSearch("valueIdentifier"))
        valueInstant = DateAttribute("valueInstant")
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueMarkdown = Attribute(getter="valueMarkdown", setter="valueMarkdown", searcher=StringSearch("valueMarkdown"))
        valueMeta = EmbeddedAttribute(type="Meta", getter="valueMeta", setter="valueMeta", searcher=StringSearch("valueMeta"))
        valueMoney = EmbeddedAttribute(type="Money", getter="valueMoney", setter="valueMoney", searcher=StringSearch("valueMoney"))
        valueOid = Attribute(getter="valueOid", setter="valueOid", searcher=StringSearch("valueOid"))
        valuePeriod = EmbeddedAttribute(type="Period", getter="valuePeriod", setter="valuePeriod", searcher=StringSearch("valuePeriod"))
        valuePositiveInt = Attribute(getter="valuePositiveInt", setter="valuePositiveInt", searcher=NumericSearch("valuePositiveInt"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))
        valueRatio = EmbeddedAttribute(type="Ratio", getter="valueRatio", setter="valueRatio", searcher=StringSearch("valueRatio"))
        # valueReference = ObjectIdReferenceAttribute(getter="valueReference", setter="valueReference", searcher=StringSearch("valueReference"))
        valueSampledData = EmbeddedAttribute(type="SampledData", getter="valueSampledData", setter="valueSampledData", searcher=StringSearch("valueSampledData"))
        valueSignature = EmbeddedAttribute(type="Signature", getter="valueSignature", setter="valueSignature", searcher=StringSearch("valueSignature"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")
        valueTiming = EmbeddedAttribute(type="Timing", getter="valueTiming", setter="valueTiming", searcher=StringSearch("valueTiming"))
        valueUnsignedInt = Attribute(getter="valueUnsignedInt", setter="valueUnsignedInt", searcher=NumericSearch("valueUnsignedInt"))
        valueUri = Attribute(getter="valueUri", setter="valueUri", searcher=StringSearch("valueUri"))

class TaskOutput(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    type = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    valueAddress = fields.EmbeddedDocumentField("Address", blank=False, required=True)
    valueAge = fields.EmbeddedDocumentField("Age", blank=False, required=True)
    valueAnnotation = fields.EmbeddedDocumentField("Annotation", blank=False, required=True)
    valueAttachment = fields.EmbeddedDocumentField("Attachment", blank=False, required=True)
    valueBase64Binary = fields.CharField(blank=False, required=True)
    valueBoolean = fields.BooleanField(blank=False, required=True)
    valueCode = fields.CharField(blank=False, required=True)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    valueCoding = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    valueContactPoint = fields.EmbeddedDocumentField("ContactPoint", blank=False, required=True)
    valueCount = fields.EmbeddedDocumentField("Count", blank=False, required=True)
    valueDate = fields.DateTimeField(blank=False, required=True)
    valueDateTime = fields.DateTimeField(blank=False, required=True)
    valueDecimal = fields.FloatField(blank=False, required=True)
    valueDistance = fields.EmbeddedDocumentField("Distance", blank=False, required=True)
    valueDuration = fields.EmbeddedDocumentField("Duration", blank=False, required=True)
    valueHumanName = fields.EmbeddedDocumentField("HumanName", blank=False, required=True)
    valueId = fields.CharField(blank=False, required=True)
    valueIdentifier = fields.EmbeddedDocumentField("Identifier", blank=False, required=True)
    valueInstant = fields.DateTimeField(blank=False, required=True)
    valueInteger = fields.IntegerField(blank=False, required=True)
    valueMarkdown = fields.CharField(blank=False, required=True)
    valueMeta = fields.EmbeddedDocumentField("Meta", blank=False, required=True)
    valueMoney = fields.EmbeddedDocumentField("Money", blank=False, required=True)
    valueOid = fields.CharField(blank=False, required=True)
    valuePeriod = fields.EmbeddedDocumentField("Period", blank=False, required=True)
    valuePositiveInt = fields.IntegerField(blank=False, required=True)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=False, required=True)
    valueRange = fields.EmbeddedDocumentField("Range", blank=False, required=True)
    valueRatio = fields.EmbeddedDocumentField("Ratio", blank=False, required=True)
    # valueReference = fields.ReferenceField(, blank=False, required=True)
    valueSampledData = fields.EmbeddedDocumentField("SampledData", blank=False, required=True)
    valueSignature = fields.EmbeddedDocumentField("Signature", blank=False, required=True)
    valueString = fields.CharField(blank=False, required=True)
    valueTime = fields.DateTimeField(blank=False, required=True)
    valueTiming = fields.EmbeddedDocumentField("Timing", blank=False, required=True)
    valueUnsignedInt = fields.IntegerField(blank=False, required=True)
    valueUri = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        type = EmbeddedAttribute(type="CodeableConcept", getter="type", setter="type", searcher=StringSearch("type"))
        valueAddress = EmbeddedAttribute(type="Address", getter="valueAddress", setter="valueAddress", searcher=StringSearch("valueAddress"))
        valueAge = EmbeddedAttribute(type="Age", getter="valueAge", setter="valueAge", searcher=StringSearch("valueAge"))
        valueAnnotation = EmbeddedAttribute(type="Annotation", getter="valueAnnotation", setter="valueAnnotation", searcher=StringSearch("valueAnnotation"))
        valueAttachment = EmbeddedAttribute(type="Attachment", getter="valueAttachment", setter="valueAttachment", searcher=StringSearch("valueAttachment"))
        valueBase64Binary = Attribute(getter="valueBase64Binary", setter="valueBase64Binary", searcher=StringSearch("valueBase64Binary"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCode = Attribute(getter="valueCode", setter="valueCode", searcher=StringSearch("valueCode"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueCoding = EmbeddedAttribute(type="Coding", getter="valueCoding", setter="valueCoding", searcher=StringSearch("valueCoding"))
        valueContactPoint = EmbeddedAttribute(type="ContactPoint", getter="valueContactPoint", setter="valueContactPoint", searcher=StringSearch("valueContactPoint"))
        valueCount = EmbeddedAttribute(type="Count", getter="valueCount", setter="valueCount", searcher=StringSearch("valueCount"))
        valueDate = DateAttribute("valueDate")
        valueDateTime = DateAttribute("valueDateTime")
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueDistance = EmbeddedAttribute(type="Distance", getter="valueDistance", setter="valueDistance", searcher=StringSearch("valueDistance"))
        valueDuration = EmbeddedAttribute(type="Duration", getter="valueDuration", setter="valueDuration", searcher=StringSearch("valueDuration"))
        valueHumanName = EmbeddedAttribute(type="HumanName", getter="valueHumanName", setter="valueHumanName", searcher=StringSearch("valueHumanName"))
        valueId = Attribute(getter="valueId", setter="valueId", searcher=StringSearch("valueId"))
        valueIdentifier = EmbeddedAttribute(type="Identifier", getter="valueIdentifier", setter="valueIdentifier", searcher=StringSearch("valueIdentifier"))
        valueInstant = DateAttribute("valueInstant")
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueMarkdown = Attribute(getter="valueMarkdown", setter="valueMarkdown", searcher=StringSearch("valueMarkdown"))
        valueMeta = EmbeddedAttribute(type="Meta", getter="valueMeta", setter="valueMeta", searcher=StringSearch("valueMeta"))
        valueMoney = EmbeddedAttribute(type="Money", getter="valueMoney", setter="valueMoney", searcher=StringSearch("valueMoney"))
        valueOid = Attribute(getter="valueOid", setter="valueOid", searcher=StringSearch("valueOid"))
        valuePeriod = EmbeddedAttribute(type="Period", getter="valuePeriod", setter="valuePeriod", searcher=StringSearch("valuePeriod"))
        valuePositiveInt = Attribute(getter="valuePositiveInt", setter="valuePositiveInt", searcher=NumericSearch("valuePositiveInt"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))
        valueRatio = EmbeddedAttribute(type="Ratio", getter="valueRatio", setter="valueRatio", searcher=StringSearch("valueRatio"))
        # valueReference = ObjectIdReferenceAttribute(getter="valueReference", setter="valueReference", searcher=StringSearch("valueReference"))
        valueSampledData = EmbeddedAttribute(type="SampledData", getter="valueSampledData", setter="valueSampledData", searcher=StringSearch("valueSampledData"))
        valueSignature = EmbeddedAttribute(type="Signature", getter="valueSignature", setter="valueSignature", searcher=StringSearch("valueSignature"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueTime = DateAttribute("valueTime")
        valueTiming = EmbeddedAttribute(type="Timing", getter="valueTiming", setter="valueTiming", searcher=StringSearch("valueTiming"))
        valueUnsignedInt = Attribute(getter="valueUnsignedInt", setter="valueUnsignedInt", searcher=NumericSearch("valueUnsignedInt"))
        valueUri = Attribute(getter="valueUri", setter="valueUri", searcher=StringSearch("valueUri"))

class TaskRequester(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    agent = fields.ObjectIdField(blank=False, required=True)
    onBehalfOf = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        agent = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Device'}, ("agent", str), "agent", pk_setter="agent")
        onBehalfOf = ObjectIdReferenceAttribute({'Organization'}, ("onBehalfOf", str), "onBehalfOf", pk_setter="onBehalfOf")

class TaskRestriction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    period = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    recipient = fields.ObjectIdField(blank=True, required=False)
    repetitions = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        period = EmbeddedAttribute(type="Period", getter="period", setter="period", searcher=StringSearch("period"))
        recipient = ObjectIdReferenceAttribute({'RelatedPerson', 'Practitioner', 'Patient', 'Organization', 'Group'}, ("recipient", str), "recipient", pk_setter="recipient")
        repetitions = Attribute(getter="repetitions", setter="repetitions", searcher=NumericSearch("repetitions"))

class TestReport(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    issued = fields.DateTimeField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    participant = fields.EmbeddedDocumentListField("TestReportParticipant", blank=True, required=False)
    result = fields.CharField(blank=False, required=True)
    score = fields.FloatField(blank=True, required=False)
    setup = fields.EmbeddedDocumentField("TestReportSetup", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    teardown = fields.EmbeddedDocumentField("TestReportTeardown", blank=True, required=False)
    test = fields.EmbeddedDocumentListField("TestReportTest", blank=True, required=False)
    testScript = fields.ObjectIdField(blank=False, required=True)
    tester = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        issued = DateAttribute("issued")
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        participant = EmbeddedAttribute(type="TestReportParticipant", getter="participant", setter="participant", searcher=StringSearch("participant"))
        result = Attribute(getter="result", setter="result", searcher=StringSearch("result"))
        score = Attribute(getter="score", setter="score", searcher=NumericSearch("score"))
        setup = EmbeddedAttribute(type="TestReportSetup", getter="setup", setter="setup", searcher=StringSearch("setup"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        teardown = EmbeddedAttribute(type="TestReportTeardown", getter="teardown", setter="teardown", searcher=StringSearch("teardown"))
        test = EmbeddedAttribute(type="TestReportTest", getter="test", setter="test", searcher=StringSearch("test"))
        testScript = ObjectIdReferenceAttribute({'TestScript'}, ("testScript", str), "testScript", pk_setter="testScript")
        tester = Attribute(getter="tester", setter="tester", searcher=StringSearch("tester"))

class TestReportParticipant(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    uri = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))
        uri = Attribute(getter="uri", setter="uri", searcher=StringSearch("uri"))

class TestReportSetup(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("TestReportSetupAction", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="TestReportSetupAction", getter="action", setter="action", searcher=StringSearch("action"))

class TestReportSetupAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    assert_ = fields.EmbeddedDocumentField("TestReportSetupActionAssert", blank=True, required=False)
    operation = fields.EmbeddedDocumentField("TestReportSetupActionOperation", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        assert_ = EmbeddedAttribute(type="TestReportSetupActionAssert", getter="assert_", setter="assert_", searcher=StringSearch("assert_"))
        operation = EmbeddedAttribute(type="TestReportSetupActionOperation", getter="operation", setter="operation", searcher=StringSearch("operation"))

class TestReportSetupActionAssert(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    detail = fields.CharField(blank=True, required=False)
    message = fields.CharField(blank=True, required=False)
    result = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        detail = Attribute(getter="detail", setter="detail", searcher=StringSearch("detail"))
        message = Attribute(getter="message", setter="message", searcher=StringSearch("message"))
        result = Attribute(getter="result", setter="result", searcher=StringSearch("result"))

class TestReportSetupActionOperation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    detail = fields.CharField(blank=True, required=False)
    message = fields.CharField(blank=True, required=False)
    result = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        detail = Attribute(getter="detail", setter="detail", searcher=StringSearch("detail"))
        message = Attribute(getter="message", setter="message", searcher=StringSearch("message"))
        result = Attribute(getter="result", setter="result", searcher=StringSearch("result"))

class TestReportTeardown(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("TestReportTeardownAction", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="TestReportTeardownAction", getter="action", setter="action", searcher=StringSearch("action"))

class TestReportTeardownAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    operation = fields.EmbeddedDocumentField("TestReportSetupActionOperation", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        operation = EmbeddedAttribute(type="TestReportSetupActionOperation", getter="operation", setter="operation", searcher=StringSearch("operation"))

class TestReportTest(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("TestReportTestAction", blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="TestReportTestAction", getter="action", setter="action", searcher=StringSearch("action"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))

class TestReportTestAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    assert_ = fields.EmbeddedDocumentField("TestReportSetupActionAssert", blank=True, required=False)
    operation = fields.EmbeddedDocumentField("TestReportSetupActionOperation", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        assert_ = EmbeddedAttribute(type="TestReportSetupActionAssert", getter="assert_", setter="assert_", searcher=StringSearch("assert_"))
        operation = EmbeddedAttribute(type="TestReportSetupActionOperation", getter="operation", setter="operation", searcher=StringSearch("operation"))

class TestScript(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    destination = fields.EmbeddedDocumentListField("TestScriptDestination", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    fixture = fields.EmbeddedDocumentListField("TestScriptFixture", blank=True, required=False)
    identifier = fields.EmbeddedDocumentField("Identifier", blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    metadata = fields.EmbeddedDocumentField("TestScriptMetadata", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    origin = fields.EmbeddedDocumentListField("TestScriptOrigin", blank=True, required=False)
    profile = fields.ObjectIdField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    rule = fields.EmbeddedDocumentListField("TestScriptRule", blank=True, required=False)
    ruleset = fields.EmbeddedDocumentListField("TestScriptRuleset", blank=True, required=False)
    setup = fields.EmbeddedDocumentField("TestScriptSetup", blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    teardown = fields.EmbeddedDocumentField("TestScriptTeardown", blank=True, required=False)
    test = fields.EmbeddedDocumentListField("TestScriptTest", blank=True, required=False)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=False, required=True)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    variable = fields.EmbeddedDocumentListField("TestScriptVariable", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        destination = EmbeddedAttribute(type="TestScriptDestination", getter="destination", setter="destination", searcher=StringSearch("destination"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        fixture = EmbeddedAttribute(type="TestScriptFixture", getter="fixture", setter="fixture", searcher=StringSearch("fixture"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        metadata = EmbeddedAttribute(type="TestScriptMetadata", getter="metadata", setter="metadata", searcher=StringSearch("metadata"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        origin = EmbeddedAttribute(type="TestScriptOrigin", getter="origin", setter="origin", searcher=StringSearch("origin"))
        profile = ObjectIdReferenceAttribute({'Resource'}, ("profile", str), "profile", pk_setter="profile")
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        rule = EmbeddedAttribute(type="TestScriptRule", getter="rule", setter="rule", searcher=StringSearch("rule"))
        ruleset = EmbeddedAttribute(type="TestScriptRuleset", getter="ruleset", setter="ruleset", searcher=StringSearch("ruleset"))
        setup = EmbeddedAttribute(type="TestScriptSetup", getter="setup", setter="setup", searcher=StringSearch("setup"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        teardown = EmbeddedAttribute(type="TestScriptTeardown", getter="teardown", setter="teardown", searcher=StringSearch("teardown"))
        test = EmbeddedAttribute(type="TestScriptTest", getter="test", setter="test", searcher=StringSearch("test"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        variable = EmbeddedAttribute(type="TestScriptVariable", getter="variable", setter="variable", searcher=StringSearch("variable"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class TestScriptDestination(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    index = fields.IntegerField(blank=False, required=True)
    profile = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        index = Attribute(getter="index", setter="index", searcher=NumericSearch("index"))
        profile = EmbeddedAttribute(type="Coding", getter="profile", setter="profile", searcher=StringSearch("profile"))

class TestScriptFixture(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    autocreate = fields.BooleanField(blank=True, required=False)
    autodelete = fields.BooleanField(blank=True, required=False)
    resource = fields.ObjectIdField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        autocreate = Attribute(getter="autocreate", setter="autocreate", searcher=StringSearch("autocreate"))
        autodelete = Attribute(getter="autodelete", setter="autodelete", searcher=StringSearch("autodelete"))
        resource = ObjectIdReferenceAttribute({'Resource'}, ("resource", str), "resource", pk_setter="resource")

class TestScriptMetadata(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    capability = fields.EmbeddedDocumentListField("TestScriptMetadataCapability", blank=False, required=True)
    link = fields.EmbeddedDocumentListField("TestScriptMetadataLink", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        capability = EmbeddedAttribute(type="TestScriptMetadataCapability", getter="capability", setter="capability", searcher=StringSearch("capability"))
        link = EmbeddedAttribute(type="TestScriptMetadataLink", getter="link", setter="link", searcher=StringSearch("link"))

class TestScriptMetadataCapability(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    capabilities = fields.ObjectIdField(blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    destination = fields.IntegerField(blank=True, required=False)
    link = fields.ListField(fields.CharField(), blank=True, required=False)
    origin = fields.ListField(fields.IntegerField(), blank=True, required=False)
    required = fields.BooleanField(blank=True, required=False)
    validated = fields.BooleanField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        capabilities = ObjectIdReferenceAttribute({'CapabilityStatement'}, ("capabilities", str), "capabilities", pk_setter="capabilities")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        destination = Attribute(getter="destination", setter="destination", searcher=NumericSearch("destination"))
        link = Attribute(getter="link", setter="link", searcher=StringSearch("link"))
        origin = Attribute(getter="origin", setter="origin", searcher=NumericSearch("origin"))
        required = Attribute(getter="required", setter="required", searcher=StringSearch("required"))
        validated = Attribute(getter="validated", setter="validated", searcher=StringSearch("validated"))

class TestScriptMetadataLink(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class TestScriptOrigin(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    index = fields.IntegerField(blank=False, required=True)
    profile = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        index = Attribute(getter="index", setter="index", searcher=NumericSearch("index"))
        profile = EmbeddedAttribute(type="Coding", getter="profile", setter="profile", searcher=StringSearch("profile"))

class TestScriptRule(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    param = fields.EmbeddedDocumentListField("TestScriptRuleParam", blank=True, required=False)
    resource = fields.ObjectIdField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        param = EmbeddedAttribute(type="TestScriptRuleParam", getter="param", setter="param", searcher=StringSearch("param"))
        resource = ObjectIdReferenceAttribute({'Resource'}, ("resource", str), "resource", pk_setter="resource")

class TestScriptRuleParam(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    value = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class TestScriptRuleset(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    resource = fields.ObjectIdField(blank=False, required=True)
    rule = fields.EmbeddedDocumentListField("TestScriptRulesetRule", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        resource = ObjectIdReferenceAttribute({'Resource'}, ("resource", str), "resource", pk_setter="resource")
        rule = EmbeddedAttribute(type="TestScriptRulesetRule", getter="rule", setter="rule", searcher=StringSearch("rule"))

class TestScriptRulesetRule(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    param = fields.EmbeddedDocumentListField("TestScriptRulesetRuleParam", blank=True, required=False)
    ruleId = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        param = EmbeddedAttribute(type="TestScriptRulesetRuleParam", getter="param", setter="param", searcher=StringSearch("param"))
        ruleId = Attribute(getter="ruleId", setter="ruleId", searcher=StringSearch("ruleId"))

class TestScriptRulesetRuleParam(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    value = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class TestScriptSetup(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("TestScriptSetupAction", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="TestScriptSetupAction", getter="action", setter="action", searcher=StringSearch("action"))

class TestScriptSetupAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    assert_ = fields.EmbeddedDocumentField("TestScriptSetupActionAssert", blank=True, required=False)
    operation = fields.EmbeddedDocumentField("TestScriptSetupActionOperation", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        assert_ = EmbeddedAttribute(type="TestScriptSetupActionAssert", getter="assert_", setter="assert_", searcher=StringSearch("assert_"))
        operation = EmbeddedAttribute(type="TestScriptSetupActionOperation", getter="operation", setter="operation", searcher=StringSearch("operation"))

class TestScriptSetupActionAssert(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    compareToSourceExpression = fields.CharField(blank=True, required=False)
    compareToSourceId = fields.CharField(blank=True, required=False)
    compareToSourcePath = fields.CharField(blank=True, required=False)
    contentType = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    direction = fields.CharField(blank=True, required=False)
    expression = fields.CharField(blank=True, required=False)
    headerField = fields.CharField(blank=True, required=False)
    label = fields.CharField(blank=True, required=False)
    minimumId = fields.CharField(blank=True, required=False)
    navigationLinks = fields.BooleanField(blank=True, required=False)
    operator = fields.CharField(blank=True, required=False)
    path = fields.CharField(blank=True, required=False)
    requestMethod = fields.CharField(blank=True, required=False)
    requestURL = fields.CharField(blank=True, required=False)
    resource = fields.CharField(blank=True, required=False)
    response = fields.CharField(blank=True, required=False)
    responseCode = fields.CharField(blank=True, required=False)
    rule = fields.EmbeddedDocumentField("TestScriptSetupActionAssertRule", blank=True, required=False)
    ruleset = fields.EmbeddedDocumentField("TestScriptSetupActionAssertRuleset", blank=True, required=False)
    sourceId = fields.CharField(blank=True, required=False)
    validateProfileId = fields.CharField(blank=True, required=False)
    value = fields.CharField(blank=True, required=False)
    warningOnly = fields.BooleanField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        compareToSourceExpression = Attribute(getter="compareToSourceExpression", setter="compareToSourceExpression", searcher=StringSearch("compareToSourceExpression"))
        compareToSourceId = Attribute(getter="compareToSourceId", setter="compareToSourceId", searcher=StringSearch("compareToSourceId"))
        compareToSourcePath = Attribute(getter="compareToSourcePath", setter="compareToSourcePath", searcher=StringSearch("compareToSourcePath"))
        contentType = Attribute(getter="contentType", setter="contentType", searcher=StringSearch("contentType"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        direction = Attribute(getter="direction", setter="direction", searcher=StringSearch("direction"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        headerField = Attribute(getter="headerField", setter="headerField", searcher=StringSearch("headerField"))
        label = Attribute(getter="label", setter="label", searcher=StringSearch("label"))
        minimumId = Attribute(getter="minimumId", setter="minimumId", searcher=StringSearch("minimumId"))
        navigationLinks = Attribute(getter="navigationLinks", setter="navigationLinks", searcher=StringSearch("navigationLinks"))
        operator = Attribute(getter="operator", setter="operator", searcher=StringSearch("operator"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))
        requestMethod = Attribute(getter="requestMethod", setter="requestMethod", searcher=StringSearch("requestMethod"))
        requestURL = Attribute(getter="requestURL", setter="requestURL", searcher=StringSearch("requestURL"))
        resource = Attribute(getter="resource", setter="resource", searcher=StringSearch("resource"))
        response = Attribute(getter="response", setter="response", searcher=StringSearch("response"))
        responseCode = Attribute(getter="responseCode", setter="responseCode", searcher=StringSearch("responseCode"))
        rule = EmbeddedAttribute(type="TestScriptSetupActionAssertRule", getter="rule", setter="rule", searcher=StringSearch("rule"))
        ruleset = EmbeddedAttribute(type="TestScriptSetupActionAssertRuleset", getter="ruleset", setter="ruleset", searcher=StringSearch("ruleset"))
        sourceId = Attribute(getter="sourceId", setter="sourceId", searcher=StringSearch("sourceId"))
        validateProfileId = Attribute(getter="validateProfileId", setter="validateProfileId", searcher=StringSearch("validateProfileId"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))
        warningOnly = Attribute(getter="warningOnly", setter="warningOnly", searcher=StringSearch("warningOnly"))

class TestScriptSetupActionAssertRule(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    param = fields.EmbeddedDocumentListField("TestScriptSetupActionAssertRuleParam", blank=True, required=False)
    ruleId = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        param = EmbeddedAttribute(type="TestScriptSetupActionAssertRuleParam", getter="param", setter="param", searcher=StringSearch("param"))
        ruleId = Attribute(getter="ruleId", setter="ruleId", searcher=StringSearch("ruleId"))

class TestScriptSetupActionAssertRuleParam(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class TestScriptSetupActionAssertRuleset(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    rule = fields.EmbeddedDocumentListField("TestScriptSetupActionAssertRulesetRule", blank=True, required=False)
    rulesetId = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        rule = EmbeddedAttribute(type="TestScriptSetupActionAssertRulesetRule", getter="rule", setter="rule", searcher=StringSearch("rule"))
        rulesetId = Attribute(getter="rulesetId", setter="rulesetId", searcher=StringSearch("rulesetId"))

class TestScriptSetupActionAssertRulesetRule(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    param = fields.EmbeddedDocumentListField("TestScriptSetupActionAssertRulesetRuleParam", blank=True, required=False)
    ruleId = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        param = EmbeddedAttribute(type="TestScriptSetupActionAssertRulesetRuleParam", getter="param", setter="param", searcher=StringSearch("param"))
        ruleId = Attribute(getter="ruleId", setter="ruleId", searcher=StringSearch("ruleId"))

class TestScriptSetupActionAssertRulesetRuleParam(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class TestScriptSetupActionOperation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    accept = fields.CharField(blank=True, required=False)
    contentType = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    destination = fields.IntegerField(blank=True, required=False)
    encodeRequestUrl = fields.BooleanField(blank=True, required=False)
    label = fields.CharField(blank=True, required=False)
    origin = fields.IntegerField(blank=True, required=False)
    params = fields.CharField(blank=True, required=False)
    requestHeader = fields.EmbeddedDocumentListField("TestScriptSetupActionOperationRequestHeader", blank=True, required=False)
    requestId = fields.CharField(blank=True, required=False)
    resource = fields.CharField(blank=True, required=False)
    responseId = fields.CharField(blank=True, required=False)
    sourceId = fields.CharField(blank=True, required=False)
    targetId = fields.CharField(blank=True, required=False)
    type = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        accept = Attribute(getter="accept", setter="accept", searcher=StringSearch("accept"))
        contentType = Attribute(getter="contentType", setter="contentType", searcher=StringSearch("contentType"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        destination = Attribute(getter="destination", setter="destination", searcher=NumericSearch("destination"))
        encodeRequestUrl = Attribute(getter="encodeRequestUrl", setter="encodeRequestUrl", searcher=StringSearch("encodeRequestUrl"))
        label = Attribute(getter="label", setter="label", searcher=StringSearch("label"))
        origin = Attribute(getter="origin", setter="origin", searcher=NumericSearch("origin"))
        params = Attribute(getter="params", setter="params", searcher=StringSearch("params"))
        requestHeader = EmbeddedAttribute(type="TestScriptSetupActionOperationRequestHeader", getter="requestHeader", setter="requestHeader", searcher=StringSearch("requestHeader"))
        requestId = Attribute(getter="requestId", setter="requestId", searcher=StringSearch("requestId"))
        resource = Attribute(getter="resource", setter="resource", searcher=StringSearch("resource"))
        responseId = Attribute(getter="responseId", setter="responseId", searcher=StringSearch("responseId"))
        sourceId = Attribute(getter="sourceId", setter="sourceId", searcher=StringSearch("sourceId"))
        targetId = Attribute(getter="targetId", setter="targetId", searcher=StringSearch("targetId"))
        type = EmbeddedAttribute(type="Coding", getter="type", setter="type", searcher=StringSearch("type"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))

class TestScriptSetupActionOperationRequestHeader(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    field = fields.CharField(blank=False, required=True)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        field = Attribute(getter="field", setter="field", searcher=StringSearch("field"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class TestScriptTeardown(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("TestScriptTeardownAction", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="TestScriptTeardownAction", getter="action", setter="action", searcher=StringSearch("action"))

class TestScriptTeardownAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    operation = fields.EmbeddedDocumentField("TestScriptSetupActionOperation", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        operation = EmbeddedAttribute(type="TestScriptSetupActionOperation", getter="operation", setter="operation", searcher=StringSearch("operation"))

class TestScriptTest(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    action = fields.EmbeddedDocumentListField("TestScriptTestAction", blank=False, required=True)
    description = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        action = EmbeddedAttribute(type="TestScriptTestAction", getter="action", setter="action", searcher=StringSearch("action"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))

class TestScriptTestAction(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    assert_ = fields.EmbeddedDocumentField("TestScriptSetupActionAssert", blank=True, required=False)
    operation = fields.EmbeddedDocumentField("TestScriptSetupActionOperation", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        assert_ = EmbeddedAttribute(type="TestScriptSetupActionAssert", getter="assert_", setter="assert_", searcher=StringSearch("assert_"))
        operation = EmbeddedAttribute(type="TestScriptSetupActionOperation", getter="operation", setter="operation", searcher=StringSearch("operation"))

class TestScriptVariable(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    defaultValue = fields.CharField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    expression = fields.CharField(blank=True, required=False)
    headerField = fields.CharField(blank=True, required=False)
    hint = fields.CharField(blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    path = fields.CharField(blank=True, required=False)
    sourceId = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        defaultValue = Attribute(getter="defaultValue", setter="defaultValue", searcher=StringSearch("defaultValue"))
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        expression = Attribute(getter="expression", setter="expression", searcher=StringSearch("expression"))
        headerField = Attribute(getter="headerField", setter="headerField", searcher=StringSearch("headerField"))
        hint = Attribute(getter="hint", setter="hint", searcher=StringSearch("hint"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        path = Attribute(getter="path", setter="path", searcher=StringSearch("path"))
        sourceId = Attribute(getter="sourceId", setter="sourceId", searcher=StringSearch("sourceId"))

class Timing(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    event = fields.DateTimeField(blank=True, required=False)
    repeat = fields.EmbeddedDocumentField("TimingRepeat", blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = EmbeddedAttribute(type="CodeableConcept", getter="code", setter="code", searcher=StringSearch("code"))
        event = DateAttribute("event")
        repeat = EmbeddedAttribute(type="TimingRepeat", getter="repeat", setter="repeat", searcher=StringSearch("repeat"))

class TimingRepeat(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    boundsDuration = fields.EmbeddedDocumentField("Duration", blank=True, required=False)
    boundsPeriod = fields.EmbeddedDocumentField("Period", blank=True, required=False)
    boundsRange = fields.EmbeddedDocumentField("Range", blank=True, required=False)
    count = fields.IntegerField(blank=True, required=False)
    countMax = fields.IntegerField(blank=True, required=False)
    dayOfWeek = fields.ListField(fields.CharField(), blank=True, required=False)
    duration = fields.FloatField(blank=True, required=False)
    durationMax = fields.FloatField(blank=True, required=False)
    durationUnit = fields.CharField(blank=True, required=False)
    frequency = fields.IntegerField(blank=True, required=False)
    frequencyMax = fields.IntegerField(blank=True, required=False)
    offset = fields.IntegerField(blank=True, required=False)
    period = fields.FloatField(blank=True, required=False)
    periodMax = fields.FloatField(blank=True, required=False)
    periodUnit = fields.CharField(blank=True, required=False)
    timeOfDay = fields.DateTimeField(blank=True, required=False)
    when = fields.ListField(fields.CharField(), blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        boundsDuration = EmbeddedAttribute(type="Duration", getter="boundsDuration", setter="boundsDuration", searcher=StringSearch("boundsDuration"))
        boundsPeriod = EmbeddedAttribute(type="Period", getter="boundsPeriod", setter="boundsPeriod", searcher=StringSearch("boundsPeriod"))
        boundsRange = EmbeddedAttribute(type="Range", getter="boundsRange", setter="boundsRange", searcher=StringSearch("boundsRange"))
        count = Attribute(getter="count", setter="count", searcher=NumericSearch("count"))
        countMax = Attribute(getter="countMax", setter="countMax", searcher=NumericSearch("countMax"))
        dayOfWeek = Attribute(getter="dayOfWeek", setter="dayOfWeek", searcher=StringSearch("dayOfWeek"))
        duration = Attribute(getter="duration", setter="duration", searcher=NumericSearch("duration"))
        durationMax = Attribute(getter="durationMax", setter="durationMax", searcher=NumericSearch("durationMax"))
        durationUnit = Attribute(getter="durationUnit", setter="durationUnit", searcher=StringSearch("durationUnit"))
        frequency = Attribute(getter="frequency", setter="frequency", searcher=NumericSearch("frequency"))
        frequencyMax = Attribute(getter="frequencyMax", setter="frequencyMax", searcher=NumericSearch("frequencyMax"))
        offset = Attribute(getter="offset", setter="offset", searcher=NumericSearch("offset"))
        period = Attribute(getter="period", setter="period", searcher=NumericSearch("period"))
        periodMax = Attribute(getter="periodMax", setter="periodMax", searcher=NumericSearch("periodMax"))
        periodUnit = Attribute(getter="periodUnit", setter="periodUnit", searcher=StringSearch("periodUnit"))
        timeOfDay = DateAttribute("timeOfDay")
        when = Attribute(getter="when", setter="when", searcher=StringSearch("when"))

class TriggerDefinition(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    eventData = fields.EmbeddedDocumentField("DataRequirement", blank=True, required=False)
    eventName = fields.CharField(blank=True, required=False)
    eventTimingDate = fields.DateTimeField(blank=True, required=False)
    eventTimingDateTime = fields.DateTimeField(blank=True, required=False)
    eventTimingReference = fields.ObjectIdField(blank=True, required=False)
    eventTimingTiming = fields.EmbeddedDocumentField("Timing", blank=True, required=False)
    type = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        eventData = EmbeddedAttribute(type="DataRequirement", getter="eventData", setter="eventData", searcher=StringSearch("eventData"))
        eventName = Attribute(getter="eventName", setter="eventName", searcher=StringSearch("eventName"))
        eventTimingDate = DateAttribute("eventTimingDate")
        eventTimingDateTime = DateAttribute("eventTimingDateTime")
        eventTimingReference = ObjectIdReferenceAttribute({'Schedule'}, ("eventTimingReference", str), "eventTimingReference", pk_setter="eventTimingReference")
        eventTimingTiming = EmbeddedAttribute(type="Timing", getter="eventTimingTiming", setter="eventTimingTiming", searcher=StringSearch("eventTimingTiming"))
        type = Attribute(getter="type", setter="type", searcher=StringSearch("type"))

class UsageContext(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    code = fields.EmbeddedDocumentField("Coding", blank=False, required=True)
    valueCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=False, required=True)
    valueQuantity = fields.EmbeddedDocumentField("Quantity", blank=False, required=True)
    valueRange = fields.EmbeddedDocumentField("Range", blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        code = EmbeddedAttribute(type="Coding", getter="code", setter="code", searcher=StringSearch("code"))
        valueCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="valueCodeableConcept", setter="valueCodeableConcept", searcher=StringSearch("valueCodeableConcept"))
        valueQuantity = EmbeddedAttribute(type="Quantity", getter="valueQuantity", setter="valueQuantity", searcher=StringSearch("valueQuantity"))
        valueRange = EmbeddedAttribute(type="Range", getter="valueRange", setter="valueRange", searcher=StringSearch("valueRange"))

class ValueSet(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    compose = fields.EmbeddedDocumentField("ValueSetCompose", blank=True, required=False)
    contact = fields.EmbeddedDocumentListField("ContactDetail", blank=True, required=False)
    copyright = fields.CharField(blank=True, required=False)
    date = fields.DateTimeField(blank=True, required=False)
    description = fields.CharField(blank=True, required=False)
    expansion = fields.EmbeddedDocumentField("ValueSetExpansion", blank=True, required=False)
    experimental = fields.BooleanField(blank=True, required=False)
    extensible = fields.BooleanField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    immutable = fields.BooleanField(blank=True, required=False)
    jurisdiction = fields.EmbeddedDocumentListField("CodeableConcept", blank=True, required=False)
    name = fields.CharField(blank=True, required=False)
    publisher = fields.CharField(blank=True, required=False)
    purpose = fields.CharField(blank=True, required=False)
    status = fields.CharField(blank=False, required=True)
    title = fields.CharField(blank=True, required=False)
    url = fields.CharField(blank=True, required=False)
    useContext = fields.EmbeddedDocumentListField("UsageContext", blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        compose = EmbeddedAttribute(type="ValueSetCompose", getter="compose", setter="compose", searcher=StringSearch("compose"))
        contact = EmbeddedAttribute(type="ContactDetail", getter="contact", setter="contact", searcher=StringSearch("contact"))
        copyright = Attribute(getter="copyright", setter="copyright", searcher=StringSearch("copyright"))
        date = DateAttribute("date")
        description = Attribute(getter="description", setter="description", searcher=StringSearch("description"))
        expansion = EmbeddedAttribute(type="ValueSetExpansion", getter="expansion", setter="expansion", searcher=StringSearch("expansion"))
        experimental = Attribute(getter="experimental", setter="experimental", searcher=StringSearch("experimental"))
        extensible = Attribute(getter="extensible", setter="extensible", searcher=StringSearch("extensible"))
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        immutable = Attribute(getter="immutable", setter="immutable", searcher=StringSearch("immutable"))
        jurisdiction = EmbeddedAttribute(type="CodeableConcept", getter="jurisdiction", setter="jurisdiction", searcher=StringSearch("jurisdiction"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        publisher = Attribute(getter="publisher", setter="publisher", searcher=StringSearch("publisher"))
        purpose = Attribute(getter="purpose", setter="purpose", searcher=StringSearch("purpose"))
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))
        title = Attribute(getter="title", setter="title", searcher=StringSearch("title"))
        url = Attribute(getter="url", setter="url", searcher=StringSearch("url"))
        useContext = EmbeddedAttribute(type="UsageContext", getter="useContext", setter="useContext", searcher=StringSearch("useContext"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ValueSetCompose(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    exclude = fields.EmbeddedDocumentListField("ValueSetComposeInclude", blank=True, required=False)
    inactive = fields.BooleanField(blank=True, required=False)
    include = fields.EmbeddedDocumentListField("ValueSetComposeInclude", blank=False, required=True)
    lockedDate = fields.DateTimeField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        exclude = EmbeddedAttribute(type="ValueSetComposeInclude", getter="exclude", setter="exclude", searcher=StringSearch("exclude"))
        inactive = Attribute(getter="inactive", setter="inactive", searcher=StringSearch("inactive"))
        include = EmbeddedAttribute(type="ValueSetComposeInclude", getter="include", setter="include", searcher=StringSearch("include"))
        lockedDate = DateAttribute("lockedDate")

class ValueSetComposeInclude(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    concept = fields.EmbeddedDocumentListField("ValueSetComposeIncludeConcept", blank=True, required=False)
    filter = fields.EmbeddedDocumentListField("ValueSetComposeIncludeFilter", blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    valueSet = fields.ListField(fields.CharField(), blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        concept = EmbeddedAttribute(type="ValueSetComposeIncludeConcept", getter="concept", setter="concept", searcher=StringSearch("concept"))
        filter = EmbeddedAttribute(type="ValueSetComposeIncludeFilter", getter="filter", setter="filter", searcher=StringSearch("filter"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        valueSet = Attribute(getter="valueSet", setter="valueSet", searcher=StringSearch("valueSet"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ValueSetComposeIncludeConcept(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    code = fields.CharField(blank=False, required=True)
    designation = fields.EmbeddedDocumentListField("ValueSetComposeIncludeConceptDesignation", blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        designation = EmbeddedAttribute(type="ValueSetComposeIncludeConceptDesignation", getter="designation", setter="designation", searcher=StringSearch("designation"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))

class ValueSetComposeIncludeConceptDesignation(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    use = fields.EmbeddedDocumentField("Coding", blank=True, required=False)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        use = EmbeddedAttribute(type="Coding", getter="use", setter="use", searcher=StringSearch("use"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class ValueSetComposeIncludeFilter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    op = fields.CharField(blank=False, required=True)
    property = fields.CharField(blank=False, required=True)
    value = fields.CharField(blank=False, required=True)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        op = Attribute(getter="op", setter="op", searcher=StringSearch("op"))
        property = Attribute(getter="property", setter="property", searcher=StringSearch("property"))
        value = Attribute(getter="value", setter="value", searcher=StringSearch("value"))

class ValueSetExpansion(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    contains = fields.EmbeddedDocumentListField("ValueSetExpansionContains", blank=True, required=False)
    identifier = fields.CharField(blank=False, required=True)
    offset = fields.IntegerField(blank=True, required=False)
    parameter = fields.EmbeddedDocumentListField("ValueSetExpansionParameter", blank=True, required=False)
    timestamp = fields.DateTimeField(blank=False, required=True)
    total = fields.IntegerField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        contains = EmbeddedAttribute(type="ValueSetExpansionContains", getter="contains", setter="contains", searcher=StringSearch("contains"))
        identifier = Attribute(getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        offset = Attribute(getter="offset", setter="offset", searcher=NumericSearch("offset"))
        parameter = EmbeddedAttribute(type="ValueSetExpansionParameter", getter="parameter", setter="parameter", searcher=StringSearch("parameter"))
        timestamp = DateAttribute("timestamp")
        total = Attribute(getter="total", setter="total", searcher=NumericSearch("total"))

class ValueSetExpansionContains(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    abstract = fields.BooleanField(blank=True, required=False)
    code = fields.CharField(blank=True, required=False)
    contains = fields.EmbeddedDocumentListField("ValueSetExpansionContains", blank=True, required=False)
    designation = fields.EmbeddedDocumentListField("ValueSetComposeIncludeConceptDesignation", blank=True, required=False)
    display = fields.CharField(blank=True, required=False)
    inactive = fields.BooleanField(blank=True, required=False)
    system = fields.CharField(blank=True, required=False)
    version = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        abstract = Attribute(getter="abstract", setter="abstract", searcher=StringSearch("abstract"))
        code = Attribute(getter="code", setter="code", searcher=StringSearch("code"))
        contains = EmbeddedAttribute(type="ValueSetExpansionContains", getter="contains", setter="contains", searcher=StringSearch("contains"))
        designation = EmbeddedAttribute(type="ValueSetComposeIncludeConceptDesignation", getter="designation", setter="designation", searcher=StringSearch("designation"))
        display = Attribute(getter="display", setter="display", searcher=StringSearch("display"))
        inactive = Attribute(getter="inactive", setter="inactive", searcher=StringSearch("inactive"))
        system = Attribute(getter="system", setter="system", searcher=StringSearch("system"))
        version = Attribute(getter="version", setter="version", searcher=StringSearch("version"))

class ValueSetExpansionParameter(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    name = fields.CharField(blank=False, required=True)
    valueBoolean = fields.BooleanField(blank=True, required=False)
    valueCode = fields.CharField(blank=True, required=False)
    valueDecimal = fields.FloatField(blank=True, required=False)
    valueInteger = fields.IntegerField(blank=True, required=False)
    valueString = fields.CharField(blank=True, required=False)
    valueUri = fields.CharField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        name = Attribute(getter="name", setter="name", searcher=StringSearch("name"))
        valueBoolean = Attribute(getter="valueBoolean", setter="valueBoolean", searcher=StringSearch("valueBoolean"))
        valueCode = Attribute(getter="valueCode", setter="valueCode", searcher=StringSearch("valueCode"))
        valueDecimal = Attribute(getter="valueDecimal", setter="valueDecimal", searcher=NumericSearch("valueDecimal"))
        valueInteger = Attribute(getter="valueInteger", setter="valueInteger", searcher=NumericSearch("valueInteger"))
        valueString = Attribute(getter="valueString", setter="valueString", searcher=StringSearch("valueString"))
        valueUri = Attribute(getter="valueUri", setter="valueUri", searcher=StringSearch("valueUri"))

class VisionPrescription(FhirBaseModel, MongoModel):
    
    implicitRules = fields.CharField(blank=True, required=False)
    language = fields.CharField(blank=True, required=False)
    meta = fields.EmbeddedDocumentField("Meta", blank=True, required=False)
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    text = fields.EmbeddedDocumentField("Narrative", blank=True, required=False)
    dateWritten = fields.DateTimeField(blank=True, required=False)
    dispense = fields.EmbeddedDocumentListField("VisionPrescriptionDispense", blank=True, required=False)
    encounter = fields.ObjectIdField(blank=True, required=False)
    identifier = fields.EmbeddedDocumentListField("Identifier", blank=True, required=False)
    patient = fields.ObjectIdField(blank=True, required=False)
    prescriber = fields.ObjectIdField(blank=True, required=False)
    reasonCodeableConcept = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    reasonReference = fields.ObjectIdField(blank=True, required=False)
    status = fields.CharField(blank=True, required=False)
    class FhirMap:
        id = Attribute(getter=("_id", str), searcher=StringSearch("id"))
        implicitRules = Attribute(getter="implicitRules", setter="implicitRules", searcher=StringSearch("implicitRules"))
        language = Attribute(getter="language", setter="language", searcher=StringSearch("language"))
        meta = EmbeddedAttribute(type="Meta", getter="meta", setter="meta", searcher=StringSearch("meta"))
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        text = EmbeddedAttribute(type="Narrative", getter="text", setter="text", searcher=StringSearch("text"))
        dateWritten = DateAttribute("dateWritten")
        dispense = EmbeddedAttribute(type="VisionPrescriptionDispense", getter="dispense", setter="dispense", searcher=StringSearch("dispense"))
        encounter = ObjectIdReferenceAttribute({'Encounter'}, ("encounter", str), "encounter", pk_setter="encounter")
        identifier = EmbeddedAttribute(type="Identifier", getter="identifier", setter="identifier", searcher=StringSearch("identifier"))
        patient = ObjectIdReferenceAttribute({'Patient'}, ("patient", str), "patient", pk_setter="patient")
        prescriber = ObjectIdReferenceAttribute({'Practitioner'}, ("prescriber", str), "prescriber", pk_setter="prescriber")
        reasonCodeableConcept = EmbeddedAttribute(type="CodeableConcept", getter="reasonCodeableConcept", setter="reasonCodeableConcept", searcher=StringSearch("reasonCodeableConcept"))
        reasonReference = ObjectIdReferenceAttribute({'Condition'}, ("reasonReference", str), "reasonReference", pk_setter="reasonReference")
        status = Attribute(getter="status", setter="status", searcher=StringSearch("status"))

class VisionPrescriptionDispense(FhirBaseModel, EmbeddedMongoModel):
    extension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    id = fields.CharField(blank=True, required=False)
    modifierExtension = fields.EmbeddedDocumentListField("Extension", blank=True, required=False)
    add = fields.FloatField(blank=True, required=False)
    axis = fields.IntegerField(blank=True, required=False)
    backCurve = fields.FloatField(blank=True, required=False)
    base = fields.CharField(blank=True, required=False)
    brand = fields.CharField(blank=True, required=False)
    color = fields.CharField(blank=True, required=False)
    cylinder = fields.FloatField(blank=True, required=False)
    diameter = fields.FloatField(blank=True, required=False)
    duration = fields.EmbeddedDocumentField("Quantity", blank=True, required=False)
    eye = fields.CharField(blank=True, required=False)
    note = fields.EmbeddedDocumentListField("Annotation", blank=True, required=False)
    power = fields.FloatField(blank=True, required=False)
    prism = fields.FloatField(blank=True, required=False)
    product = fields.EmbeddedDocumentField("CodeableConcept", blank=True, required=False)
    sphere = fields.FloatField(blank=True, required=False)
    class FhirMap:
        extension = EmbeddedAttribute(type="Extension", getter="extension", setter="extension", searcher=StringSearch("extension"))
        id = Attribute(getter="id", setter="id", searcher=StringSearch("id"))
        modifierExtension = EmbeddedAttribute(type="Extension", getter="modifierExtension", setter="modifierExtension", searcher=StringSearch("modifierExtension"))
        add = Attribute(getter="add", setter="add", searcher=NumericSearch("add"))
        axis = Attribute(getter="axis", setter="axis", searcher=NumericSearch("axis"))
        backCurve = Attribute(getter="backCurve", setter="backCurve", searcher=NumericSearch("backCurve"))
        base = Attribute(getter="base", setter="base", searcher=StringSearch("base"))
        brand = Attribute(getter="brand", setter="brand", searcher=StringSearch("brand"))
        color = Attribute(getter="color", setter="color", searcher=StringSearch("color"))
        cylinder = Attribute(getter="cylinder", setter="cylinder", searcher=NumericSearch("cylinder"))
        diameter = Attribute(getter="diameter", setter="diameter", searcher=NumericSearch("diameter"))
        duration = EmbeddedAttribute(type="Quantity", getter="duration", setter="duration", searcher=StringSearch("duration"))
        eye = Attribute(getter="eye", setter="eye", searcher=StringSearch("eye"))
        note = EmbeddedAttribute(type="Annotation", getter="note", setter="note", searcher=StringSearch("note"))
        power = Attribute(getter="power", setter="power", searcher=NumericSearch("power"))
        prism = Attribute(getter="prism", setter="prism", searcher=NumericSearch("prism"))
        product = EmbeddedAttribute(type="CodeableConcept", getter="product", setter="product", searcher=StringSearch("product"))
        sphere = Attribute(getter="sphere", setter="sphere", searcher=NumericSearch("sphere"))